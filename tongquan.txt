# backend/api/v1/endpoints/departments.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
import schemas
from crud import crud_hr
from database import get_db_sqlserver, get_db_mysql
from auth.auth import get_current_active_hr_manager, get_current_active_admin

router = APIRouter()

@router.get("/", response_model=List[schemas.Department])
def read_departments(db_hr: Session = Depends(get_db_sqlserver), current_user: schemas.User = Depends(get_current_active_hr_manager)):
    return crud_hr.get_departments(db_hr)

@router.post("/", response_model=schemas.Department, status_code=status.HTTP_201_CREATED)
def create_department(dept: schemas.DepartmentCreate, db_hr: Session = Depends(get_db_sqlserver), db_payroll: Session = Depends(get_db_mysql), current_user: schemas.User = Depends(get_current_active_admin)):
    return crud_hr.create_department_synced(db_hr, db_payroll, dept)

@router.put("/{dept_id}", response_model=schemas.Department)
def update_department(dept_id: int, dept_update: schemas.DepartmentUpdate, db_hr: Session = Depends(get_db_sqlserver), db_payroll: Session = Depends(get_db_mysql), current_user: schemas.User = Depends(get_current_active_admin)):
    db_dept = crud_hr.update_department_synced(db_hr, db_payroll, dept_id, dept_update)
    if db_dept is None:
        raise HTTPException(status_code=404, detail="Không tìm thấy phòng ban")
    return db_dept

@router.delete("/{dept_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_department(dept_id: int, db_hr: Session = Depends(get_db_sqlserver), db_payroll: Session = Depends(get_db_mysql), current_user: schemas.User = Depends(get_current_active_admin)):
    if not crud_hr.delete_department(db_hr, db_payroll, dept_id):
        raise HTTPException(status_code=400, detail="Không thể xóa phòng ban, vẫn còn nhân viên được gán")
    return None
    ////////////////////
    # backend/api/v1/endpoints/employees.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List, Optional

import schemas
from crud import crud_employee, crud_payroll, crud_user # Thêm crud_user
# Sửa import: Thêm get_db_auth
from database import get_db_sqlserver, get_db_mysql, get_db_auth
from auth.auth import get_current_user, get_current_active_hr_manager, get_current_active_admin

router = APIRouter()

# --- SỬA HÀM NÀY ĐỂ NHẬN THAM SỐ LỌC ---
@router.get("/", response_model=List[schemas.Employee])
def read_employees(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    department_id: Optional[int] = None, # Tham số lọc mới
    position_id: Optional[int] = None,   # Tham số lọc mới
    status: Optional[str] = None,        # Tham số lọc mới
    db_hr: Session = Depends(get_db_sqlserver),
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_active_hr_manager)
):
    """
    Lấy danh sách nhân viên, hỗ trợ tìm kiếm và lọc theo phòng ban, chức vụ, trạng thái.
    """
    employees = crud_employee.get_employees(
        db_hr=db_hr, 
        db_auth=db_auth, 
        skip=skip, 
        limit=limit, 
        search=search,
        department_id=department_id, # Truyền tham số vào CRUD
        position_id=position_id,     # Truyền tham số vào CRUD
        status=status                # Truyền tham số vào CRUD
    )
    return employees
# --- KẾT THÚC SỬA ---


@router.post("/", response_model=schemas.Employee, status_code=status.HTTP_201_CREATED)
def create_employee(
    employee: schemas.EmployeeCreate,
    db_hr: Session = Depends(get_db_sqlserver),
    db_payroll: Session = Depends(get_db_mysql),
    db_auth: Session = Depends(get_db_auth), # <-- THÊM CSDL Auth
    current_user: schemas.User = Depends(get_current_active_hr_manager)
):
    """
    Thêm nhân viên mới, đồng bộ 3 CSDL.
    """
    db_employee = crud_employee.get_employee_by_email(db_hr, email=employee.Email)
    if db_employee:
        raise HTTPException(status_code=400, detail="Email nhân viên đã tồn tại trong CSDL HR")
    
    # Kiểm tra email trong CSDL Auth luôn cho chắc
    auth_user = crud_user.get_user_by_email(db_auth, email=employee.Email)
    if auth_user:
         raise HTTPException(status_code=400, detail="Email đã tồn tại trong hệ thống tài khoản")

    # Truyền db_auth vào hàm crud
    return crud_employee.create_employee_synced(db_hr, db_payroll, db_auth, employee)

@router.get("/{employee_id}", response_model=schemas.EmployeeFullProfile)
def read_employee_profile(
    employee_id: int,
    db_hr: Session = Depends(get_db_sqlserver),
    db_payroll: Session = Depends(get_db_mysql),
    db_auth: Session = Depends(get_db_auth), # <-- THÊM CSDL Auth
    current_user: schemas.User = Depends(get_current_user)
):
    """
    Lấy hồ sơ chi tiết của nhân viên từ cả 3 CSDL.
    """
    db_employee_hr = crud_employee.get_employee_by_id(db_hr, employee_id)
    if not db_employee_hr:
        raise HTTPException(status_code=404, detail="Không tìm thấy nhân viên")

    # Kiểm tra quyền Employee xem của chính mình (đã đúng)
    if current_user.role == "Employee" and employee_id != current_user.emp_id:
        raise HTTPException(status_code=403, detail="Không có quyền xem hồ sơ này")

    salaries = crud_payroll.get_salary_history(db_payroll, employee_id)
    attendances = crud_payroll.get_attendance_data(db_payroll, employee_id)

    # Lấy thông tin role từ Auth DB
    auth_user = crud_user.get_user_by_email(db_auth, email=db_employee_hr.Email)

    # Chuyển đổi sang schema và thêm thông tin
    profile_data = schemas.EmployeeFullProfile.from_orm(db_employee_hr)
    profile_data.salaries = salaries
    profile_data.attendances = attendances
    if auth_user:
        profile_data.role = auth_user.role # Gán vai trò vào profile
        profile_data.auth_user_id = auth_user.id

    return profile_data

@router.put("/{employee_id}", response_model=schemas.Employee)
def update_employee(
    employee_id: int,
    employee_update: schemas.EmployeeUpdate,
    db_hr: Session = Depends(get_db_sqlserver),
    db_payroll: Session = Depends(get_db_mysql),
    db_auth: Session = Depends(get_db_auth), # <-- THÊM CSDL Auth
    current_user: schemas.User = Depends(get_current_active_hr_manager)
):
    """
    Cập nhật thông tin nhân viên, đồng bộ 3 CSDL.
    """
    # Truyền db_auth vào hàm crud
    db_employee = crud_employee.update_employee_synced(
        db_hr, db_payroll, db_auth, employee_id, employee_update
    )
    if db_employee is None:
        raise HTTPException(status_code=404, detail="Không tìm thấy nhân viên")

    # Convert lại sang schema Employee để trả về (bao gồm cả role)
    result_schema = schemas.Employee.from_orm(db_employee)
    auth_user = crud_user.get_user_by_email(db_auth, email=db_employee.Email)
    if auth_user:
        result_schema.role = auth_user.role
        result_schema.auth_user_id = auth_user.id
    return result_schema


@router.delete("/{employee_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_employee(
    employee_id: int,
    db_hr: Session = Depends(get_db_sqlserver),
    db_payroll: Session = Depends(get_db_mysql),
    db_auth: Session = Depends(get_db_auth), # <-- THÊM CSDL Auth
    current_user: schemas.User = Depends(get_current_active_admin)
):
    """
    Xóa nhân viên, đồng bộ 3 CSDL (chỉ Admin).
    """
    # Truyền db_auth vào hàm crud
    success = crud_employee.delete_employee_synced(db_hr, db_payroll, db_auth, employee_id)
    if not success:
        raise HTTPException(
            status_code=400,
            detail="Không thể xóa nhân viên do có dữ liệu liên quan (lương hoặc cổ tức)."
        )
    return None
    //////////////
    # backend/api/v1/endpoints/login.py
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from datetime import timedelta

from database import get_db_auth
from core.config import settings
# SỬA: Bỏ import không dùng đến
from core.security import create_access_token 
from crud import crud_user
import schemas

router = APIRouter()

@router.post("", response_model=schemas.Token)
def login_for_access_token(
    db_auth: Session = Depends(get_db_auth),
    form_data: OAuth2PasswordRequestForm = Depends()
):
    """
    (MODIFIED) Authenticate user from Auth DB using plain password.
    """
    user = crud_user.get_user_by_email(db_auth, email=form_data.username)

    # (MODIFIED) Check user and compare plain passwords directly
    if not user or user.hashed_password != form_data.password:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # Create access token (remains the same)
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={
            "sub": user.email,
            "role": user.role,
            "emp_id": user.employee_id_link
        },
        expires_delta=access_token_expires
    )

    return {"access_token": access_token, "token_type": "bearer"}
    ////////////////
    # backend/api/v1/endpoints/notifications.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List

import schemas
from crud import crud_notification
from database import get_db_auth
from auth.auth import get_current_user # Cần user hiện tại

router = APIRouter()

@router.get("/", response_model=List[schemas.Notification])
def read_notifications_for_current_user(
    skip: int = 0,
    limit: int = 10, # Giới hạn số lượng trả về ban đầu
    include_read: bool = False, # Mặc định chỉ lấy chưa đọc
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_user)
):
    """Lấy danh sách thông báo cho người dùng đang đăng nhập."""
    notifications = crud_notification.get_notifications_for_user(
        db_auth, current_user=current_user, skip=skip, limit=limit, include_read=include_read
    )
    return notifications

@router.get("/unread-count", response_model=int)
def get_unread_count(
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_user)
):
    """Lấy số lượng thông báo chưa đọc."""
    count = crud_notification.get_unread_notification_count(db_auth, current_user)
    return count


@router.put("/{notification_id}/read", response_model=schemas.Notification)
def mark_notification_as_read(
    notification_id: int,
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_user)
):
    """Đánh dấu một thông báo cụ thể là đã đọc."""
    result = crud_notification.mark_notification_as_read(db_auth, notification_id, current_user)
    if result is None:
        raise HTTPException(status_code=404, detail="Notification not found")
    if result == "Forbidden":
         raise HTTPException(status_code=403, detail="Not authorized to read this notification")
    return result

@router.put("/read-all", status_code=status.HTTP_200_OK)
def mark_all_user_notifications_as_read(
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_user)
):
    """Đánh dấu tất cả thông báo chưa đọc của user là đã đọc."""
    result = crud_notification.mark_all_notifications_as_read(db_auth, current_user)
    return result
    /////////////////
    from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

import schemas
from crud import crud_payroll
from database import get_db_mysql
from auth.auth import get_current_user, get_current_active_payroll_manager, get_current_active_admin

router = APIRouter()

@router.get("/{employee_id}/salaries", response_model=List[schemas.Salary])
def get_employee_salaries(
    employee_id: int,
    db_payroll: Session = Depends(get_db_mysql),
    current_user: schemas.User = Depends(get_current_user) # Cho phép người dùng đã đăng nhập xem
):
    """Xem lịch sử lương từ PAYROLL"""
    salaries = crud_payroll.get_salary_history(db_payroll, employee_id)
    return salaries

@router.get("/{employee_id}/attendance", response_model=List[schemas.Attendance])
def get_employee_attendance(
    employee_id: int,
    db_payroll: Session = Depends(get_db_mysql),
    current_user: schemas.User = Depends(get_current_user) # Cho phép người dùng đã đăng nhập xem
):
    """Xem lịch sử chấm công từ PAYROLL"""
    attendance = crud_payroll.get_attendance_data(db_payroll, employee_id)
    return attendance

# --- ENDPOINT MỚI ---
@router.put("/salaries/{salary_id}", response_model=schemas.Salary)
def update_salary_record(
    salary_id: int,
    salary_update: schemas.SalaryUpdate,
    db_payroll: Session = Depends(get_db_mysql),
    # Phân quyền: Chỉ Payroll Manager hoặc Admin được sửa
    current_user: schemas.User = Depends(get_current_active_payroll_manager)
):
    """Cập nhật một bản ghi lương (Bonus, Deductions, BaseSalary)"""
    db_salary = crud_payroll.update_salary(db_payroll, salary_id, salary_update)
    if db_salary is None:
        raise HTTPException(status_code=404, detail="Không tìm thấy bản ghi lương")
    return db_salary
    /////////////
    # backend/api/v1/endpoints/positions.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
import schemas
from crud import crud_hr
from database import get_db_sqlserver, get_db_mysql
from auth.auth import get_current_active_hr_manager, get_current_active_admin

router = APIRouter()

@router.get("/", response_model=List[schemas.Position])
def read_positions(db_hr: Session = Depends(get_db_sqlserver), current_user: schemas.User = Depends(get_current_active_hr_manager)):
    return crud_hr.get_positions(db_hr)

@router.post("/", response_model=schemas.Position, status_code=status.HTTP_201_CREATED)
def create_position(pos: schemas.PositionCreate, db_hr: Session = Depends(get_db_sqlserver), db_payroll: Session = Depends(get_db_mysql), current_user: schemas.User = Depends(get_current_active_admin)):
    return crud_hr.create_position_synced(db_hr, db_payroll, pos)

@router.put("/{pos_id}", response_model=schemas.Position)
def update_position(pos_id: int, pos_update: schemas.PositionUpdate, db_hr: Session = Depends(get_db_sqlserver), db_payroll: Session = Depends(get_db_mysql), current_user: schemas.User = Depends(get_current_active_admin)):
    db_pos = crud_hr.update_position_synced(db_hr, db_payroll, pos_id, pos_update)
    if db_pos is None:
        raise HTTPException(status_code=404, detail="Không tìm thấy chức vụ")
    return db_pos

@router.delete("/{pos_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_position(pos_id: int, db_hr: Session = Depends(get_db_sqlserver), db_payroll: Session = Depends(get_db_mysql), current_user: schemas.User = Depends(get_current_active_admin)):
    if not crud_hr.delete_position(db_hr, db_payroll, pos_id):
        raise HTTPException(status_code=400, detail="Không thể xóa chức vụ, vẫn còn nhân viên được gán")
    return None
    ///////////////////
    from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import func
from database import get_db_sqlserver, get_db_mysql
from auth.auth import get_current_user
import models
import schemas
import logging

# Thiết lập logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/hr_summary")
def get_hr_report(
    db_hr: Session = Depends(get_db_sqlserver),
    current_user: schemas.User = Depends(get_current_user)
):
    """
    Báo cáo nhân sự từ database HUMAN_2025.
    """
    try:
        total_employees = db_hr.query(models.EmployeeHR).count()

        # Tạo query để lấy số lượng nhân viên theo phòng ban
        distribution_query = db_hr.query(
            models.DepartmentHR.DepartmentName,
            func.count(models.EmployeeHR.EmployeeID)
        ).join(
            models.EmployeeHR, models.EmployeeHR.DepartmentID == models.DepartmentHR.DepartmentID
        ).group_by(models.DepartmentHR.DepartmentName)

        # Duyệt qua kết quả để tránh lỗi SQLGetData với một số driver
        distribution_data = {}
        for name, count in distribution_query:
            distribution_data[name] = count

    except Exception as e:
        logger.error(f"Error getting HR report: {e}")
        raise HTTPException(status_code=500, detail="Could not fetch HR report data.")

    return {
        "total_employees": total_employees,
        "distribution_by_dept": distribution_data
    }

@router.get("/payroll_summary")
def get_payroll_report(
    db_payroll: Session = Depends(get_db_mysql),
    current_user: schemas.User = Depends(get_current_user)
):
    """
    Báo cáo lương từ database PAYROLL.
    """
    try:
        total_budget = db_payroll.query(func.sum(models.Salary.NetSalary)).scalar()

        # Query để lấy lương trung bình theo phòng ban
        avg_salary_query = db_payroll.query(
            models.DepartmentPayroll.DepartmentName,
            func.avg(models.Salary.NetSalary)
        ).join(
            models.EmployeePayroll, models.Salary.EmployeeID == models.EmployeePayroll.EmployeeID
        ).join(
            models.DepartmentPayroll, models.EmployeePayroll.DepartmentID == models.DepartmentPayroll.DepartmentID
        ).group_by(models.DepartmentPayroll.DepartmentName)

        # Duyệt qua kết quả và chuyển đổi Decimal sang float
        avg_salary_data = {}
        for name, avg in avg_salary_query:
            avg_salary_data[name] = float(avg) if avg is not None else 0.0
            
    except Exception as e:
        logger.error(f"Error getting Payroll report: {e}")
        raise HTTPException(status_code=500, detail="Could not fetch Payroll report data.")

    return {
        "total_salary_budget": float(total_budget) if total_budget is not None else 0.0,
        "avg_salary_by_dept": avg_salary_data
    }

@router.get("/dividend_summary")
def get_dividend_report(
    db_hr: Session = Depends(get_db_sqlserver),
    current_user: schemas.User = Depends(get_current_user)
):
    """
    Báo cáo cổ tức từ database HUMAN_2025.
    """
    try:
        total_dividends = db_hr.query(func.sum(models.Dividend.DividendAmount)).scalar()
        employee_shareholders = db_hr.query(models.Dividend.EmployeeID).distinct().count()

    except Exception as e:
        logger.error(f"Error getting Dividend report: {e}")
        raise HTTPException(status_code=500, detail="Could not fetch Dividend report data.")

    return {
        "total_dividend_amount": float(total_dividends) if total_dividends is not None else 0.0,
        "employee_shareholders": employee_shareholders
    }
    //////////////////////
    # backend/api/v1/endpoints/users.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List, Optional # <-- Import Optional
import schemas
from crud import crud_user
from database import get_db_auth
from auth.auth import get_current_active_admin, get_current_user

router = APIRouter()

# --- SỬA HÀM NÀY ĐỂ NHẬN THAM SỐ LỌC/TÌM KIẾM ---
@router.get("/", response_model=List[schemas.UserInDB])
def read_users(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None, # Tham số tìm kiếm từ query URL
    role: Optional[str] = None,   # Tham số lọc vai trò từ query URL
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_active_admin) # Chỉ Admin
):
    """
    Lấy danh sách tài khoản từ CSDL Auth (dashboard_auth.db),
    hỗ trợ tìm kiếm và lọc.
    """
    users = crud_user.get_users(
        db_auth,
        skip=skip,
        limit=limit,
        search=search, # Truyền vào CRUD
        role=role      # Truyền vào CRUD
    )
    return users
# --- KẾT THÚC SỬA ---

@router.post("/", response_model=schemas.UserInDB, status_code=status.HTTP_201_CREATED)
def create_new_user_manual(
    # ... (giữ nguyên)
    user: schemas.UserCreate,
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_active_admin)
):
    # ... (giữ nguyên)
    db_user = crud_user.get_user_by_email(db_auth, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email đã tồn tại")
    return crud_user.create_user(db_auth, user)

@router.put("/{user_id}/role", response_model=schemas.UserInDB)
def update_user_role_endpoint(
    # ... (giữ nguyên)
    user_id: int,
    role_update: schemas.UserRoleUpdate,
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_active_admin)
):
    # ... (giữ nguyên logic kiểm tra self-update)
    if not hasattr(current_user, 'id'):
         active_admin_user = crud_user.get_user_by_email(db_auth, current_user.email)
         if not active_admin_user:
              raise HTTPException(status_code=403, detail="Could not verify admin identity.")
         current_admin_id = active_admin_user.id
    else:
         current_admin_id = current_user.id

    if current_admin_id == user_id:
         raise HTTPException(status_code=400, detail="Admin cannot change their own role.")

    db_user = crud_user.update_user_role(db_auth, user_id, role_update.role)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

@router.put("/{user_id}/password", status_code=status.HTTP_204_NO_CONTENT)
def reset_user_password_endpoint(
    # ... (giữ nguyên)
    user_id: int,
    password_update: schemas.UserPasswordUpdate,
    db_auth: Session = Depends(get_db_auth),
    current_user: schemas.User = Depends(get_current_active_admin)
):
    # ... (giữ nguyên)
    db_user = crud_user.update_user_password(db_auth, user_id, password_update.new_password)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return None
    ///////////////////
    # backend/api/v1/api.py
from fastapi import APIRouter
# --- THÊM notifications ---
from api.v1.endpoints import (
    login, employees, departments, positions,
    payroll, reports, users, notifications
)

api_router = APIRouter()
api_router.include_router(login.router, prefix="/login", tags=["Login"])
api_router.include_router(users.router, prefix="/users", tags=["Users"])
# --- THÊM DÒNG NÀY ---
api_router.include_router(notifications.router, prefix="/notifications", tags=["Notifications"])
# --- KẾT THÚC THÊM ---
api_router.include_router(employees.router, prefix="/employees", tags=["Employees"])
api_router.include_router(departments.router, prefix="/departments", tags=["Departments"])
api_router.include_router(positions.router, prefix="/positions", tags=["Positions"])
api_router.include_router(payroll.router, prefix="/payroll", tags=["Payroll"])
api_router.include_router(reports.router, prefix="/reports", tags=["Reports"])
///////////////////
# backend/auth/auth.py
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from sqlalchemy.orm import Session
from pydantic import ValidationError
from typing import TYPE_CHECKING, Optional

from core.config import settings
from database import get_db_auth
from models import User as AuthUser
import schemas
from crud import crud_user

if TYPE_CHECKING:
    from models import EmployeeHR

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/v1/login")

# --- Logic phân quyền (Giữ nguyên) ---
def get_user_role(db_user: 'EmployeeHR') -> str:
    if not db_user:
        return "Employee"
    if db_user.PositionID == 5: # Giám đốc
        return "Admin"
    elif db_user.DepartmentID == 1: # Nhân sự
        return "HR Manager"
    elif db_user.DepartmentID == 2: # Kế toán
        return "Payroll Manager"
    else:
        return "Employee"

async def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db_auth)
) -> schemas.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(
            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]
        )
        email: str = payload.get("sub")
        role: str = payload.get("role")
        emp_id: Optional[int] = payload.get("emp_id")

        user_in_db = crud_user.get_user_by_email(db, email=email)
        if not user_in_db:
             raise credentials_exception
        user_id = user_in_db.id

        if email is None or role is None:
            raise credentials_exception

        token_data = schemas.TokenData(email=email, role=role, emp_id=emp_id)

    except (JWTError, ValidationError):
        raise credentials_exception

    # Lấy lại user từ DB để đảm bảo user vẫn tồn tại
    user = crud_user.get_user_by_email(db, email=token_data.email)
    if user is None:
        raise credentials_exception

    return schemas.User(id=user.id, email=user.email, role=token_data.role, emp_id=token_data.emp_id)


# --- Dependency phân quyền ---
def get_current_active_admin(current_user: schemas.User = Depends(get_current_user)):
    if current_user.role != "Admin":
        raise HTTPException(status_code=403, detail="Not authorized: Admins only")
    return current_user

# --- SỬA HÀM NÀY ---
def get_current_active_hr_manager(current_user: schemas.User = Depends(get_current_user)):
    # CHO PHÉP CẢ Payroll Manager TRUY CẬP CÁC ENDPOINT DÙNG DEPENDENCY NÀY
    allowed_roles = ["Admin", "HR Manager", "Payroll Manager"]
    if current_user.role not in allowed_roles:
        raise HTTPException(status_code=403, detail="Not authorized: HR, Payroll, or Admins only") # Cập nhật thông báo lỗi
    return current_user
# --- KẾT THÚC SỬA ---

# --- SỬA HÀM NÀY (Đã bao gồm trong thay đổi ở trên, nhưng để rõ ràng) ---
def get_current_active_payroll_manager(current_user: schemas.User = Depends(get_current_user)):
    # Dependency này vẫn giữ nguyên, chỉ cho Admin và Payroll Manager
    if current_user.role not in ["Admin", "Payroll Manager"]:
        raise HTTPException(status_code=403, detail="Not authorized: Payroll or Admins only")
    return current_user
# --- KẾT THÚC SỬA ---
////////////////////////
# backend/core/config.py
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine # Đã chuyển import create_engine về đây

load_dotenv()

class Settings:
    # SQL Server (CSDL Cũ 1)
    SQL_SERVER_DRIVER = os.getenv("SQL_SERVER_DRIVER", "ODBC Driver 17 for SQL Server")
    SQL_SERVER_SERVER = os.getenv("SQL_SERVER_SERVER", "(LocalDB)\\MSSQLLocalDB")
    SQL_SERVER_DATABASE = os.getenv("SQL_SERVER_DATABASE", "HUMAN_2025")
    SQL_SERVER_USER = os.getenv("SQL_SERVER_USER")
    SQL_SERVER_PASSWORD = os.getenv("SQL_SERVER_PASSWORD")

    _driver_formatted = SQL_SERVER_DRIVER.replace(' ', '+')

    if SQL_SERVER_USER:
        SQLALCHEMY_DATABASE_URI_SQLSERVER = (
            f"mssql+pyodbc://{SQL_SERVER_USER}:{SQL_SERVER_PASSWORD}@"
            f"{SQL_SERVER_SERVER}/{SQL_SERVER_DATABASE}?"
            f"driver={_driver_formatted}&charset=utf8&MARS_Connection=yes"
        )
    else:
        SQLALCHEMY_DATABASE_URI_SQLSERVER = (
            f"mssql+pyodbc://{SQL_SERVER_SERVER}/{SQL_SERVER_DATABASE}?"
            f"driver={_driver_formatted}&Trusted_Connection=yes&charset=utf8&MARS_Connection=yes"
        )

    # MySQL (CSDL Cũ 2) - KIỂM TRA LẠI PHẦN NÀY
    MYSQL_HOST = os.getenv("MYSQL_HOST", "localhost")
    MYSQL_DATABASE = os.getenv("MYSQL_DATABASE", "payroll")
    MYSQL_USER = os.getenv("MYSQL_USER", "root")
    MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD", "") # Đảm bảo đọc đúng biến

    SQLALCHEMY_DATABASE_URI_MYSQL = (
        f"mysql+mysqlconnector://{MYSQL_USER}:{MYSQL_PASSWORD}@"
        f"{MYSQL_HOST}/{MYSQL_DATABASE}?charset=utf8mb4"
    )
    # KẾT THÚC KIỂM TRA MYSQL

    # CSDL mới cho Dashboard Auth (SQLite)
    DASHBOARD_DB_URL = os.getenv("DASHBOARD_DB_URL", "sqlite:///./dashboard_auth.db")

    # JWT Settings
    SECRET_KEY = os.getenv("SECRET_KEY", "a_very_secret_key_that_is_long_and_secure")
    ALGORITHM = os.getenv("ALGORITHM", "HS256")
    ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 60))

settings = Settings()
/////////////////////
# backend/core/security.py
from datetime import datetime, timedelta
from typing import Optional

from jose import jwt
# from passlib.context import CryptContext # <-- REMOVE

from core.config import settings

# --- REMOVE CryptContext ---
# pwd_context = CryptContext(...)

def verify_password(plain_password: str, stored_password: str) -> bool:
    """
    (MODIFIED) Compare plain password with stored plain password.
    """
    return plain_password == stored_password # <-- Direct comparison

def get_password_hash(password: str) -> str:
    """
    (MODIFIED) Return the original password (no hashing).
    """
    return password # <-- Return plain password

# --- create_access_token function remains the same ---
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """
    Create a new JWT access token.
    """
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt
    /////////////////
    # backend/crud/crud_employee.py
from fastapi import HTTPException
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import or_
from models import (
    EmployeeHR, EmployeePayroll, DepartmentPayroll, PositionPayroll,
    DepartmentHR, PositionHR, Salary, Attendance, Dividend,
    User as AuthUser
)
import schemas
from auth.auth import get_user_role as get_role_from_hr
from . import crud_user
from core.security import get_password_hash
from typing import Optional

def get_employee_by_id(db_hr: Session, employee_id: int):
    """Lấy thông tin một nhân viên theo ID từ CSDL HR."""
    return db_hr.query(EmployeeHR).filter(EmployeeHR.EmployeeID == employee_id).first()

def get_employee_by_email(db_hr: Session, email: str):
    """Lấy thông tin một nhân viên theo email, join sẵn phòng ban và chức vụ."""
    return db_hr.query(EmployeeHR).options(
        joinedload(EmployeeHR.department),
        joinedload(EmployeeHR.position)
    ).filter(EmployeeHR.Email == email).first()

# --- HÀM ĐÃ SỬA ĐỂ FIX LỖI PYODBC ---
def get_employees(
    db_hr: Session,
    db_auth: Session,
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    department_id: Optional[int] = None,
    position_id: Optional[int] = None,
    status: Optional[str] = None):
    """
    Lấy danh sách nhân viên HR, eager load, hỗ trợ tìm kiếm/lọc,
    và tối ưu hóa join với CSDL Auth, xử lý lỗi pyodbc.
    """
    # 1. Build query for HR DB (SQL Server)
    query = db_hr.query(EmployeeHR).options(
        joinedload(EmployeeHR.department),
        joinedload(EmployeeHR.position)
    )

    if department_id:
        query = query.filter(EmployeeHR.DepartmentID == department_id)
    if position_id:
        query = query.filter(EmployeeHR.PositionID == position_id)
    if status:
        query = query.filter(EmployeeHR.Status == status)

    if search:
        search_term_like = f"%{search}%"
        # Cần join ở đây để lọc theo tên Department/Position
        query = query.outerjoin(DepartmentHR).outerjoin(PositionHR) 
        search_filters = [
            EmployeeHR.FullName.ilike(search_term_like),
            EmployeeHR.Email.ilike(search_term_like),
            DepartmentHR.DepartmentName.ilike(search_term_like),
            PositionHR.PositionName.ilike(search_term_like)
        ]
        try:
            search_id = int(search)
            search_filters.append(EmployeeHR.EmployeeID == search_id)
        except ValueError:
            pass
        query = query.filter(or_(*search_filters))

    # Apply ordering, skip, limit
    query = query.order_by(EmployeeHR.EmployeeID).offset(skip).limit(limit)

    # 2. Execute HR query and *immediately* fetch all results into a list
    # Đây là bước quan trọng để fix lỗi pyodbc
    try:
        # Sử dụng .all() để trả về một list
        hr_employees = query.all()
    except Exception as e:
        # Log lỗi cụ thể khi fetch từ SQL Server
        print(f"ERROR fetching from SQL Server in get_employees: {e}")
        # Báo lỗi HTTPException để FastAPI xử lý
        raise HTTPException(status_code=500, detail=f"Database error fetching employee list: {e}")

    # 3. Lấy emails để truy vấn CSDL Auth
    emails = [emp.Email for emp in hr_employees if emp.Email]
    auth_map = {} # Khởi tạo map rỗng

    if emails:
        # 4. Truy vấn CSDL Auth (SQLite) riêng biệt
        try:
            # Lấy tất cả user khớp trong 1 lần query
            auth_users_list = db_auth.query(AuthUser).filter(AuthUser.email.in_(emails)).all()
            # Tạo một lookup map
            auth_map = {user.email: user for user in auth_users_list}
        except Exception as e:
            # Log lỗi khi fetch từ Auth DB nhưng có thể tiếp tục
            print(f"WARNING fetching from Auth DB in get_employees: {e}")
            # Tùy yêu cầu, bạn có thể raise HTTPException ở đây

    # 5. Kết hợp kết quả trong Python
    results = []
    for emp_hr in hr_employees:
        # Chuyển đổi HR employee sang Pydantic schema
        # Sẽ không lỗi lazy loading vì đã dùng joinedload
        try:
            emp_schema = schemas.Employee.from_orm(emp_hr)
        except Exception as e:
             print(f"ERROR converting EmployeeHR (ID: {emp_hr.EmployeeID}) to schema: {e}")
             # Bỏ qua nhân viên này hoặc xử lý lỗi
             continue

        # Tra cứu thông tin Auth user từ map
        auth_user = auth_map.get(emp_hr.Email)
        if auth_user:
            emp_schema.role = auth_user.role
            emp_schema.auth_user_id = auth_user.id
        
        results.append(emp_schema)

    return results
# --- KẾT THÚC HÀM SỬA ---


def create_employee_synced(db_hr: Session, db_payroll: Session, db_auth: Session, employee: schemas.EmployeeCreate):
    """Thêm nhân viên mới, đồng bộ sang PAYROLL và CSDL AUTH, xử lý giao dịch an toàn."""

    # 1. Tạo trong HR DB
    employee_data = employee.dict(exclude={"password"})
    db_employee_hr = EmployeeHR(**employee_data)
    db_hr.add(db_employee_hr)
    try:
        db_hr.commit()
        db_hr.refresh(db_employee_hr)
    except Exception as e:
        db_hr.rollback()
        raise HTTPException(status_code=400, detail=f"Lỗi khi tạo nhân viên trong HR DB: {e}")

    # 2. Đồng bộ sang Payroll DB
    db_employee_payroll = None
    try:
        # Đồng bộ Department và Position nếu chưa tồn tại
        dept_hr = db_hr.get(DepartmentHR, db_employee_hr.DepartmentID)
        if dept_hr and not db_payroll.get(DepartmentPayroll, dept_hr.DepartmentID):
            db_payroll.add(DepartmentPayroll(DepartmentID=dept_hr.DepartmentID, DepartmentName=dept_hr.DepartmentName))

        pos_hr = db_hr.get(PositionHR, db_employee_hr.PositionID)
        if pos_hr and not db_payroll.get(PositionPayroll, pos_hr.PositionID):
            db_payroll.add(PositionPayroll(PositionID=pos_hr.PositionID, PositionName=pos_hr.PositionName))

        db_employee_payroll = EmployeePayroll(
            EmployeeID=db_employee_hr.EmployeeID,
            FullName=db_employee_hr.FullName,
            DepartmentID=db_employee_hr.DepartmentID,
            PositionID=db_employee_hr.PositionID,
            Status=db_employee_hr.Status
        )
        db_payroll.add(db_employee_payroll)
        db_payroll.commit()
    except Exception as e_payroll:
        # Nếu Payroll lỗi, hoàn tác HR
        db_hr.delete(db_employee_hr)
        db_hr.commit()
        db_payroll.rollback()
        raise HTTPException(status_code=500, detail=f"Lỗi khi đồng bộ nhân viên sang Payroll DB: {e_payroll}. Thao tác đã được hoàn tác.")

    # 3. Đồng bộ sang Auth DB
    try:
        # SỬA: Cần lấy lại db_employee_hr với joinload để get_role_from_hr hoạt động
        db_employee_hr_joined = db_hr.query(EmployeeHR).options(
            joinedload(EmployeeHR.department),
            joinedload(EmployeeHR.position)
        ).filter(EmployeeHR.EmployeeID == db_employee_hr.EmployeeID).first()

        role = get_role_from_hr(db_employee_hr_joined) # Dùng bản đã join
        auth_user_in = schemas.UserCreate(
            full_name=employee.FullName,
            email=employee.Email,
            password=employee.password, # crud_user.create_user sẽ tự động băm
            role=role,
            phone_number=employee.PhoneNumber,
            employee_id_link=db_employee_hr.EmployeeID
        )
        # Dùng hàm create_user đã có sẵn logic băm mật khẩu
        crud_user.create_user(db_auth, auth_user_in)
    except Exception as e_auth:
        # Nếu Auth lỗi, hoàn tác cả HR và Payroll
        db_hr.delete(db_employee_hr)
        db_hr.commit()

        if db_employee_payroll:
            # Query lại employee payroll để xóa (nếu đã commit thành công)
            emp_payroll_to_delete = db_payroll.get(EmployeePayroll, db_employee_payroll.EmployeeID)
            if emp_payroll_to_delete:
                db_payroll.delete(emp_payroll_to_delete)
                db_payroll.commit()

        raise HTTPException(status_code=500, detail=f"Lỗi đồng bộ nhân viên sang Auth DB: {e_auth}. Mọi thao tác đã được hoàn tác.")

    # Trả về bản đã join
    return db_employee_hr_joined

def update_employee_synced(db_hr: Session, db_payroll: Session, db_auth: Session, employee_id: int, employee_update: schemas.EmployeeUpdate):
    """Cập nhật nhân viên, đồng bộ sang PAYROLL và AUTH."""

    # 1. Cập nhật HR DB
    # SỬA: Query có joinedload
    db_employee_hr = db_hr.query(EmployeeHR).options(
        joinedload(EmployeeHR.department),
        joinedload(EmployeeHR.position)
    ).filter(EmployeeHR.EmployeeID == employee_id).first()

    if not db_employee_hr:
        return None

    update_data = employee_update.dict(exclude_unset=True)
    payroll_sync_needed = any(key in ["DepartmentID", "PositionID", "Status", "FullName"] for key in update_data)

    for key, value in update_data.items():
        setattr(db_employee_hr, key, value)
    db_hr.add(db_employee_hr)
    try:
        db_hr.commit()
        # Refresh là quan trọng để cập nhật relationships nếu chúng thay đổi
        db_hr.refresh(db_employee_hr, attribute_names=['department', 'position'])
    except Exception as e:
        db_hr.rollback()
        raise HTTPException(status_code=400, detail=f"Lỗi khi cập nhật nhân viên trong HR DB: {e}")

    # 2. Đồng bộ Payroll DB (Không làm gián đoạn nếu lỗi)
    if payroll_sync_needed:
        db_employee_payroll = db_payroll.query(EmployeePayroll).filter(EmployeePayroll.EmployeeID == employee_id).first()
        if db_employee_payroll:
            try:
                for key in ["DepartmentID", "PositionID", "Status", "FullName"]:
                    if key in update_data:
                        setattr(db_employee_payroll, key, update_data[key])
                db_payroll.add(db_employee_payroll)
                db_payroll.commit()
            except Exception as e:
                db_payroll.rollback()
                print(f"CẢNH BÁO: Lỗi đồng bộ cập nhật sang Payroll DB: {e}. Dữ liệu HR đã được cập nhật.")

    # 3. Đồng bộ Auth DB (Không làm gián đoạn nếu lỗi)
    auth_user = db_auth.query(AuthUser).filter(AuthUser.employee_id_link == employee_id).first()
    if auth_user:
        try:
            # Cập nhật các trường có thể thay đổi
            if 'FullName' in update_data:
                auth_user.full_name = update_data['FullName']
            if 'PhoneNumber' in update_data:
                auth_user.phone_number = update_data['PhoneNumber']

            # Cập nhật vai trò nếu phòng ban/chức vụ thay đổi
            if "DepartmentID" in update_data or "PositionID" in update_data:
                # db_employee_hr đã được refresh sau khi commit HR
                auth_user.role = get_role_from_hr(db_employee_hr)

            db_auth.add(auth_user)
            db_auth.commit()
        except Exception as e:
            db_auth.rollback()
            print(f"CẢNH BÁO: Lỗi đồng bộ cập nhật sang Auth DB: {e}.")

    return db_employee_hr

def delete_employee_synced(db_hr: Session, db_payroll: Session, db_auth: Session, employee_id: int):
    """Xóa nhân viên ở cả 3 CSDL, có kiểm tra ràng buộc dữ liệu."""

    # 1. Kiểm tra ràng buộc dữ liệu quan trọng
    has_dividends = db_hr.query(Dividend).filter(Dividend.EmployeeID == employee_id).first()
    has_salaries = db_payroll.query(Salary).filter(Salary.EmployeeID == employee_id).first()
    if has_dividends or has_salaries:
        # Nếu có lương hoặc cổ tức, không cho phép xóa
        return False

    # 2. Xóa khỏi CSDL Auth (Nếu lỗi sẽ dừng)
    auth_user = db_auth.query(AuthUser).filter(AuthUser.employee_id_link == employee_id).first()
    if auth_user:
        try:
            db_auth.delete(auth_user)
            db_auth.commit()
        except Exception as e:
            db_auth.rollback()
            raise HTTPException(status_code=500, detail=f"Lỗi khi xóa nhân viên từ Auth DB: {e}")

    # 3. Xóa khỏi CSDL Payroll (Xóa dữ liệu phụ thuộc trước)
    try:
        # Xóa các bản ghi chấm công liên quan
        db_payroll.query(Attendance).filter(Attendance.EmployeeID == employee_id).delete(synchronize_session=False)
        # Xóa bản ghi nhân viên
        db_payroll.query(EmployeePayroll).filter(EmployeePayroll.EmployeeID == employee_id).delete(synchronize_session=False)
        db_payroll.commit()
    except Exception as e:
        db_payroll.rollback()
        raise HTTPException(status_code=500, detail=f"Lỗi khi xóa nhân viên từ Payroll DB: {e}")

    # 4. Xóa khỏi CSDL HR (Xóa cuối cùng)
    db_employee_hr = get_employee_by_id(db_hr, employee_id)
    if db_employee_hr:
        try:
            db_hr.delete(db_employee_hr)
            db_hr.commit()
        except Exception as e:
            db_hr.rollback()
            # Nếu đến bước này mà lỗi (ví dụ do ràng buộc khóa ngoại chưa xử lý),
            # Giao dịch Auth và Payroll vẫn thành công, nhưng cần báo lỗi
            raise HTTPException(status_code=500, detail=f"Lỗi khi xóa nhân viên từ HR DB: {e}")

    return True
    ///////////////
    # backend/crud/crud_hr.py
from fastapi import HTTPException
from sqlalchemy.orm import Session
from models import DepartmentHR, PositionHR, EmployeeHR, DepartmentPayroll, PositionPayroll
import schemas

# --- Logic CRUD cho Department ---
def get_departments(db_hr: Session):
    try:
        query = db_hr.query(DepartmentHR).order_by(DepartmentHR.DepartmentID)
        # SỬA: Duyệt qua kết quả để tránh lỗi SQLGetData/Sequence Error
        results = list(query.all()) 
        return results
    except Exception as e:
        print(f"Lỗi khi lấy danh sách phòng ban: {e}")
        # Trả về lỗi thay vì list rỗng để frontend biết
        raise HTTPException(status_code=500, detail=f"Lỗi khi truy vấn phòng ban: {e}")

def create_department_synced(db_hr: Session, db_payroll: Session, dept: schemas.DepartmentCreate):
    db_dept_hr = DepartmentHR(DepartmentName=dept.DepartmentName)
    db_hr.add(db_dept_hr)
    try:
        db_hr.commit(); db_hr.refresh(db_dept_hr)
    except Exception as e:
        db_hr.rollback(); raise HTTPException(status_code=400, detail=f"Lỗi khi tạo phòng ban trong HR DB: {e}")
    
    db_dept_payroll = DepartmentPayroll(DepartmentID=db_dept_hr.DepartmentID, DepartmentName=db_dept_hr.DepartmentName)
    db_payroll.add(db_dept_payroll)
    try:
        db_payroll.commit()
    except Exception as e:
        db_payroll.rollback(); db_hr.delete(db_dept_hr); db_hr.commit()
        raise HTTPException(status_code=500, detail=f"Lỗi đồng bộ phòng ban sang Payroll DB: {e}")
    return db_dept_hr

def update_department_synced(db_hr: Session, db_payroll: Session, dept_id: int, dept_update: schemas.DepartmentUpdate):
    db_dept_hr = db_hr.get(DepartmentHR, dept_id)
    if not db_dept_hr: return None

    update_data = dept_update.dict(exclude_unset=True)
    for key, value in update_data.items(): setattr(db_dept_hr, key, value)
    
    db_hr.add(db_dept_hr)
    try:
        db_hr.commit(); db_hr.refresh(db_dept_hr)
    except Exception as e:
        db_hr.rollback(); raise HTTPException(status_code=400, detail=f"Lỗi khi cập nhật phòng ban HR DB: {e}")

    db_dept_payroll = db_payroll.get(DepartmentPayroll, dept_id)
    if db_dept_payroll and 'DepartmentName' in update_data:
        db_dept_payroll.DepartmentName = update_data['DepartmentName']
        db_payroll.add(db_dept_payroll)
        try:
            db_payroll.commit()
        except Exception as e:
            db_payroll.rollback(); print(f"CẢNH BÁO: Lỗi đồng bộ cập nhật phòng ban sang Payroll: {e}")
    return db_dept_hr

def delete_department(db_hr: Session, db_payroll: Session, dept_id: int):
    if db_hr.query(EmployeeHR).filter(EmployeeHR.DepartmentID == dept_id).first(): return False
    
    payroll_dept = db_payroll.get(DepartmentPayroll, dept_id)
    if payroll_dept:
        db_payroll.delete(payroll_dept)
        try: db_payroll.commit()
        except Exception as e: db_payroll.rollback(); raise HTTPException(status_code=500, detail=f"Lỗi xóa phòng ban từ Payroll DB: {e}")
    
    db_dept_hr = db_hr.get(DepartmentHR, dept_id)
    if db_dept_hr:
        db_hr.delete(db_dept_hr)
        try: db_hr.commit()
        except Exception as e: db_hr.rollback(); raise HTTPException(status_code=500, detail=f"Lỗi xóa phòng ban từ HR DB: {e}")
    return True

# --- Logic CRUD cho Position ---
# --- ĐẢM BẢO HÀM NÀY ĐÚNG NHƯ SAU ---
def get_positions(db_hr: Session):
    try:
        query = db_hr.query(PositionHR).order_by(PositionHR.PositionID)
        # SỬA: Duyệt qua kết quả để tránh lỗi
        results = list(query.all())
        return results
    except Exception as e:
        print(f"Lỗi khi lấy danh sách chức vụ: {e}")
        # Quan trọng: Ném lỗi ra để FastAPI xử lý và trả về 500
        raise HTTPException(status_code=500, detail=f"Lỗi khi truy vấn chức vụ: {e}")
# --- KẾT THÚC KIỂM TRA ---

def create_position_synced(db_hr: Session, db_payroll: Session, pos: schemas.PositionCreate):
    db_pos_hr = PositionHR(PositionName=pos.PositionName)
    db_hr.add(db_pos_hr)
    try:
        db_hr.commit(); db_hr.refresh(db_pos_hr)
    except Exception as e:
        db_hr.rollback(); raise HTTPException(status_code=400, detail=f"Lỗi khi tạo chức vụ trong HR DB: {e}")
    
    db_pos_payroll = PositionPayroll(PositionID=db_pos_hr.PositionID, PositionName=db_pos_hr.PositionName)
    db_payroll.add(db_pos_payroll)
    try:
        db_payroll.commit()
    except Exception as e:
        db_payroll.rollback(); db_hr.delete(db_pos_hr); db_hr.commit()
        raise HTTPException(status_code=500, detail=f"Lỗi đồng bộ chức vụ sang Payroll DB: {e}")
    return db_pos_hr

def update_position_synced(db_hr: Session, db_payroll: Session, pos_id: int, pos_update: schemas.PositionUpdate):
    db_pos_hr = db_hr.get(PositionHR, pos_id)
    if not db_pos_hr: return None

    update_data = pos_update.dict(exclude_unset=True)
    for key, value in update_data.items(): setattr(db_pos_hr, key, value)
    
    db_hr.add(db_pos_hr)
    try:
        db_hr.commit(); db_hr.refresh(db_pos_hr)
    except Exception as e:
        db_hr.rollback(); raise HTTPException(status_code=400, detail=f"Lỗi khi cập nhật chức vụ HR DB: {e}")

    db_pos_payroll = db_payroll.get(PositionPayroll, pos_id)
    if db_pos_payroll and 'PositionName' in update_data:
        db_pos_payroll.PositionName = update_data['PositionName']
        db_payroll.add(db_pos_payroll)
        try:
            db_payroll.commit()
        except Exception as e:
            db_payroll.rollback(); print(f"CẢNH BÁO: Lỗi đồng bộ cập nhật chức vụ sang Payroll: {e}")
    return db_pos_hr

def delete_position(db_hr: Session, db_payroll: Session, pos_id: int):
    if db_hr.query(EmployeeHR).filter(EmployeeHR.PositionID == pos_id).first(): return False
    
    payroll_pos = db_payroll.get(PositionPayroll, pos_id)
    if payroll_pos:
        db_payroll.delete(payroll_pos)
        try: db_payroll.commit()
        except Exception as e: db_payroll.rollback(); raise HTTPException(status_code=500, detail=f"Lỗi xóa chức vụ từ Payroll DB: {e}")
        
    db_pos_hr = db_hr.get(PositionHR, pos_id)
    if db_pos_hr:
        db_hr.delete(db_pos_hr)
        try: db_hr.commit()
        except Exception as e: db_hr.rollback(); raise HTTPException(status_code=500, detail=f"Lỗi xóa chức vụ từ HR DB: {e}")
    return True
    /////////////////
    # backend/crud/crud_notification.py
from sqlalchemy.orm import Session
from sqlalchemy import desc, or_
from models import Notification, User as AuthUser
import schemas
from datetime import datetime, timedelta

def create_notification(db_auth: Session, notification: schemas.NotificationCreate):
    """Tạo một thông báo mới trong CSDL Auth."""
    db_notification = Notification(**notification.dict())
    db_auth.add(db_notification)
    db_auth.commit()
    db_auth.refresh(db_notification)
    return db_notification

def get_notifications_for_user(db_auth: Session, current_user: schemas.User, skip: int = 0, limit: int = 20, include_read: bool = False):
    """
    Lấy thông báo cho người dùng hiện tại dựa trên ID và vai trò của họ.
    Sắp xếp theo thời gian mới nhất trước.
    """
    query = db_auth.query(Notification).filter(
        or_(
            Notification.user_id == current_user.id,             # Gửi trực tiếp cho user này
            Notification.role_target == current_user.role        # Gửi cho vai trò của user này
            # Cân nhắc: Có nên thêm Notification.role_target == None không? (Thông báo toàn hệ thống)
        )
    )

    if not include_read:
        query = query.filter(Notification.is_read == False)

    # Lấy thông báo mới nhất trước
    return query.order_by(desc(Notification.created_at)).offset(skip).limit(limit).all()

def mark_notification_as_read(db_auth: Session, notification_id: int, current_user: schemas.User):
    """Đánh dấu một thông báo là đã đọc, kiểm tra quyền truy cập."""
    db_notification = db_auth.query(Notification).filter(Notification.id == notification_id).first()

    if not db_notification:
        return None # Không tìm thấy

    # Kiểm tra xem user có quyền đọc thông báo này không
    can_read = (
        db_notification.user_id == current_user.id or
        db_notification.role_target == current_user.role
    )

    if not can_read:
         return "Forbidden" # User không có quyền

    if not db_notification.is_read:
        db_notification.is_read = True
        db_auth.add(db_notification)
        db_auth.commit()
        db_auth.refresh(db_notification)

    return db_notification

def mark_all_notifications_as_read(db_auth: Session, current_user: schemas.User):
    """Đánh dấu tất cả thông báo chưa đọc của user là đã đọc."""
    notifications_to_mark = db_auth.query(Notification).filter(
        or_(
            Notification.user_id == current_user.id,
            Notification.role_target == current_user.role
        ),
        Notification.is_read == False
    ).all()

    updated_count = 0
    for notification in notifications_to_mark:
        notification.is_read = True
        db_auth.add(notification)
        updated_count +=1

    if updated_count > 0:
        db_auth.commit()

    return {"marked_read_count": updated_count}

def get_unread_notification_count(db_auth: Session, current_user: schemas.User) -> int:
    """Đếm số lượng thông báo chưa đọc cho user hiện tại."""
    count = db_auth.query(Notification).filter(
        or_(
            Notification.user_id == current_user.id,
            Notification.role_target == current_user.role
        ),
        Notification.is_read == False
    ).count()
    return count
    ////////////////
    from sqlalchemy.orm import Session
from models import Salary, Attendance, EmployeePayroll
import schemas
from datetime import date
from decimal import Decimal # Import Decimal

def get_salary_history(db_payroll: Session, employee_id: int):
    # Lấy lịch sử lương
    return db_payroll.query(Salary).filter(Salary.EmployeeID == employee_id).order_by(Salary.SalaryMonth.desc()).all()

def get_attendance_data(db_payroll: Session, employee_id: int):
    # Lấy dữ liệu chấm công
    return db_payroll.query(Attendance).filter(
        (Attendance.EmployeeID == employee_id)
    ).order_by(Attendance.AttendanceMonth.desc()).all()

# --- HÀM MỚI ---
def update_salary(db_payroll: Session, salary_id: int, salary_update: schemas.SalaryUpdate) -> Salary:
    """
    Cập nhật thông tin một bản ghi lương (ví dụ: Bonus, Deductions)
    """
    db_salary = db_payroll.get(Salary, salary_id)
    if not db_salary:
        return None

    update_data = salary_update.dict(exclude_unset=True)

    # Cập nhật các trường được cung cấp
    for key, value in update_data.items():
        setattr(db_salary, key, value)

    # Tự động tính toán lại NetSalary nếu các thành phần của nó thay đổi
    if 'BaseSalary' in update_data or 'Bonus' in update_data or 'Deductions' in update_data:
        base = db_salary.BaseSalary if db_salary.BaseSalary is not None else Decimal(0)
        bonus = db_salary.Bonus if db_salary.Bonus is not None else Decimal(0)
        deductions = db_salary.Deductions if db_salary.Deductions is not None else Decimal(0)
        db_salary.NetSalary = base + bonus - deductions

    db_payroll.add(db_salary)
    try:
        db_payroll.commit()
        db_payroll.refresh(db_salary)
    except Exception as e:
        db_payroll.rollback()
        raise e # Ném lỗi ra để endpoint xử lý và trả về cho client
        
    return db_salary
    /////////////////
    # backend/crud/crud_user.py
from sqlalchemy.orm import Session
from sqlalchemy import or_
from models import User
import schemas
from core.security import get_password_hash
from typing import Optional # Make sure Optional is imported

def get_user_by_email(db_auth: Session, email: str):
    return db_auth.query(User).filter(User.email == email).first()

def get_user_by_id(db_auth: Session, user_id: int):
    return db_auth.query(User).filter(User.id == user_id).first()

# --- HÀM ĐÃ SỬA ---
def get_users(
    db_auth: Session,
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    role: Optional[str] = None # <-- Đảm bảo tham số 'role' ở đây
):
    query = db_auth.query(User)

    # Filter by search term
    if search:
        search_term_like = f"%{search}%"
        query = query.filter(
            or_(
                User.full_name.ilike(search_term_like),
                User.email.ilike(search_term_like)
            )
        )

    # Filter by role
    if role: # <-- Đảm bảo logic lọc ở đây
        query = query.filter(User.role == role)

    # Apply ordering, skip, and limit before fetching
    return query.order_by(User.id).offset(skip).limit(limit).all()
# --- KẾT THÚC HÀM SỬA ---

def create_user(db_auth: Session, user: schemas.UserCreate):
    # Ensure password hashing/storing logic is consistent (using plain text now)
    hashed_password = get_password_hash(user.password) # This should just return the plain password
    db_user = User(
        full_name=user.full_name,
        email=user.email,
        hashed_password=hashed_password, # Storing plain text password
        role=user.role,
        phone_number=user.phone_number,
        employee_id_link=user.employee_id_link
    )
    db_auth.add(db_user)
    db_auth.commit()
    db_auth.refresh(db_user)
    return db_user

def update_user_role(db_auth: Session, user_id: int, new_role: str):
    db_user = get_user_by_id(db_auth, user_id)
    if not db_user:
        return None
    db_user.role = new_role
    db_auth.add(db_user)
    db_auth.commit()
    db_auth.refresh(db_user)
    return db_user

def update_user_password(db_auth: Session, user_id: int, new_password: str):
    db_user = get_user_by_id(db_auth, user_id)
    if not db_user:
        return None

    # Ensure password hashing/storing logic is consistent
    db_user.hashed_password = get_password_hash(new_password) # Should return plain password
    db_auth.add(db_user)
    db_auth.commit()
    db_auth.refresh(db_user)
    return db_user
    ///////////////
    # backend/services/alert_service.py
from sqlalchemy.orm import Session
from sqlalchemy import extract, func, and_
from datetime import date
from models import EmployeeHR, Attendance, Salary
# --- THÊM IMPORTS ---
from database import SessionLocalAuth # Cần session để ghi vào Auth DB
from crud import crud_notification    # Cần CRUD để tạo notification
import schemas                        # Cần schema NotificationCreate
# --- KẾT THÚC THÊM ---
import smtplib # Thư viện gửi email (ví dụ)
from email.mime.text import MIMEText # Thư viện gửi email (ví dụ)

# --- THÊM HÀM HELPER ---
def _create_alert_notification(type: str, message: str, role_target: str = None, user_id: int = None, related_employee_id: int = None):
    """Hàm nội bộ để tạo thông báo trong Auth DB, xử lý session."""
    db_auth = SessionLocalAuth()
    try:
        notification_in = schemas.NotificationCreate(
            message=message,
            type=type,
            role_target=role_target,
            user_id=user_id,
            related_employee_id=related_employee_id
        )
        crud_notification.create_notification(db_auth, notification_in)
        print(f"NOTIFICATION CREATED: [{type}] {message} (Target: {role_target or user_id})") # Log ra console
    except Exception as e:
        print(f"!!! ERROR: Failed to create DB notification: {e}")
    finally:
        db_auth.close()
# --- KẾT THÚC HÀM HELPER ---


def check_work_anniversaries(db_hr: Session):
    """Kiểm tra kỷ niệm và tạo thông báo."""
    today = date.today()
    anniversary_years = [1, 3, 5, 10, 15, 20]

    employees = db_hr.query(EmployeeHR).filter(
        extract('month', EmployeeHR.HireDate) == today.month,
        extract('day', EmployeeHR.HireDate) == today.day
    ).all()

    for emp in employees:
        years_worked = today.year - emp.HireDate.year
        if years_worked in anniversary_years:
            message = f"Nhân viên {emp.FullName} (ID: {emp.EmployeeID}) kỷ niệm {years_worked} năm làm việc hôm nay!"
            # Tạo thông báo cho HR Manager và Admin
            _create_alert_notification(type="anniversary", message=message, role_target="HR Manager", related_employee_id=emp.EmployeeID)
            _create_alert_notification(type="anniversary", message=message, role_target="Admin", related_employee_id=emp.EmployeeID)

def check_excessive_leave(db_payroll: Session):
    """Kiểm tra nghỉ phép quá hạn và tạo thông báo."""
    MAX_LEAVE_DAYS = 12
    current_year = date.today().year

    excessive_leave_users = db_payroll.query(
        Attendance.EmployeeID,
        func.sum(Attendance.LeaveDays).label("total_leave")
    ).filter(
        extract('year', Attendance.AttendanceMonth) == current_year
    ).group_by(Attendance.EmployeeID).having(
        func.sum(Attendance.LeaveDays) > MAX_LEAVE_DAYS
    ).all()

    for emp_id, leave_days in excessive_leave_users:
        message = f"Nhân viên ID {emp_id} đã sử dụng {leave_days} ngày nghỉ phép năm {current_year} (vượt ngưỡng {MAX_LEAVE_DAYS})."
        # Tạo thông báo cho HR Manager và Admin
        _create_alert_notification(type="leave_warning", message=message, role_target="HR Manager", related_employee_id=emp_id)
        _create_alert_notification(type="leave_warning", message=message, role_target="Admin", related_employee_id=emp_id)

def check_payroll_discrepancies(db_payroll: Session):
    """Kiểm tra chênh lệch lương và tạo thông báo."""
    latest_salary_date = db_payroll.query(func.max(Salary.SalaryMonth)).scalar()
    if not latest_salary_date: 
        print("ALERT_SERVICE: Không có dữ liệu lương (Salary) để so sánh chênh lệch.")
        return

    previous_salary_date = db_payroll.query(func.max(Salary.SalaryMonth))\
        .filter(Salary.SalaryMonth < latest_salary_date)\
        .scalar()
    if not previous_salary_date: 
        print(f"ALERT_SERVICE: Chỉ có 1 tháng dữ liệu lương ({latest_salary_date}), không thể so sánh chênh lệch.")
        return

    total_latest = db_payroll.query(func.sum(Salary.NetSalary))\
        .filter(Salary.SalaryMonth == latest_salary_date).scalar() or 0
    total_previous = db_payroll.query(func.sum(Salary.NetSalary))\
        .filter(Salary.SalaryMonth == previous_salary_date).scalar() or 0

    message = None
    if total_previous == 0 and total_latest > 0:
        message = f"Tổng lương tháng {latest_salary_date} là {total_latest:,.0f} VNĐ (tháng trước là 0)."
    elif total_previous > 0:
        try:
            percentage_diff = ((float(total_latest) - float(total_previous)) / float(total_previous)) * 100
            THRESHOLD = 20.0
            if abs(percentage_diff) > THRESHOLD:
                trend = "tăng" if percentage_diff > 0 else "giảm"
                message = f"Chênh lệch lương lớn ({trend} {abs(percentage_diff):.1f}%)! Tháng {previous_salary_date}: {total_previous:,.0f} VNĐ -> Tháng {latest_salary_date}: {total_latest:,.0f} VNĐ."
        except ZeroDivisionError: pass

    if message:
        # Tạo thông báo cho Payroll Manager và Admin
        _create_alert_notification(type="payroll_discrepancy", message=message, role_target="Payroll Manager")
        _create_alert_notification(type="payroll_discrepancy", message=message, role_target="Admin")
    else:
        # Ghi log nếu không có chênh lệch đáng kể
        print(f"ALERT_SERVICE: Payroll discrepancy check OK between {previous_salary_date} and {latest_salary_date}.")


def send_monthly_payroll_emails(db_hr: Session, db_payroll: Session):
    """Gửi email lương hàng tháng (Giả lập). Không tạo thông báo trong CSDL."""
    # Lấy danh sách nhân viên active (giả sử 'Đang làm việc' là status active)
    active_employees = db_hr.query(EmployeeHR.EmployeeID, EmployeeHR.Email, EmployeeHR.FullName)\
        .filter(EmployeeHR.Status.ilike('Đang làm việc') | EmployeeHR.Status.ilike('Active'))\
        .all()
        
    # Lấy tháng lương gần nhất (giả định)
    latest_salary_date = db_payroll.query(func.max(Salary.SalaryMonth)).scalar()
    if not latest_salary_date:
        print("ALERT_SERVICE: Không có dữ liệu lương (Salary) để gửi email.")
        return
        
    print(f"SERVICE: Đang chuẩn bị gửi email lương tháng {latest_salary_date} cho {len(active_employees)} nhân viên...")
    
    # Vòng lặp gửi email (giả lập)
    for emp_id, email, full_name in active_employees:
        # Lấy lương của nhân viên này
        salary_record = db_payroll.query(Salary)\
            .filter(Salary.EmployeeID == emp_id, Salary.SalaryMonth == latest_salary_date)\
            .first()

        if salary_record:
            # (Logic giả lập gửi email giữ nguyên)
            print(f"  -> (Giả lập) Gửi email cho {email} (Lương: {salary_record.NetSalary})")
        else:
            print(f"  -> Bỏ qua {email} (Không tìm thấy bản ghi lương tháng {latest_salary_date})")
            
    print("SERVICE: Gửi email lương hàng tháng hoàn tất.")
    /////////////////
    # Cấu hình HUMAN_2025 (SQL Server)
# Đang sử dụng Windows Authentication
SQL_SERVER_DRIVER=ODBC Driver 17 for SQL Server
SQL_SERVER_SERVER=(LocalDB)\MSSQLLocalDB
SQL_SERVER_DATABASE=HUMAN_2025
SQL_SERVER_USER=
SQL_SERVER_PASSWORD=

# Cấu hình PAYROLL (MySQL)
MYSQL_HOST=localhost
MYSQL_DATABASE=payroll
MYSQL_USER=root
MYSQL_PASSWORD=031124

# Bảo mật JWT
SECRET_KEY=b3a9f8c1d7e0a5b2f6c8d1e3a9b7f2d5e8c1a0b3f6d8e2a4c7b1f9d0e5a2c6b8
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60

# CSDL mới cho Dashboard (Quản lý User & Phân quyền)
DASHBOARD_DB_URL="sqlite:///./dashboard_auth.db"
////////////////
# backend/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, scoped_session
from core.config import settings

# --- Thiết lập 3 Engines và 3 Bases ---

# 1. SQL Server (HUMAN_2025)
engine_sqlserver = create_engine(
    settings.SQLALCHEMY_DATABASE_URI_SQLSERVER,
    # --- THÊM CẤU HÌNH POOL ---
    pool_size=10,         # Tăng số kết nối cơ bản
    max_overflow=20,      # Tăng số kết nối dự phòng
    pool_timeout=30,      # Giữ nguyên timeout chờ kết nối
    # pool_recycle=1800   # Có thể thêm nếu SQL Server của bạn đóng kết nối nhàn rỗi
    # --------------------------
)
SessionLocalSQLServer = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=engine_sqlserver))
BaseSQLServer = declarative_base()

# 2. MySQL (PAYROLL)
engine_mysql = create_engine(
    settings.SQLALCHEMY_DATABASE_URI_MYSQL,
    # --- THÊM CẤU HÌNH POOL ---
    pool_size=10,
    max_overflow=20,
    pool_timeout=30,
    pool_recycle=3600    # Rất nên có cho MySQL để tránh lỗi connection closed
    # --------------------------
)
SessionLocalMySQL = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=engine_mysql))
BaseMySQL = declarative_base()

# 3. SQLite (DASHBOARD AUTH)
engine_auth = create_engine(
    settings.DASHBOARD_DB_URL,
    connect_args={"check_same_thread": False}, # Bắt buộc cho SQLite
    # --- THÊM CẤU HÌNH POOL CHO SQLITE ---
    # SQLite thường không cần pool phức tạp, nhưng QueuePool là mặc định
    # Tăng giới hạn nếu cần, nhưng vấn đề SQLite thường là ghi đồng thời
    pool_size=10,         # Tăng nhẹ
    max_overflow=20       # Tăng nhẹ
    # pool_timeout=30     # Mặc định thường là đủ
    # ------------------------------------
)
SessionLocalAuth = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=engine_auth))
BaseAuth = declarative_base()


# --- Dependencies cho 3 CSDL (Giữ nguyên) ---
def get_db_sqlserver():
    db = SessionLocalSQLServer()
    try:
        yield db
    finally:
        SessionLocalSQLServer.remove()

def get_db_mysql():
    db = SessionLocalMySQL()
    try:
        yield db
    finally:
        SessionLocalMySQL.remove()

def get_db_auth():
    db = SessionLocalAuth()
    try:
        yield db
    finally:
        SessionLocalAuth.remove()
        ////////////////
        # backend/main.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from apscheduler.schedulers.background import BackgroundScheduler
from contextlib import asynccontextmanager
import atexit
# --- THÊM IMPORT NÀY ---
from sqlalchemy.orm import joinedload 
# --- KẾT THÚC THÊM ---

from api.v1.api import api_router
from database import SessionLocalSQLServer, SessionLocalMySQL, SessionLocalAuth, engine_auth, BaseAuth
from services.alert_service import (
    check_work_anniversaries,
    check_excessive_leave,
    send_monthly_payroll_emails,
    check_payroll_discrepancies
)
# Sửa import: Lấy EmployeeHR trực tiếp từ models
from models import User as AuthUser, EmployeeHR
from crud import crud_user 
import schemas 
from core.security import get_password_hash 
from auth.auth import get_user_role as get_role_from_hr


def run_alert_jobs():
    """Các hàm chạy dịch vụ cảnh báo (chạy hàng ngày)"""
    
    print("Scheduler running daily jobs...")
    db_hr = SessionLocalSQLServer()
    db_payroll = SessionLocalMySQL()
    try:
        check_work_anniversaries(db_hr)
        check_excessive_leave(db_payroll)
        check_payroll_discrepancies(db_payroll)
    except Exception as e:
        print(f"Lỗi khi chạy các job hàng ngày: {e}")
    finally:
        if db_hr: db_hr.close()
        if db_payroll: db_payroll.close()


def run_monthly_email_job():
    """Hàm wrapper để chạy job gửi email lương hàng tháng"""
 
    print("Scheduler running monthly email job...")
    db_hr = SessionLocalSQLServer()
    db_payroll = SessionLocalMySQL()
    try:
        send_monthly_payroll_emails(db_hr, db_payroll)
    except Exception as e:
        print(f"Lỗi khi chạy job email hàng tháng: {e}")
    finally:
        if db_hr: db_hr.close()
        if db_payroll: db_payroll.close()


def initial_sync_and_setup():
    """
    Hàm này chạy một lần khi server khởi động:
    1. Tạo CSDL auth nếu chưa có.
    2. Tạo/Kiểm tra tài khoản ADMIN mặc định.
    3. Tạo/Kiểm tra tài khoản ADMIN mặc định.
    4. Đồng bộ nhân viên từ HR_DB sang Auth_DB.
    """
    print("--- BẮT ĐẦU KHỞI TẠO VÀ ĐỒNG BỘ ---")
    db_auth = SessionLocalAuth()
    db_hr = SessionLocalSQLServer()
    try:
        # 1. Tạo bảng trong CSDL Auth
        print("1. Đang kiểm tra và tạo bảng 'users' trong dashboard_auth.db...")
        BaseAuth.metadata.create_all(bind=engine_auth)

        # 2. Tạo/Kiểm tra tài khoản DEV (BỎ QUA)
        print("2. (Đã bỏ qua) Tạo tài khoản DEV...")
        
        # --- TẠO/KIỂM TRA TÀI KHOẢN ADMIN ---
        print("3. Đang kiểm tra và tạo tài khoản ADMIN...")
        admin_email = "admin@company.vn"
        admin_user = crud_user.get_user_by_email(db_auth, email=admin_email)
        if not admin_user:
            admin_schema = schemas.UserCreate(
                full_name="Admin Dashboard",
                email=admin_email,
                password="adminpassword123", # Mật khẩu gốc sẽ được băm
                role="Admin",
                phone_number="0000000000" 
            )
            crud_user.create_user(db_auth, admin_schema)
            print("   -> Đã tạo tài khoản ADMIN thành công.")
        else:
            print("   -> Tài khoản ADMIN đã tồn tại.")
        # --- KẾT THÚC ---

        # 4. Đồng bộ nhân viên từ HR sang Auth
        print("4. Bắt đầu đồng bộ nhân viên từ HUMAN_2025 sang Auth DB...")
        hr_employees_query = db_hr.query(EmployeeHR).options(
             joinedload(EmployeeHR.department), # Eager load 
             joinedload(EmployeeHR.position)   # Eager load 
        )
        try:
             hr_employees = list(hr_employees_query.all()) 
        except Exception as e_hr:
             print(f"!!! LỖI khi lấy danh sách nhân viên từ HR DB: {e_hr}")
             hr_employees = [] 
        
        synced_count = 0
        for emp in hr_employees:
            if not emp.Email:
                continue

            auth_user = crud_user.get_user_by_email(db_auth, email=emp.Email)
            if not auth_user:
                role = get_role_from_hr(emp) 
                user_schema = schemas.UserCreate(
                    full_name=emp.FullName,
                    email=emp.Email,
                    password="password123", 
                    role=role,
                    phone_number=emp.PhoneNumber,
                    employee_id_link=emp.EmployeeID
                )
                try:
                    crud_user.create_user(db_auth, user_schema)
                    synced_count += 1
                except Exception as e_sync:
                    print(f"   -> LỖI đồng bộ user {emp.Email}: {e_sync}")


        print(f"   -> Đồng bộ hoàn tất. Đã thêm {synced_count} nhân viên mới vào Auth DB.")

    except Exception as e:
        print(f"!!! LỖI TRONG QUÁ TRÌNH KHỞI TẠO CHUNG: {e}")
    finally:
        if db_auth: db_auth.close()
        if db_hr: db_hr.close()
    print("--- KẾT THÚC KHỞI TẠO VÀ ĐỒNG BỘ ---\n")


# Khởi tạo scheduler
scheduler = BackgroundScheduler()

@asynccontextmanager
async def lifespan(app: FastAPI):
    initial_sync_and_setup()

    scheduler.add_job(run_alert_jobs, 'interval', days=1, id="daily_check")
    scheduler.add_job(run_monthly_email_job, 'cron', day=1, hour=9, id="monthly_payroll")
    scheduler.start()
    print("Scheduler started...")
    yield
    scheduler.shutdown()
    print("Scheduler stopped.")

app = FastAPI(
    title="HRM & Payroll Integrated Dashboard API",
    description="API tích hợp HUMAN_2025 (SQL Server) và PAYROLL (MySQL)",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(api_router, prefix="/api/v1")

@app.get("/")
def read_root():
    return {"message": "Welcome to the Integrated Dashboard API"}

atexit.register(lambda: scheduler.shutdown(wait=False))
///////////
# backend/models.py
from sqlalchemy import Column, Integer, String, Date, DateTime, DECIMAL, ForeignKey, NVARCHAR, Boolean
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func # Thêm func
from database import BaseSQLServer, BaseMySQL, BaseAuth

# --- Models cho HUMAN_2025 (SQL Server) ---

class DepartmentHR(BaseSQLServer):
    __tablename__ = 'Departments'
    DepartmentID = Column(Integer, primary_key=True, index=True)
    DepartmentName = Column(NVARCHAR(100), nullable=False)
    employees = relationship("EmployeeHR", back_populates="department")

class PositionHR(BaseSQLServer):
    __tablename__ = 'Positions'
    PositionID = Column(Integer, primary_key=True, index=True)
    PositionName = Column(NVARCHAR(100), nullable=False)
    employees = relationship("EmployeeHR", back_populates="position")

class EmployeeHR(BaseSQLServer):
    __tablename__ = 'Employees'
    EmployeeID = Column(Integer, primary_key=True, index=True)
    FullName = Column(NVARCHAR(100), nullable=False)
    DateOfBirth = Column(Date, nullable=False)
    Gender = Column(NVARCHAR(10))
    PhoneNumber = Column(NVARCHAR(15))
    Email = Column(NVARCHAR(100), unique=True)
    HireDate = Column(Date, nullable=False)
    DepartmentID = Column(Integer, ForeignKey('Departments.DepartmentID'))
    PositionID = Column(Integer, ForeignKey('Positions.PositionID'))
    Status = Column(NVARCHAR(50))

    department = relationship("DepartmentHR", back_populates="employees")
    position = relationship("PositionHR", back_populates="employees")
    
    dividends = relationship("Dividend", back_populates="employee")

class Dividend(BaseSQLServer):
    __tablename__ = 'Dividends'
    DividendID = Column(Integer, primary_key=True, index=True)
    EmployeeID = Column(Integer, ForeignKey('Employees.EmployeeID'))
    DividendAmount = Column(DECIMAL(12, 2), nullable=False)
    DividendDate = Column(Date, nullable=False)

    employee = relationship("EmployeeHR", back_populates="dividends")


# --- Models cho PAYROLL (MySQL) ---

class EmployeePayroll(BaseMySQL):
    __tablename__ = 'employees'
    EmployeeID = Column(Integer, primary_key=True, index=True)
    FullName = Column(String(100), nullable=False)
    DepartmentID = Column(Integer, ForeignKey('departments.DepartmentID'))
    PositionID = Column(Integer, ForeignKey('positions.PositionID'))
    Status = Column(String(50))

    salaries = relationship("Salary", back_populates="employee")
    attendances = relationship("Attendance", back_populates="employee")

class DepartmentPayroll(BaseMySQL):
    __tablename__ = 'departments'
    DepartmentID = Column(Integer, primary_key=True, index=True)
    DepartmentName = Column(String(100), nullable=False)

class PositionPayroll(BaseMySQL):
    __tablename__ = 'positions'
    PositionID = Column(Integer, primary_key=True, index=True)
    PositionName = Column(String(100), nullable=False)

class Salary(BaseMySQL):
    __tablename__ = 'salaries'
    SalaryID = Column(Integer, primary_key=True, index=True)
    EmployeeID = Column(Integer, ForeignKey('employees.EmployeeID'))
    SalaryMonth = Column(Date, nullable=False)
    BaseSalary = Column(DECIMAL(12, 2), nullable=False)
    Bonus = Column(DECIMAL(12, 2), default=0.00)
    Deductions = Column(DECIMAL(12, 2), default=0.00)
    NetSalary = Column(DECIMAL(12, 2), nullable=False)

    employee = relationship("EmployeePayroll", back_populates="salaries")

class Attendance(BaseMySQL):
    __tablename__ = 'attendance'
    AttendanceID = Column(Integer, primary_key=True, index=True)
    EmployeeID = Column(Integer, ForeignKey('employees.EmployeeID'))
    WorkDays = Column(Integer, nullable=False)
    AbsentDays = Column(Integer, default=0)
    LeaveDays = Column(Integer, default=0)
    AttendanceMonth = Column(Date, nullable=False)

    employee = relationship("EmployeePayroll", back_populates="attendances")


# --- Model cho DASHBOARD AUTH (SQLite) ---

class User(BaseAuth):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String(100), unique=True, index=True, nullable=False)
    phone_number = Column(String(15), unique=True, index=True, nullable=True)
    full_name = Column(String(100), nullable=True)
    hashed_password = Column(String(255), nullable=False)
    role = Column(String(50), nullable=False)
    employee_id_link = Column(Integer, unique=True, nullable=True)

# --- THÊM MODEL MỚI CHO THÔNG BÁO ---
class Notification(BaseAuth):
    __tablename__ = 'notifications'
    id = Column(Integer, primary_key=True, index=True)
    # ID của người dùng cụ thể nhận thông báo (NULL nếu là thông báo hệ thống/vai trò)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=True)
    # Vai trò mục tiêu (VD: "Admin", "HR Manager") - NULL nếu cho user_id cụ thể hoặc toàn hệ thống
    role_target = Column(String(50), nullable=True)
    # Nội dung thông báo
    message = Column(String(500), nullable=False)
    # Loại thông báo (để phân loại, VD: "anniversary", "leave_warning", "payroll_discrepancy")
    type = Column(String(50), nullable=False)
    # Trạng thái đã đọc
    is_read = Column(Boolean, default=False, nullable=False)
    # Thời gian tạo
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    # ID của nhân viên liên quan (VD: ID nhân viên có kỷ niệm, ID nhân viên nghỉ quá phép)
    related_employee_id = Column(Integer, nullable=True)

    # (Không bắt buộc) Tạo quan hệ ngược lại với User nếu cần
    # user = relationship("User", back_populates="notifications")
    ///////////////
    # backend/schemas.py
from pydantic import BaseModel, EmailStr, ConfigDict
from typing import Optional, List
from datetime import date, datetime # Thêm datetime
from decimal import Decimal

# --- Schemas chung ---
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    email: Optional[EmailStr] = None
    role: Optional[str] = None
    emp_id: Optional[int] = None

class User(BaseModel):
    id: Optional[int] = None
    email: EmailStr
    role: str
    emp_id: Optional[int] = None

# --- Schemas cho User (CSDL Auth mới) ---
class UserBase(BaseModel):
    email: EmailStr
    full_name: Optional[str] = None
    phone_number: Optional[str] = None
    role: str
    employee_id_link: Optional[int] = None

class UserCreate(UserBase):
    password: str

class UserRoleUpdate(BaseModel):
    role: str

class UserPasswordUpdate(BaseModel):
    new_password: str

class UserInDB(UserBase):
    id: int
    model_config = ConfigDict(from_attributes=True)


# --- Schemas cho HR (HUMAN_2025) ---
class DepartmentBase(BaseModel):
    DepartmentName: str

class DepartmentCreate(DepartmentBase):
    pass

class DepartmentUpdate(BaseModel):
    DepartmentName: Optional[str] = None

class Department(DepartmentBase):
    DepartmentID: int
    model_config = ConfigDict(from_attributes=True)

class PositionBase(BaseModel):
    PositionName: str

class PositionCreate(PositionBase):
    pass

class PositionUpdate(BaseModel):
    PositionName: Optional[str] = None

class Position(PositionBase):
    PositionID: int
    model_config = ConfigDict(from_attributes=True)


# --- Schemas cho Employee ---
class EmployeeBase(BaseModel):
    FullName: str
    Email: EmailStr
    DateOfBirth: date
    HireDate: date
    DepartmentID: int
    PositionID: int
    Status: str
    Gender: Optional[str] = None
    PhoneNumber: Optional[str] = None

class EmployeeCreate(EmployeeBase):
    password: str

class EmployeeUpdate(BaseModel):
    FullName: Optional[str] = None
    DepartmentID: Optional[int] = None
    PositionID: Optional[int] = None
    Status: Optional[str] = None
    PhoneNumber: Optional[str] = None

class Employee(EmployeeBase):
    EmployeeID: int
    department: Optional[Department] = None
    position: Optional[Position] = None
    role: Optional[str] = None
    auth_user_id: Optional[int] = None
    model_config = ConfigDict(from_attributes=True)


# --- Schemas cho Payroll ---
class SalaryBase(BaseModel):
    SalaryMonth: date
    BaseSalary: Decimal
    Bonus: Decimal
    Deductions: Decimal
    NetSalary: Decimal

class Salary(SalaryBase):
    SalaryID: int
    model_config = ConfigDict(from_attributes=True)

class SalaryUpdate(BaseModel):
    BaseSalary: Optional[Decimal] = None
    Bonus: Optional[Decimal] = None
    Deductions: Optional[Decimal] = None

class Attendance(BaseModel):
    AttendanceID: int
    AttendanceMonth: date
    WorkDays: int
    AbsentDays: int
    LeaveDays: int
    model_config = ConfigDict(from_attributes=True)


class EmployeeFullProfile(Employee):
    salaries: List[Salary] = []
    attendances: List[Attendance] = []

# --- THÊM SCHEMAS CHO NOTIFICATION ---
class NotificationBase(BaseModel):
    message: str
    type: str
    is_read: bool = False
    created_at: Optional[datetime] = None # Sẽ được gán tự động
    user_id: Optional[int] = None
    role_target: Optional[str] = None
    related_employee_id: Optional[int] = None

class NotificationCreate(BaseModel): # Dùng để tạo thông báo mới
    message: str
    type: str
    user_id: Optional[int] = None
    role_target: Optional[str] = None
    related_employee_id: Optional[int] = None

class Notification(NotificationBase):
    id: int
    # Kế thừa created_at từ Base và đảm bảo nó không phải Optional khi đọc
    created_at: datetime
    model_config = ConfigDict(from_attributes=True)
    //////////////
    # backend/seed_admin.py
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from database import engine_auth, BaseAuth, SessionLocalAuth
    from models import User
    # Sửa: Bỏ import không dùng đến
    # from core.security import get_password_hash 
except ImportError as e:
    print(f"Lỗi import: {e}")
    sys.exit(1)

ADMIN_FULLNAME = "Admin Dashboard"
ADMIN_EMAIL = "admin@company.vn"
ADMIN_PASSWORD = "adminpassword123" # Plain password
ADMIN_ROLE = "Admin"
ADMIN_PHONE = "0000000000"

def create_admin_user():
    print("Đang tạo bảng 'users' trong dashboard_auth.db (nếu chưa có)...")
    BaseAuth.metadata.create_all(bind=engine_auth)
    print("Tạo bảng hoàn tất.")

    db = SessionLocalAuth()

    try:
        existing_admin = db.query(User).filter(User.email == ADMIN_EMAIL).first()

        if existing_admin:
            print(f"Người dùng với email '{ADMIN_EMAIL}' đã tồn tại. Bỏ qua việc tạo mới.")
            return

        # Sửa: Bỏ hashing
        # hashed_password = get_password_hash(ADMIN_PASSWORD) 

        admin_user = User(
            full_name=ADMIN_FULLNAME,
            email=ADMIN_EMAIL,
            phone_number=ADMIN_PHONE,
            hashed_password=ADMIN_PASSWORD, # Lưu mật khẩu gốc
            role=ADMIN_ROLE,
            employee_id_link=None
        )

        db.add(admin_user)
        db.commit()

        print("\n--- TẠO ADMIN THÀNH CÔNG! (Mật khẩu KHÔNG mã hóa) ---")
        print(f"  CSDL: dashboard_auth.db")
        print(f"  Email: {ADMIN_EMAIL}")
        print(f"  Password: {ADMIN_PASSWORD} (Plain Text)")
        print("---------------------------------")

    except Exception as e:
        db.rollback()
        print(f"Đã xảy ra lỗi: {e}")
    finally:
        # Sửa: Đảm bảo session được đóng đúng cách
        if db: db.close()


if __name__ == "__main__":
    create_admin_user()
    ////////////////
    fastapi
uvicorn[standard]
sqlalchemy
pydantic[email]
python-dotenv
pyodbc
mysql-connector-python
passlib[bcrypt]
python-jose[cryptography]
apscheduler
//////////////
frontend/public/desktop.ini frontend/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div> </body>
</html>
////////////////////
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';

// Biểu đồ lương trung bình
const AvgSalaryChart = ({ data }) => {
  const chartData = Object.keys(data).map(key => ({
    name: key,
    'Lương TB': data[key],
  }));

  return (
    <div style={{ height: 300 }}>
      <h4>Lương trung bình theo Phòng ban</h4>
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={chartData}>
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Bar dataKey="Lương TB" fill="#82ca9d" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default AvgSalaryChart;
//////////////////
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';

// Biểu đồ phân phối nhân viên theo phòng ban
const EmployeeDeptChart = ({ data }) => {
  // Chuyển đổi { "Phòng A": 10, "Phòng B": 20 }
  // thành [ { name: "Phòng A", count: 10 }, { name: "Phòng B", count: 20 } ]
  const chartData = Object.keys(data).map(key => ({
    name: key,
    'Số lượng': data[key],
  }));

  return (
    <div style={{ height: 300 }}>
      <h4>Phân phối Nhân viên theo Phòng ban</h4>
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={chartData}>
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Bar dataKey="Số lượng" fill="#8884d8" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default EmployeeDeptChart;
/////////////////
// frontend/src/components/AddEmployeeModal.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { motion } from 'framer-motion'; // <-- Thêm import

const AddEmployeeModal = ({ isOpen, onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    FullName: '',
    Email: '',
    DateOfBirth: '',
    HireDate: '',
    DepartmentID: '',
    PositionID: '',
    Status: 'Đang làm việc',
    Gender: '',
    PhoneNumber: '',
    password: '',
  });
  const [departments, setDepartments] = useState([]);
  const [positions, setPositions] = useState([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      if (isOpen) {
        setLoading(true);
        setError('');
        try {
          const [deptRes, posRes] = await Promise.all([
            api.get('/departments/'),
            api.get('/positions/')
          ]);
          setDepartments(deptRes.data);
          setPositions(posRes.data);
          if (deptRes.data.length > 0) {
            setFormData(prev => ({ ...prev, DepartmentID: deptRes.data[0].DepartmentID }));
          }
          if (posRes.data.length > 0) {
            setFormData(prev => ({ ...prev, PositionID: posRes.data[0].PositionID }));
          }
        } catch (err) {
          console.error('Failed to fetch departments/positions', err);
          setError('Không thể tải danh sách phòng ban/chức vụ.');
        } finally {
          setLoading(false);
        }
      }
    };
    fetchData();
  }, [isOpen]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    if (!formData.FullName || !formData.Email || !formData.DateOfBirth || !formData.HireDate || !formData.DepartmentID || !formData.PositionID || !formData.password) {
      setError('Vui lòng điền đầy đủ các trường bắt buộc.');
      setLoading(false);
      return;
    }

    try {
      await api.post('/employees/', formData);
      onSuccess();
      setFormData({
        FullName: '', Email: '', DateOfBirth: '', HireDate: '',
        DepartmentID: departments.length > 0 ? departments[0].DepartmentID : '',
        PositionID: positions.length > 0 ? positions[0].PositionID : '',
        Status: 'Đang làm việc', Gender: '', PhoneNumber: '', password: ''
      });
    } catch (err) {
      console.error('Failed to add employee', err);
      setError(err.response?.data?.detail || 'Thêm nhân viên thất bại. Vui lòng thử lại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) {
    return null;
  }

  return (
    // --- BỌC HIỆU ỨNG FADE CHO OVERLAY ---
    <motion.div
      style={styles.overlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose} // Cho phép đóng khi click bên ngoài
    >
      {/* --- BỌC HIỆU ỨNG FADE + SCALE CHO MODAL --- */}
      <motion.div
        style={styles.modal}
        initial={{ opacity: 0, scale: 0.9, y: -20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: -20 }}
        transition={{ duration: 0.2 }}
        onClick={(e) => e.stopPropagation()} // Ngăn click bên trong modal
      >
        <h2 style={styles.header}>Thêm Nhân viên mới</h2>
        {error && <p style={styles.errorText}>{error}</p>}
        
        <form onSubmit={handleSubmit}>
          {/* --- SỬA LẠI GRID ĐỂ ĐẸP HƠN --- */}
          <div style={styles.formGrid}>
            <div style={styles.formGroup}>
              <label style={styles.label}>Họ tên (*):</label>
              <input type="text" name="FullName" value={formData.FullName} onChange={handleChange} required style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Email (*):</label>
              <input type="email" name="Email" value={formData.Email} onChange={handleChange} required style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Ngày sinh (*):</label>
              <input type="date" name="DateOfBirth" value={formData.DateOfBirth} onChange={handleChange} required style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Ngày vào làm (*):</label>
              <input type="date" name="HireDate" value={formData.HireDate} onChange={handleChange} required style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Giới tính:</label>
              <select name="Gender" value={formData.Gender} onChange={handleChange} style={styles.input}>
                <option value="">Chọn giới tính</option>
                <option value="Male">Nam</option>
                <option value="Female">Nữ</option>
                <option value="Other">Khác</option>
              </select>
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>SĐT:</label>
              <input type="tel" name="PhoneNumber" value={formData.PhoneNumber} onChange={handleChange} style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Phòng ban (*):</label>
              <select name="DepartmentID" value={formData.DepartmentID} onChange={handleChange} required disabled={loading} style={styles.input}>
                {departments.length === 0 && !loading && <option value="">Không có phòng ban</option>}
                {departments.map(dept => (
                  <option key={dept.DepartmentID} value={dept.DepartmentID}>{dept.DepartmentName}</option>
                ))}
              </select>
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Chức vụ (*):</label>
              <select name="PositionID" value={formData.PositionID} onChange={handleChange} required disabled={loading} style={styles.input}>
                {positions.length === 0 && !loading && <option value="">Không có chức vụ</option>}
                {positions.map(pos => (
                  <option key={pos.PositionID} value={pos.PositionID}>{pos.PositionName}</option>
                ))}
              </select>
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Trạng thái (*):</label>
              <select name="Status" value={formData.Status} onChange={handleChange} required style={styles.input}>
                <option value="Đang làm việc">Đang làm việc</option>
                <option value="Nghỉ phép">Nghỉ phép</option>
                <option value="Thử việc">Thử việc</option>
                <option value="Thực tập">Thực tập</option>
              </select>
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Mật khẩu (*):</label>
              <input type="password" name="password" value={formData.password} onChange={handleChange} required style={styles.input} />
              <small> (Tài khoản sẽ dùng mật khẩu này để đăng nhập)</small>
            </div>
          </div>

          <div style={styles.buttonGroup}>
            <button type="button" onClick={onClose} disabled={loading} style={{...styles.button, ...styles.cancelButton}}>
              Hủy
            </button>
            <button type="submit" disabled={loading} style={{...styles.button, ...styles.submitButton}}>
              {loading ? 'Đang thêm...' : 'Thêm'}
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

// --- CẬP NHẬT CSS STYLES ---
const styles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modal: {
    backgroundColor: '#fff',
    padding: '20px 25px',
    borderRadius: '8px',
    width: '100%',
    maxWidth: '700px', // Tăng chiều rộng cho form 2 cột
    maxHeight: '90vh',
    overflowY: 'auto',
    boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
  },
  header: {
    marginTop: 0,
    marginBottom: '20px',
    borderBottom: '1px solid #eee',
    paddingBottom: '10px',
  },
  formGrid: {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr', // Chia 2 cột
    gap: '15px 20px', // Khoảng cách giữa các ô
  },
  formGroup: {
    marginBottom: '5px',
    display: 'flex',
    flexDirection: 'column',
  },
  label: {
    fontWeight: 'bold',
    marginBottom: '5px',
    fontSize: '0.9em',
  },
  input: {
    width: '100%',
    padding: '8px 10px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    boxSizing: 'border-box', // Đảm bảo padding không làm vỡ layout
  },
  errorText: {
    color: '#D8000C',
    backgroundColor: '#FFD2D2',
    padding: '10px',
    borderRadius: '4px',
    marginBottom: '15px',
  },
  buttonGroup: {
    marginTop: '20px',
    textAlign: 'right',
    borderTop: '1px solid #eee',
    paddingTop: '15px',
  },
  button: {
    padding: '8px 15px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontWeight: 'bold',
    marginLeft: '10px',
  },
  submitButton: {
    backgroundColor: '#28a745', // Green
    color: 'white',
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
    color: '#333',
    border: '1px solid #ccc',
  }
};

export default AddEmployeeModal;
/////////////////
// frontend/src/components/DepartmentModal.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { motion } from 'framer-motion';

const DepartmentModal = ({ isOpen, onClose, onSuccess, departmentData }) => {
  const [name, setName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const isEditMode = !!departmentData;

  useEffect(() => {
    if (isEditMode) setName(departmentData.DepartmentName || '');
    else setName('');
    setError('');
  }, [isOpen, departmentData, isEditMode]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim()) {
      setError('Tên phòng ban không được để trống.');
      return;
    }
    setLoading(true);
    setError('');
    try {
      if (isEditMode) {
        await api.put(`/departments/${departmentData.DepartmentID}`, { DepartmentName: name });
      } else {
        await api.post('/departments/', { DepartmentName: name });
      }
      onSuccess();
    } catch (err) {
      setError(err.response?.data?.detail || 'Lưu thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <motion.div
      style={styles.overlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        style={styles.modal}
        initial={{ opacity: 0, scale: 0.9, y: -20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: -20 }}
        transition={{ duration: 0.2 }}
        onClick={(e) => e.stopPropagation()}
      >
        <h2 style={styles.header}>{isEditMode ? 'Sửa Phòng ban' : 'Thêm Phòng ban mới'}</h2>
        {isEditMode && <p style={styles.subHeader}>ID: {departmentData.DepartmentID}</p>}
        {error && <p style={styles.errorText}>{error}</p>}
        
        <form onSubmit={handleSubmit}>
          <div style={styles.formGroup}>
            <label style={styles.label}>Tên Phòng ban:</label>
            <input 
              type="text" 
              value={name} 
              onChange={(e) => setName(e.target.value)} 
              disabled={loading} 
              style={styles.input} 
              required 
            />
          </div>
          <div style={styles.buttonGroup}>
            <button type="button" onClick={onClose} disabled={loading} style={{...styles.button, ...styles.cancelButton}}>
              Hủy
            </button>
            <button type="submit" disabled={loading} style={{...styles.button, ...styles.submitButton}}>
              {loading ? 'Đang lưu...' : (isEditMode ? 'Lưu thay đổi' : 'Thêm mới')}
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

// --- STYLES ---
const styles = {
    overlay: {
        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex',
        justifyContent: 'center', alignItems: 'center', zIndex: 1000,
    },
    modal: {
        backgroundColor: '#fff', padding: '20px 25px', borderRadius: '8px',
        width: '100%', maxWidth: '450px',
        boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
    },
    header: {
        marginTop: 0,
        marginBottom: '10px', // <-- SỬA Ở ĐÂY
    },
    subHeader: {
        fontSize: '0.9em',
        color: '#666',
        marginTop: '-5px', // <-- SỬA Ở ĐÂY
        marginBottom: '20px',
    },
    formGroup: {
        marginBottom: '15px',
        display: 'flex',
        flexDirection: 'column',
    },
    label: {
        fontWeight: 'bold',
        marginBottom: '5px',
        fontSize: '0.9em',
    },
    input: {
        width: '100%',
        padding: '8px 10px',
        border: '1px solid #ccc',
        borderRadius: '4px',
        boxSizing: 'border-box',
    },
    errorText: {
        color: '#D8000C',
        backgroundColor: '#FFD2D2',
        padding: '10px',
        borderRadius: '4px',
        marginBottom: '15px',
    },
    buttonGroup: {
        marginTop: '20px',
        textAlign: 'right',
        borderTop: '1px solid #eee',
        paddingTop: '15px',
    },
    button: {
        padding: '8px 15px',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        fontWeight: 'bold',
        marginLeft: '10px',
    },
    submitButton: {
        backgroundColor: '#007bff', // Blue
        color: 'white',
    },
    cancelButton: {
        backgroundColor: '#f0f0f0',
        color: '#333',
        border: '1px solid #ccc',
    }
};

export default DepartmentModal;
/////////////////
// frontend/src/components/EditEmployeeModal.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { motion } from 'framer-motion'; // <-- Thêm import

const EditEmployeeModal = ({ isOpen, onClose, onSuccess, employeeData }) => {
  const [formData, setFormData] = useState({
    FullName: '',
    DepartmentID: '',
    PositionID: '',
    Status: '',
    PhoneNumber: '',
  });
  const [departments, setDepartments] = useState([]);
  const [positions, setPositions] = useState([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchDataAndPopulateForm = async () => {
      if (isOpen && employeeData) {
        setLoading(true);
        setError('');
        try {
          const [deptRes, posRes] = await Promise.all([
            api.get('/departments/'),
            api.get('/positions/')
          ]);
          setDepartments(deptRes.data);
          setPositions(posRes.data);
          setFormData({
            FullName: employeeData.FullName || '',
            DepartmentID: employeeData.department?.DepartmentID || '',
            PositionID: employeeData.position?.PositionID || '',
            Status: employeeData.Status || '',
            PhoneNumber: employeeData.PhoneNumber || '',
          });
        } catch (err) {
          console.error('Failed to fetch departments/positions for edit', err);
          setError('Không thể tải dữ liệu cần thiết để sửa.');
        } finally {
          setLoading(false);
        }
      }
    };
    fetchDataAndPopulateForm();
  }, [isOpen, employeeData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    const updateData = {
      FullName: formData.FullName,
      Status: formData.Status,
      PhoneNumber: formData.PhoneNumber || null,
      DepartmentID: parseInt(formData.DepartmentID, 10),
      PositionID: parseInt(formData.PositionID, 10),
    };
    if (isNaN(updateData.DepartmentID) || isNaN(updateData.PositionID)) {
      setError('Phòng ban hoặc Chức vụ không hợp lệ.');
      return;
    }

    setLoading(true);
    try {
      await api.put(`/employees/${employeeData.EmployeeID}`, updateData);
      onSuccess();
    } catch (err) {
      console.error('Failed to update employee', err);
      setError(err.response?.data?.detail || 'Cập nhật nhân viên thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) {
    return null;
  }

  return (
    <motion.div
      style={styles.overlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        style={styles.modal}
        initial={{ opacity: 0, scale: 0.9, y: -20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: -20 }}
        transition={{ duration: 0.2 }}
        onClick={(e) => e.stopPropagation()}
      >
        <h2 style={styles.header}>Sửa thông tin Nhân viên (ID: {employeeData?.EmployeeID})</h2>
        {error && <p style={styles.errorText}>{error}</p>}

        {loading && !error ? <p>Đang tải dữ liệu...</p> : (
          <form onSubmit={handleSubmit}>
            <div style={styles.formGroup}>
              <label style={styles.label}>Họ tên:</label>
              <input type="text" name="FullName" value={formData.FullName} onChange={handleChange} style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Email:</label>
              <input type="email" value={employeeData.Email || ''} disabled style={{...styles.input, ...styles.inputDisabled}} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>SĐT:</label>
              <input type="tel" name="PhoneNumber" value={formData.PhoneNumber} onChange={handleChange} style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Phòng ban:</label>
              <select name="DepartmentID" value={formData.DepartmentID} onChange={handleChange} required style={styles.input}>
                {departments.map(dept => (
                  <option key={dept.DepartmentID} value={dept.DepartmentID}>{dept.DepartmentName}</option>
                ))}
              </select>
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Chức vụ:</label>
              <select name="PositionID" value={formData.PositionID} onChange={handleChange} required style={styles.input}>
                {positions.map(pos => (
                  <option key={pos.PositionID} value={pos.PositionID}>{pos.PositionName}</option>
                ))}
              </select>
            </div>
            <div style={styles.formGroup}>
              <label style={styles.label}>Trạng thái:</label>
              <select name="Status" value={formData.Status} onChange={handleChange} required style={styles.input}>
                <option value="Đang làm việc">Đang làm việc</option>
                <option value="Nghỉ phép">Nghỉ phép</option>
                <option value="Thử việc">Thử việc</option>
                <option value="Thực tập">Thực tập</option>
              </select>
            </div>

            <div style={styles.buttonGroup}>
              <button type="button" onClick={onClose} disabled={loading} style={{...styles.button, ...styles.cancelButton}}>
                Hủy
              </button>
              <button type="submit" disabled={loading} style={{...styles.button, ...styles.submitButton}}>
                {loading ? 'Đang lưu...' : 'Lưu thay đổi'}
              </button>
            </div>
          </form>
        )}
      </motion.div>
    </motion.div>
  );
};

// --- STYLES (Tương tự AddModal, nhưng đơn giản hơn) ---
const styles = {
  overlay: {
    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex',
    justifyContent: 'center', alignItems: 'center', zIndex: 1000,
  },
  modal: {
    backgroundColor: '#fff', padding: '20px 25px', borderRadius: '8px',
    width: '100%', maxWidth: '500px', // Modal này nhỏ hơn
    maxHeight: '90vh', overflowY: 'auto',
    boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
  },
  header: {
    marginTop: 0, marginBottom: '20px',
    borderBottom: '1px solid #eee', paddingBottom: '10px',
  },
  formGroup: {
    marginBottom: '15px', // Tăng khoảng cách
    display: 'flex',
    flexDirection: 'column',
  },
  label: {
    fontWeight: 'bold',
    marginBottom: '5px',
    fontSize: '0.9em',
  },
  input: {
    width: '100%',
    padding: '8px 10px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    boxSizing: 'border-box',
  },
  inputDisabled: {
    backgroundColor: '#f4f4f4',
    color: '#777',
  },
  errorText: {
    color: '#D8000C',
    backgroundColor: '#FFD2D2',
    padding: '10px',
    borderRadius: '4px',
    marginBottom: '15px',
  },
  buttonGroup: {
    marginTop: '20px',
    textAlign: 'right',
    borderTop: '1px solid #eee',
    paddingTop: '15px',
  },
  button: {
    padding: '8px 15px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontWeight: 'bold',
    marginLeft: '10px',
  },
  submitButton: {
    backgroundColor: '#007bff', // Blue
    color: 'white',
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
    color: '#333',
    border: '1px solid #ccc',
  }
};

export default EditEmployeeModal;
///////////////
// frontend/src/components/EditSalaryModal.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { motion } from 'framer-motion';

const EditSalaryModal = ({ isOpen, onClose, onSuccess, salaryData }) => {
  const [formData, setFormData] = useState({
    BaseSalary: 0,
    Bonus: 0,
    Deductions: 0,
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (salaryData) {
      setFormData({
        BaseSalary: salaryData.BaseSalary || 0,
        Bonus: salaryData.Bonus || 0,
        Deductions: salaryData.Deductions || 0,
      });
      setError('');
    }
  }, [salaryData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    const updateData = {
      BaseSalary: parseFloat(formData.BaseSalary),
      Bonus: parseFloat(formData.Bonus),
      Deductions: parseFloat(formData.Deductions),
    };
    try {
      await api.put(`/payroll/salaries/${salaryData.SalaryID}`, updateData);
      onSuccess();
    } catch (err) {
      console.error('Failed to update salary', err);
      setError(err.response?.data?.detail || 'Cập nhật lương thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen || !salaryData) {
    return null;
  }

  return (
    <motion.div
      style={styles.overlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        style={styles.modal}
        initial={{ opacity: 0, scale: 0.9, y: -20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: -20 }}
        transition={{ duration: 0.2 }}
        onClick={(e) => e.stopPropagation()}
      >
        <h2 style={styles.header}>Sửa Lương (ID: {salaryData.SalaryID})</h2>
        <p style={styles.subHeader}>Tháng: {salaryData.SalaryMonth}</p>

        {error && <p style={styles.errorText}>{error}</p>}
        
        <form onSubmit={handleSubmit}>
          <div style={styles.formGroup}>
            <label style={styles.label}>Lương cơ bản:</label>
            <input type="number" step="0.01" name="BaseSalary" value={formData.BaseSalary} onChange={handleChange} required style={styles.input} />
          </div>
          <div style={styles.formGroup}>
            <label style={styles.label}>Thưởng:</label>
            <input type="number" step="0.01" name="Bonus" value={formData.Bonus} onChange={handleChange} style={styles.input} />
          </div>
          <div style={styles.formGroup}>
            <label style={styles.label}>Khấu trừ:</label>
            <input type="number" step="0.01" name="Deductions" value={formData.Deductions} onChange={handleChange} style={styles.input} />
          </div>

          <div style={styles.buttonGroup}>
            <button type="button" onClick={onClose} disabled={loading} style={{...styles.button, ...styles.cancelButton}}>
              Hủy
            </button>
            <button type="submit" disabled={loading} style={{...styles.button, ...styles.submitButton}}>
              {loading ? 'Đang lưu...' : 'Lưu thay đổi'}
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

// --- STYLES NÂNG CẤP ---
const styles = {
  overlay: {
    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex',
    justifyContent: 'center', alignItems: 'center', zIndex: 1000,
  },
  modal: {
    backgroundColor: '#fff', padding: '20px 25px', borderRadius: '8px',
    width: '100%', maxWidth: '450px',
    boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
  },
  header: {
    marginTop: 0,
    marginBottom: '10px', // <-- SỬA Ở ĐÂY
  },
  subHeader: {
    fontSize: '0.9em',
    color: '#666',
    marginTop: '-5px', // <-- SỬA Ở ĐÂY
    marginBottom: '20px',
  },
  formGroup: {
    marginBottom: '15px',
    display: 'flex',
    flexDirection: 'column',
  },
  label: {
    fontWeight: 'bold',
    marginBottom: '5px',
    fontSize: '0.9em',
  },
  input: {
    width: '100%',
    padding: '8px 10px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    boxSizing: 'border-box',
  },
  errorText: {
    color: '#D8000C',
    backgroundColor: '#FFD2D2',
    padding: '10px',
    borderRadius: '4px',
    marginBottom: '15px',
  },
  buttonGroup: {
    marginTop: '20px',
    textAlign: 'right',
    borderTop: '1px solid #eee',
    paddingTop: '15px',
  },
  button: {
    padding: '8px 15px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontWeight: 'bold',
    marginLeft: '10px',
  },
  submitButton: {
    backgroundColor: '#007bff', // Blue
    color: 'white',
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
    color: '#333',
    border: '1px solid #ccc',
  }
};

export default EditSalaryModal;
///////////////////
import React, { useState, useEffect } from 'react';
// Use NavLink for active styling
import { NavLink, Outlet, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import NotificationsBell from '../components/NotificationsBell'; // Assuming this exists
import { motion, AnimatePresence } from 'framer-motion';

// --- Icons ---
// Icons from Version 2 (Base)
const UserAvatarIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <circle cx="12" cy="8" r="5"></circle>
        <path d="M20 21a8 8 0 1 0-16 0"></path>
    </svg>
);
const SunIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
);
const MoonIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
);

// Icons from Version 1 (Upgrade)
const MenuIcon = () => ( // Icon for sidebar toggle
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
    </svg>
);
const LogoutIcon = () => ( // Icon for logout
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
        <polyline points="16 17 21 12 16 7"></polyline>
        <line x1="21" y1="12" x2="9" y2="12"></line>
    </svg>
);

// --- Placeholders for Nav Icons (Replace <svg ... /> with actual SVG code) ---
const DashboardIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>;
const UsersIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>;
const EmployeesIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="23" y1="11" x2="17" y2="11"></line></svg>;
const OrgIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M10 2H6a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h4v0a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2z"></path><path d="M18 15h-4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2z"></path><path d="M6 15h.01"></path><path d="M6 18h.01"></path><path d="M14 15h.01"></path><path d="M14 18h.01"></path><path d="M10 9v.01"></path><path d="M18 9v.01"></path><path d="M14 22v-3a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v3"></path><path d="M14 9V6a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v3"></path></svg>;
const PayrollIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>;
const ReportsIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15.2 2H8.8A1.8 1.8 0 0 0 7 3.8v16.4A1.8 1.8 0 0 0 8.8 22h6.4a1.8 1.8 0 0 0 1.8-1.8V3.8A1.8 1.8 0 0 0 15.2 2z"></path><path d="M8 12h8"></path><path d="M8 16h8"></path><path d="M11 7.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"></path></svg>;
const ProfileIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>;
// --- End Icons ---


const Layout = () => {
    const { user, logout } = useAuth();
    const navigate = useNavigate();
    const location = useLocation(); // Needed for Framer Motion key

    // --- State ---
    const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
    const [isDarkMode, setIsDarkMode] = useState(() => {
        const savedTheme = localStorage.getItem('theme');
        // Default to light mode if no preference saved or system preference is light
        return savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches);
    });

    // --- Handlers ---
    const toggleSidebar = () => setIsSidebarCollapsed(prev => !prev);
    const toggleTheme = () => {
        setIsDarkMode(prevMode => {
            const newMode = !prevMode;
            localStorage.setItem('theme', newMode ? 'dark' : 'light');
            return newMode;
        });
    };
    const handleLogout = () => {
        // Add confirmation dialog
        if (window.confirm("Bạn có chắc chắn muốn đăng xuất?")) {
             logout();
             navigate('/login');
        }
    };

    // --- Effects ---
    // Apply theme class to body
    useEffect(() => {
        document.body.className = isDarkMode ? 'theme-dark' : 'theme-light';
    }, [isDarkMode]);

    // Inject dynamic CSS styles
    useEffect(() => {
        const styleId = 'layout-dynamic-styles';
        let styleSheet = document.getElementById(styleId);
        if (!styleSheet) {
            styleSheet = document.createElement("style");
            styleSheet.id = styleId;
            styleSheet.type = "text/css";
            document.head.appendChild(styleSheet);
        }
        styleSheet.innerText = customLayoutStyles; // CSS string defined below
        // Optional cleanup: remove style on component unmount
        // return () => { if (styleSheet) document.head.removeChild(styleSheet); };
    }, []); // Run only once

    // --- Role Checks ---
    const isAdmin = user?.role === 'Admin';
    const isHrManager = user?.role === 'HR Manager';
    const isPayrollManager = user?.role === 'Payroll Manager';
    const isEmployee = user?.role === 'Employee';

    // --- Dynamic Styles ---
    // Function to apply active style to NavLink
    const getNavLinkStyle = ({ isActive }) => ({
        ...styles.navLinkBase,
        ...(isActive ? styles.navLinkActive : styles.navLinkInactive),
        justifyContent: isSidebarCollapsed ? 'center' : 'flex-start', // Center icon when collapsed
    });

    // Sidebar width based on state
    const sidebarWidth = isSidebarCollapsed ? '80px' : '250px';
    const dynamicSidebarStyle = {
        ...styles.sidebar,
        width: sidebarWidth,
    };
    const dynamicMainContentStyle = {
        ...styles.mainContentWrapper,
        marginLeft: sidebarWidth,
    };

    // --- Framer Motion Variants ---
    const pageVariants = {
        initial: { opacity: 0, y: 15 }, // Slide up slightly
        in: { opacity: 1, y: 0 },
        out: { opacity: 0, y: -15 } // Slide up slightly
    };
    const pageTransition = { type: "tween", ease: "easeInOut", duration: 0.3 };

    return (
        <div style={styles.layoutContainer} className={isDarkMode ? 'theme-dark' : 'theme-light'}>
            {/* --- Sidebar --- */}
            <motion.nav
                style={dynamicSidebarStyle}
                animate={{ width: sidebarWidth }}
                transition={{ duration: 0.3, ease: "easeInOut" }}
            >
                 {/* Sidebar Header with Toggle */}
                 <div style={styles.sidebarHeader}>
                     {!isSidebarCollapsed && <h3 style={styles.sidebarTitle}>HRM Dashboard</h3>}
                     <button onClick={toggleSidebar} style={styles.sidebarToggle} title={isSidebarCollapsed ? "Mở rộng" : "Thu gọn"}>
                         <MenuIcon />
                     </button>
                 </div>

                <ul style={styles.navList}>
                    {/* Use NavLink for automatic active class handling */}
                    <li><NavLink to="/" style={getNavLinkStyle} end>
                        <DashboardIcon /> {!isSidebarCollapsed && <span>Dashboard</span>}
                    </NavLink></li>

                    {isAdmin && (
                        <li style={styles.adminLinkSeparator}><NavLink to="/user-management" style={getNavLinkStyle}>
                           <UsersIcon /> {!isSidebarCollapsed && <span>Quản lý Tài khoản</span>}
                        </NavLink></li>
                    )}
                     {isEmployee && user?.emp_id && (
                        <li><NavLink to={`/employees/${user.emp_id}`} style={getNavLinkStyle}>
                           <ProfileIcon/> {!isSidebarCollapsed && <span>Hồ sơ của tôi</span>}
                        </NavLink></li>
                     )}

                    {(isAdmin || isHrManager) && (
                        <li><NavLink to="/employees" style={getNavLinkStyle}>
                           <EmployeesIcon /> {!isSidebarCollapsed && <span>Quản lý Nhân viên</span>}
                        </NavLink></li>
                    )}

                    {(isAdmin || isHrManager) && (
                        <li><NavLink to="/management" style={getNavLinkStyle}>
                            <OrgIcon/> {!isSidebarCollapsed && <span>Quản lý Tổ chức</span>}
                        </NavLink></li>
                    )}

                    {(isAdmin || isPayrollManager) && (
                        <li><NavLink to="/payroll" style={getNavLinkStyle}>
                            <PayrollIcon/> {!isSidebarCollapsed && <span>Quản lý Bảng lương</span>}
                        </NavLink></li>
                    )}

                    {(isAdmin || isHrManager || isPayrollManager) && (
                        <li><NavLink to="/reports" style={getNavLinkStyle}>
                            <ReportsIcon/> {!isSidebarCollapsed && <span>Báo cáo</span>}
                        </NavLink></li>
                    )}
                </ul>
            </motion.nav>

            {/* --- Main Content Area --- */}
            <motion.div
                style={dynamicMainContentStyle}
                animate={{ marginLeft: sidebarWidth }}
                transition={{ duration: 0.3, ease: "easeInOut" }}
            >
                {/* --- Header --- */}
                <header style={styles.header}>
                    {/* Can add breadcrumbs or page title here */}
                    <div></div> {/* Left placeholder */}
                    <div style={styles.headerRight}>
                        <NotificationsBell />
                        <button onClick={toggleTheme} style={styles.themeToggleButton} title="Chuyển chế độ Sáng/Tối">
                            {isDarkMode ? <SunIcon /> : <MoonIcon />}
                        </button>
                        <div style={styles.userMenu}>
                             <UserAvatarIcon />
                            <span style={styles.userEmail}>{user?.email}</span>
                            <span style={styles.userRole}>({user?.role})</span>
                        </div>
                        <button onClick={handleLogout} style={styles.logoutButton} className="logout-button" title="Đăng xuất">
                           <LogoutIcon />
                           {/* <span>Đăng xuất</span> */} {/* Optional text */}
                        </button>
                    </div>
                </header>

                {/* --- Page Content with Animation --- */}
                <main style={styles.contentArea}>
                    {/* AnimatePresence helps with exit animations */}
                    <AnimatePresence mode="wait">
                         <motion.div
                            key={location.pathname} // Re-renders on path change
                            initial="initial"
                            animate="in"
                            exit="out"
                            variants={pageVariants}
                            transition={pageTransition}
                         >
                            <Outlet /> {/* Renders the matched child route */}
                         </motion.div>
                    </AnimatePresence>
                </main>
            </motion.div>
        </div>
    );
};

// --- Enhanced Styles using CSS Variables ---
const styles = {
    layoutContainer: {
        display: 'flex',
        minHeight: '100vh',
        backgroundColor: 'var(--bg-color)', // Use variable
    },
    sidebar: {
        // width is dynamic
        borderRight: '1px solid var(--border-color)',
        background: 'var(--sidebar-bg)',
        padding: '0', // Remove padding, handle internally
        boxShadow: '2px 0 8px rgba(0,0,0,0.08)',
        position: 'fixed', // Keep fixed
        top: 0,
        left: 0,
        height: '100%',
        overflowY: 'auto',
        overflowX: 'hidden', // Hide horizontal scrollbar
        zIndex: 100, // Ensure sidebar is on top
        display: 'flex',
        flexDirection: 'column',
    },
     sidebarHeader: {
         display: 'flex',
         alignItems: 'center',
         justifyContent: 'space-between', // Space between title and button
         padding: '15px', // Consistent padding
         height: '60px', // Match header height
         borderBottom: '1px solid var(--border-color)',
         flexShrink: 0, // Prevent header from shrinking
     },
    sidebarTitle: {
        fontSize: '1.3rem', // Slightly smaller
        color: 'var(--primary-color)',
        margin: 0,
        whiteSpace: 'nowrap', // Prevent title wrapping
        overflow: 'hidden',
        textOverflow: 'ellipsis',
    },
     sidebarToggle: {
         background: 'none',
         border: 'none',
         cursor: 'pointer',
         padding: '5px',
         display: 'flex',
         color: 'var(--text-color-secondary)',
         borderRadius: '4px',
     },
    navList: {
        listStyleType: 'none',
        padding: '15px', // Add padding around the list itself
        margin: 0,
        flexGrow: 1, // Allow list to fill remaining space
        overflowY: 'auto', // Scroll if needed
    },
    // Base styles for all NavLinks
    navLinkBase: {
        display: 'flex',
        alignItems: 'center',
        gap: '12px', // Space between icon and text
        padding: '10px 15px', // Adjusted padding
        marginBottom: '4px', // Tighter spacing
        textDecoration: 'none',
        borderRadius: '6px', // Slightly more rounded
        whiteSpace: 'nowrap', // Prevent text wrapping
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        transition: 'background-color 0.2s ease, color 0.2s ease, box-shadow 0.2s ease',
    },
    // Styles for inactive links
    navLinkInactive: {
        color: 'var(--text-color-secondary)', // Dimmer color for inactive
        backgroundColor: 'transparent',
        fontWeight: 'normal',
    },
    // Styles for the active link
    navLinkActive: {
        color: '#fff', // White text on active
        backgroundColor: 'var(--primary-color)',
        fontWeight: '500', // Medium weight for active
        boxShadow: '0 2px 5px rgba(24, 144, 255, 0.2)', // Subtle shadow for active
    },
     adminLinkSeparator: { // Optional separator style
         marginTop: '15px',
         paddingTop: '15px',
         borderTop: '1px solid var(--border-color-lighter)', // Use a lighter border
     },
    mainContentWrapper: {
        flex: 1,
        // marginLeft is dynamic
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden', // Prevent layout shifts during transition
    },
    header: {
        display: 'flex',
        justifyContent: 'space-between', // Push left/right content apart
        alignItems: 'center',
        padding: '0 25px', // Vertical padding handled by height
        borderBottom: '1px solid var(--border-color)',
        backgroundColor: 'var(--header-bg)',
        height: '60px', // Fixed header height
        boxShadow: '0 2px 5px rgba(0,0,0,0.05)',
        flexShrink: 0, // Prevent header shrinking
        zIndex: 50,
    },
    headerRight: {
        display: 'flex',
        alignItems: 'center',
        gap: '15px', // Space between items in the right header
    },
    themeToggleButton: {
        background: 'none',
        border: 'none',
        cursor: 'pointer',
        padding: '6px', // Slightly larger click area
        borderRadius: '50%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        color: 'var(--text-color-secondary)',
        // Removed marginLeft, using gap in headerRight instead
    },
    userMenu: {
        display: 'flex',
        alignItems: 'center',
        gap: '8px', // Use gap for spacing
        padding: '5px 10px',
        borderRadius: '6px',
        cursor: 'default', // Not clickable for now
    },
     userEmail: {
         fontSize: '0.9rem',
         color: 'var(--text-color)', // Use main text color
         fontWeight: 500,
         marginRight: '5px',
     },
     userRole: {
         fontSize: '0.8rem',
         color: 'var(--text-color-secondary)',
         fontStyle: 'italic',
     },
    logoutButton: {
        // marginLeft: '20px', Removed, using gap
        padding: '6px', // Padding for icon button
        border: 'none', // Borderless button
        borderRadius: '50%', // Circular button
        cursor: 'pointer',
        backgroundColor: 'transparent', // Transparent background
        color: 'var(--text-color-secondary)', // Icon color matches theme toggle
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: 'background-color 0.2s ease, color 0.2s ease',
    },
    contentArea: {
        flex: 1, // Take remaining space
        padding: '25px 30px', // More padding
        overflowY: 'auto', // Allow content scrolling independently
        backgroundColor: 'var(--bg-color)',
        position: 'relative', // Needed for Framer Motion positioning
    },
};

// --- Dynamic CSS (Includes Theme Variables and Hover Effects) ---
const customLayoutStyles = `
    /* Define Theme Variables */
    body.theme-light, :root.theme-light { /* Added :root for broader scope */
        --bg-color: #f4f7f9; /* Lighter grey */
        --sidebar-bg: #ffffff;
        --header-bg: #ffffff;
        --card-bg: #ffffff;
        --modal-bg: #ffffff;
        --text-color: #343a40; /* Darker text */
        --text-color-secondary: #6c757d; /* Grey text */
        --border-color: #dee2e6; /* Lighter border */
        --border-color-lighter: #e9ecef;
        --table-border-color: #dee2e6;
        --table-row-border-color: #e9ecef;
        --table-header-bg: #f8f9fa; /* Very light grey */
        --button-bg: #e9ecef;
        --button-text: #343a40;
        --input-bg: #ffffff;
        --input-border-color: #ced4da;
        --primary-color: #0d6efd; /* Standard Bootstrap blue */
        --hover-bg: #f8f9fa; /* Background for hover states */
        color-scheme: light;
    }
    body.theme-dark, :root.theme-dark {
        --bg-color: #121212; /* Very dark grey */
        --sidebar-bg: #1e1e1e; /* Slightly lighter dark */
        --header-bg: #1e1e1e;
        --card-bg: #1e1e1e;
        --modal-bg: #1e1e1e;
        --text-color: #e0e0e0; /* Off-white */
        --text-color-secondary: #a0a0a0; /* Lighter grey */
        --border-color: #333333; /* Darker border */
        --border-color-lighter: #2a2a2a;
        --table-border-color: #444444;
        --table-row-border-color: #333333;
        --table-header-bg: #2a2a2a;
        --button-bg: #333333;
        --button-text: #e0e0e0;
        --input-bg: #2a2a2a;
        --input-border-color: #444444;
        --primary-color: #3b82f6; /* Brighter blue for dark mode */
        --hover-bg: #2a2a2a;
        color-scheme: dark;
    }

    /* Apply smooth transition globally */
    body, * { /* Apply to all elements for consistency */
         transition: background-color 0.25s ease, color 0.25s ease, border-color 0.25s ease, box-shadow 0.25s ease;
    }
    /* Remove default margins/paddings */
    body, h1, h2, h3, h4, h5, h6, p, ul, ol { margin: 0; padding: 0; }
    ul, ol { list-style: none; }

    /* Apply variables to general elements */
    body { background-color: var(--bg-color); color: var(--text-color); font-size: 14px; }
    h1, h2, h3, h4, h5, h6 { color: var(--text-color); margin-bottom: 0.5em; /* Add some default spacing back */}
    p { color: var(--text-color); margin-bottom: 1em; }
    a { color: var(--primary-color); text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Theme specific input/select styling */
    input, select, textarea {
       background-color: var(--input-bg);
       border: 1px solid var(--input-border-color);
       color: var(--text-color);
       border-radius: 4px;
       padding: 8px 12px;
    }
    input::placeholder, textarea::placeholder {
       color: var(--text-color-secondary);
       opacity: 0.7;
    }
    input:focus, select:focus, textarea:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 13, 110, 253), 0.25); /* Use RGB for shadow */
        outline: none;
    }
     /* Define primary color RGB for box-shadow */
    :root { --primary-color-rgb: 13, 110, 253; }
    :root.theme-dark { --primary-color-rgb: 59, 130, 246; }

    input:disabled, select:disabled, textarea:disabled {
        background-color: var(--button-bg) !important; /* Use button bg for disabled */
        color: var(--text-color-secondary) !important;
        cursor: not-allowed;
        opacity: 0.65;
    }

    /* Scrollbars */
    ::-webkit-scrollbar { width: 8px; height: 8px; }
    ::-webkit-scrollbar-track { background: var(--bg-color); }
    ::-webkit-scrollbar-thumb { background: var(--border-color); border-radius: 4px; }
    ::-webkit-scrollbar-thumb:hover { background: var(--text-color-secondary); }

    /* NavLink Hover Effect */
    nav ul li a:hover { /* Apply hover to base style */
        background-color: var(--hover-bg) !important;
        color: var(--primary-color) !important; /* Make text primary color on hover */
        text-decoration: none; /* Remove underline from NavLink */
    }
     /* Ensure active state overrides hover background */
    nav ul li a[style*="background-color: var(--primary-color)"]:hover {
       background-color: var(--primary-color) !important; /* Keep primary color */
       color: #fff !important; /* Keep white text */
    }


    /* Button Hover Effects */
    button.logout-button:hover,
    button[title="Chuyển chế độ Sáng/Tối"]:hover,
    button[title="Mở rộng"]:hover,
    button[title="Thu gọn"]:hover {
        background-color: var(--hover-bg) !important;
        color: var(--text-color); /* Make icon darker on hover */
    }
`;
export default Layout;
/////////////////////
// frontend/src/components/NotificationsBell.js
import React, { useState, useEffect, useRef, useCallback } from 'react';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';

// Icon Chuông SVG (có thể thay bằng icon từ thư viện)
const BellIcon = ({ hasUnread }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
    <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
    {/* Chấm đỏ nhỏ hơn */}
    {hasUnread && <circle cx="19.5" cy="5.5" r="3" fill="#ff4d4f" stroke="#fff" strokeWidth="1"/>}
  </svg>
);

const NotificationsBell = () => {
    const { user } = useAuth();
    const [notifications, setNotifications] = useState([]);
    const [unreadCount, setUnreadCount] = useState(0);
    const [isOpen, setIsOpen] = useState(false);
    const [loading, setLoading] = useState(false);
    const dropdownRef = useRef(null); // Để đóng dropdown khi click ra ngoài

    // Hàm fetch, dùng useCallback để ổn định
    const fetchNotifications = useCallback(async (includeRead = false) => {
        if (!user) return;
        setLoading(true);
        try {
            // Lấy cả count và list chưa đọc (hoặc cả đã đọc nếu includeRead=true)
            const countRes = await api.get('/notifications/unread-count');
            setUnreadCount(countRes.data);

            const listRes = await api.get('/notifications/', { params: { limit: 10, include_read: includeRead } });
            setNotifications(listRes.data);

        } catch (error) {
            console.error("Failed to fetch notifications", error);
            // Có thể thêm state lỗi để hiển thị
        } finally {
            setLoading(false);
        }
    }, [user]); // Chỉ phụ thuộc vào user

    // Fetch lần đầu và đặt interval
    useEffect(() => {
        if (user) {
            fetchNotifications();
            const intervalId = setInterval(() => fetchNotifications(), 60000); // Poll mỗi phút
            return () => clearInterval(intervalId);
        }
    }, [fetchNotifications, user]); // Gọi lại fetchNotifications nếu nó thay đổi (do user thay đổi)

    // Đóng dropdown khi click ra ngoài
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    const handleToggleDropdown = () => {
        setIsOpen(!isOpen);
        // Nếu mở ra, fetch lại để cập nhật (có thể fetch cả đã đọc)
        if (!isOpen) {
             fetchNotifications(true); // Lấy cả thông báo đã đọc
        }
    };

    const handleMarkAsRead = async (notificationId) => {
        // Đánh dấu ở backend
        try {
            await api.put(`/notifications/${notificationId}/read`);
            // Cập nhật UI ngay lập tức
            setNotifications(prev => prev.map(n =>
                n.id === notificationId ? { ...n, is_read: true } : n
            ));
            // Giảm count nếu nó chưa đọc
            const wasUnread = notifications.find(n => n.id === notificationId)?.is_read === false;
            if (wasUnread) {
                 setUnreadCount(prev => Math.max(0, prev - 1));
            }
        } catch (error) {
            console.error("Failed to mark as read", error);
        }
    };

     const handleMarkAllRead = async () => {
        try {
            await api.put(`/notifications/read-all`);
            setNotifications(prev => prev.map(n => ({ ...n, is_read: true })));
            setUnreadCount(0);
        } catch (error) {
            console.error("Failed to mark all as read", error);
        }
    };

    if (!user) return null;

    return (
        <div style={styles.bellContainer} ref={dropdownRef}>
            <button onClick={handleToggleDropdown} style={styles.bellButton} title="Thông báo">
                <BellIcon hasUnread={unreadCount > 0} />
                {unreadCount > 0 && <span style={styles.badge}>{unreadCount > 9 ? '9+' : unreadCount}</span>}
            </button>

            {isOpen && (
                <div style={styles.dropdown}>
                    <div style={styles.dropdownHeader}>
                        <span>Thông báo</span>
                        {unreadCount > 0 && (
                            <button onClick={handleMarkAllRead} style={styles.markAllReadButton}>
                                Đánh dấu tất cả đã đọc
                            </button>
                        )}
                    </div>
                    <div style={styles.dropdownContent}>
                        {loading && <p style={styles.dropdownItem}>Đang tải...</p>}
                        {!loading && notifications.length === 0 && (
                            <p style={styles.dropdownItem}>Không có thông báo nào.</p>
                        )}
                        {!loading && notifications.map((notification) => (
                            <div
                                key={notification.id}
                                style={notification.is_read ? styles.dropdownItemRead : styles.dropdownItem}
                            >
                                <p style={{ margin: '0 0 5px 0' }}>{notification.message}</p>
                                <div style={styles.itemFooter}>
                                    <small style={{ color: '#888' }}>
                                        {new Date(notification.created_at).toLocaleString('vi-VN')}
                                    </small>
                                    {!notification.is_read && (
                                        <button
                                            onClick={() => handleMarkAsRead(notification.id)}
                                            style={styles.markReadButton}
                                            title="Đánh dấu đã đọc"
                                        >
                                            ✔️
                                        </button>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                    {/* Có thể thêm link Xem tất cả ở đây */}
                </div>
            )}
        </div>
    );
};

// --- CSS Styles ---
const styles = {
    bellContainer: { position: 'relative', marginLeft: '15px', },
    bellButton: { background: 'none', border: 'none', cursor: 'pointer', padding: '5px', position: 'relative', color: '#333', },
    badge: {
        position: 'absolute', top: '0px', right: '0px', background: '#ff4d4f',
        color: 'white', borderRadius: '50%', padding: '1px 5px', fontSize: '0.7em',
        fontWeight: 'bold', minWidth: '16px', height: '16px', display: 'flex',
        justifyContent: 'center', alignItems: 'center', lineHeight: '1'
    },
    dropdown: {
        position: 'absolute', top: 'calc(100% + 5px)', right: 0, width: '380px',
        backgroundColor: 'white', boxShadow: '0 5px 15px rgba(0,0,0,0.2)',
        borderRadius: '4px', zIndex: 1100, border: '1px solid #ddd',
    },
    dropdownHeader: {
        padding: '12px 15px', borderBottom: '1px solid #eee', fontWeight: 'bold',
        display: 'flex', justifyContent: 'space-between', alignItems: 'center',
    },
    dropdownContent: { maxHeight: '350px', overflowY: 'auto' }, // Thêm cuộn
    dropdownItem: { padding: '12px 15px', borderBottom: '1px solid #eee', fontSize: '0.9em', cursor: 'default', '&:last-child': { borderBottom: 'none' } },
    dropdownItemRead: { padding: '12px 15px', borderBottom: '1px solid #eee', fontSize: '0.9em', backgroundColor: '#f9f9f9', color: '#777', '&:last-child': { borderBottom: 'none' } },
    itemFooter: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '5px' },
    markReadButton: { background: 'none', border: 'none', color: '#1890ff', cursor: 'pointer', fontSize: '1.1em', padding: '0', },
    markAllReadButton: { background: 'none', border: 'none', color: '#1890ff', cursor: 'pointer', fontSize: '0.8em', padding: '0', fontWeight: 'normal', },
};

export default NotificationsBell;
////////////////
// frontend/src/components/PositionModal.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { motion } from 'framer-motion';

const PositionModal = ({ isOpen, onClose, onSuccess, positionData }) => {
  const [name, setName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const isEditMode = !!positionData;

  useEffect(() => {
    if (isEditMode) setName(positionData.PositionName || '');
    else setName('');
    setError('');
  }, [isOpen, positionData, isEditMode]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim()) {
      setError('Tên chức vụ không được để trống.');
      return;
    }
    setLoading(true);
    setError('');
    try {
      if (isEditMode) {
        await api.put(`/positions/${positionData.PositionID}`, { PositionName: name });
      } else {
        await api.post('/positions/', { PositionName: name });
      }
      onSuccess();
    } catch (err) {
      setError(err.response?.data?.detail || 'Lưu thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <motion.div
      style={styles.overlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        style={styles.modal}
        initial={{ opacity: 0, scale: 0.9, y: -20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: -20 }}
        transition={{ duration: 0.2 }}
        onClick={(e) => e.stopPropagation()}
      >
        <h2 style={styles.header}>{isEditMode ? 'Sửa Chức vụ' : 'Thêm Chức vụ mới'}</h2>
        {isEditMode && <p style={styles.subHeader}>ID: {positionData.PositionID}</p>}
        {error && <p style={styles.errorText}>{error}</p>}
        
        <form onSubmit={handleSubmit}>
          <div style={styles.formGroup}>
            <label style={styles.label}>Tên Chức vụ:</label>
            <input 
              type="text" 
              value={name} 
              onChange={(e) => setName(e.target.value)} 
              disabled={loading} 
              style={styles.input} 
              required 
            />
          </div>
          <div style={styles.buttonGroup}>
            <button type="button" onClick={onClose} disabled={loading} style={{...styles.button, ...styles.cancelButton}}>
              Hủy
            </button>
            <button type="submit" disabled={loading} style={{...styles.button, ...styles.submitButton}}>
              {loading ? 'Đang lưu...' : (isEditMode ? 'Lưu thay đổi' : 'Thêm mới')}
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

// --- STYLES (Giống hệt DepartmentModal) ---
const styles = {
    overlay: {
        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex',
        justifyContent: 'center', alignItems: 'center', zIndex: 1000,
    },
    modal: {
        backgroundColor: '#fff', padding: '20px 25px', borderRadius: '8px',
        width: '100%', maxWidth: '450px',
        boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
    },
    header: {
        marginTop: 0,
        marginBottom: '10px', // <-- SỬA Ở ĐÂY
    },
    subHeader: {
        fontSize: '0.9em',
        color: '#666',
        marginTop: '-5px', // <-- SỬA Ở ĐÂY
        marginBottom: '20px',
    },
    formGroup: {
        marginBottom: '15px',
        display: 'flex',
        flexDirection: 'column',
    },
    label: {
        fontWeight: 'bold',
        marginBottom: '5px',
        fontSize: '0.9em',
    },
    input: {
        width: '100%',
        padding: '8px 10px',
        border: '1px solid #ccc',
        borderRadius: '4px',
        boxSizing: 'border-box',
    },
    errorText: {
        color: '#D8000C',
        backgroundColor: '#FFD2D2',
        padding: '10px',
        borderRadius: '4px',
        marginBottom: '15px',
    },
    buttonGroup: {
        marginTop: '20px',
        textAlign: 'right',
        borderTop: '1px solid #eee',
        paddingTop: '15px',
    },
    button: {
        padding: '8px 15px',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        fontWeight: 'bold',
        marginLeft: '10px',
    },
    submitButton: {
        backgroundColor: '#007bff', // Blue
        color: 'white',
    },
    cancelButton: {
        backgroundColor: '#f0f0f0',
        color: '#333',
        border: '1px solid #ccc',
    }
};

export default PositionModal;
//////////////////
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

// Component này bảo vệ 1 route
const ProtectedRoute = ({ children, allowedRoles }) => {
  const { user } = useAuth();
  const location = useLocation();

  // 1. Kiểm tra đã đăng nhập chưa
  if (!user) {
    // Nếu chưa, đá về trang login
    return <Navigate to="/login" state={{ from: location }} replace />;
  }
  
  // 2. Kiểm tra có yêu cầu vai trò (role) không
  if (allowedRoles && !allowedRoles.includes(user.role)) {
    // Nếu có, nhưng user không có vai trò đó, đá về trang "Unauthorized"
    // (Bạn có thể tạo trang /unauthorized)
    console.warn(`User role '${user.role}' not in allowedRoles:`, allowedRoles);
    return <Navigate to="/" replace />; // Tạm thời đá về Dashboard
  }

  // Nếu ổn, cho phép truy cập
  return children;
};

export default ProtectedRoute;
/////////////
// frontend/src/components/ResetPasswordModal.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { motion } from 'framer-motion'; // <-- Thêm import

const ResetPasswordModal = ({ isOpen, onClose, onSuccess, userData }) => {
  const [newPassword, setNewPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (isOpen) {
      setNewPassword('');
      setError('');
    }
  }, [isOpen]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (newPassword.trim().length < 6) {
      setError('Mật khẩu mới phải có ít nhất 6 ký tự.');
      return;
    }
    setLoading(true);
    setError('');
    try {
      await api.put(`/users/${userData.id}/password`, { new_password: newPassword });
      onSuccess();
    } catch (err) {
      setError(err.response?.data?.detail || 'Đặt lại mật khẩu thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen || !userData) return null;

  return (
    <motion.div
      style={styles.overlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        style={styles.modal}
        initial={{ opacity: 0, scale: 0.9, y: -20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: -20 }}
        transition={{ duration: 0.2 }}
        onClick={(e) => e.stopPropagation()}
      >
        <h2 style={styles.header}>Đặt lại mật khẩu cho:</h2>
        <p style={styles.emailText}>{userData.email}</p>

        {error && <p style={styles.errorText}>{error}</p>}

        <form onSubmit={handleSubmit}>
          <div style={styles.formGroup}>
            <label style={styles.label}>Mật khẩu mới:</label>
            <input
              type="password"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              disabled={loading}
              required
              style={styles.input}
              placeholder="Nhập mật khẩu mới (ít nhất 6 ký tự)"
            />
          </div>
          <div style={styles.buttonGroup}>
            <button type="button" onClick={onClose} disabled={loading} style={{...styles.button, ...styles.cancelButton}}>
              Hủy
            </button>
            <button type="submit" disabled={loading} style={{...styles.button, ...styles.submitButton}}>
              {loading ? 'Đang lưu...' : 'Đặt lại mật khẩu'}
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

// --- STYLES (Giống hệt SetRoleModal) ---
const styles = {
  overlay: {
    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex',
    justifyContent: 'center', alignItems: 'center', zIndex: 1000,
  },
  modal: {
    backgroundColor: '#fff', padding: '20px 25px', borderRadius: '8px',
    width: '100%', maxWidth: '450px',
    boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
  },
  header: {
    marginTop: 0,
    marginBottom: '5px',
  },
  emailText: {
    fontSize: '1.1em',
    fontWeight: 'bold',
    color: '#007bff',
    marginTop: '-10px',
    marginBottom: '20px',
    wordBreak: 'break-all',
  },
  formGroup: {
    marginBottom: '15px',
    display: 'flex',
    flexDirection: 'column',
  },
  label: {
    fontWeight: 'bold',
    marginBottom: '5px',
    fontSize: '0.9em',
  },
  input: {
    width: '100%',
    padding: '8px 10px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    boxSizing: 'border-box',
  },
  errorText: {
    color: '#D8000C',
    backgroundColor: '#FFD2D2',
    padding: '10px',
    borderRadius: '4px',
    marginBottom: '15px',
  },
  buttonGroup: {
    marginTop: '20px',
    textAlign: 'right',
    borderTop: '1px solid #eee',
    paddingTop: '15px',
  },
  button: {
    padding: '8px 15px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontWeight: 'bold',
    marginLeft: '10px',
  },
  submitButton: {
    backgroundColor: '#ffc107', // Warning/Yellow
    color: '#333',
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
    color: '#333',
    border: '1px solid #ccc',
  }
};

export default ResetPasswordModal;
////////////////
// frontend/src/components/SetRoleModal.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { motion } from 'framer-motion'; // <-- Thêm import

const ROLES = ["Admin", "HR Manager", "Payroll Manager", "Employee"];

const SetRoleModal = ({ isOpen, onClose, onSuccess, userData }) => {
  const [selectedRole, setSelectedRole] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (userData) {
      setSelectedRole(userData.role);
      setError('');
    }
  }, [userData]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!selectedRole) {
      setError('Vui lòng chọn một vai trò.');
      return;
    }
    setLoading(true);
    setError('');
    try {
      await api.put(`/users/${userData.id}/role`, { role: selectedRole });
      onSuccess();
    } catch (err) {
      setError(err.response?.data?.detail || 'Cập nhật vai trò thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen || !userData) return null;

  return (
    <motion.div
      style={styles.overlay}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      onClick={onClose}
    >
      <motion.div
        style={styles.modal}
        initial={{ opacity: 0, scale: 0.9, y: -20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: -20 }}
        transition={{ duration: 0.2 }}
        onClick={(e) => e.stopPropagation()}
      >
        <h2 style={styles.header}>Đặt vai trò cho:</h2>
        <p style={styles.emailText}>{userData.email}</p>
        
        {error && <p style={styles.errorText}>{error}</p>}
        
        <form onSubmit={handleSubmit}>
          <div style={styles.formGroup}>
            <label style={styles.label}>Vai trò mới:</label>
            <select
              value={selectedRole}
              onChange={(e) => setSelectedRole(e.target.value)}
              disabled={loading}
              required
              style={styles.input}
            >
              {ROLES.map(role => (
                <option key={role} value={role}>{role}</option>
              ))}
            </select>
          </div>
          <div style={styles.buttonGroup}>
            <button type="button" onClick={onClose} disabled={loading} style={{...styles.button, ...styles.cancelButton}}>
              Hủy
            </button>
            <button type="submit" disabled={loading} style={{...styles.button, ...styles.submitButton}}>
              {loading ? 'Đang lưu...' : 'Lưu thay đổi'}
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

// --- STYLES ---
const styles = {
  overlay: {
    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex',
    justifyContent: 'center', alignItems: 'center', zIndex: 1000,
  },
  modal: {
    backgroundColor: '#fff', padding: '20px 25px', borderRadius: '8px',
    width: '100%', maxWidth: '450px',
    boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
  },
  header: {
    marginTop: 0,
    marginBottom: '5px',
  },
  emailText: {
    fontSize: '1.1em',
    fontWeight: 'bold',
    color: '#007bff',
    marginTop: '-10px',
    marginBottom: '20px',
    wordBreak: 'break-all',
  },
  formGroup: {
    marginBottom: '15px',
    display: 'flex',
    flexDirection: 'column',
  },
  label: {
    fontWeight: 'bold',
    marginBottom: '5px',
    fontSize: '0.9em',
  },
  input: {
    width: '100%',
    padding: '8px 10px',
    border: '1px solid #ccc',
    borderRadius: '4px',
    boxSizing: 'border-box',
    background: '#fff',
  },
  errorText: {
    color: '#D8000C',
    backgroundColor: '#FFD2D2',
    padding: '10px',
    borderRadius: '4px',
    marginBottom: '15px',
  },
  buttonGroup: {
    marginTop: '20px',
    textAlign: 'right',
    borderTop: '1px solid #eee',
    paddingTop: '15px',
  },
  button: {
    padding: '8px 15px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontWeight: 'bold',
    marginLeft: '10px',
  },
  submitButton: {
    backgroundColor: '#007bff', // Blue
    color: 'white',
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
    color: '#333',
    border: '1px solid #ccc',
  }
};

export default SetRoleModal;
////////////////
import React, { createContext, useState, useContext } from 'react';
import * as authService from '../services/authService';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(authService.getCurrentUser());

  const handleLogin = async (email, password) => {
    try {
      const loggedInUser = await authService.login(email, password);
      setUser(loggedInUser);
      return loggedInUser;
    } catch (error) {
      setUser(null);
      throw error;
    }
  };

  const handleLogout = () => {
    authService.logout();
    setUser(null);
  };

  const value = {
    user,
    login: handleLogin,
    logout: handleLogout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  return useContext(AuthContext);
};
////////////////
// frontend/src/pages/AdminManagement.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-toastify';

import DepartmentModal from '../components/DepartmentModal';
import PositionModal from '../components/PositionModal';

// --- Skeleton Row ---
const SkeletonRow = ({ columns }) => (
    <tr>
        {Array.from({ length: columns }).map((_, index) => (
            <td key={index} style={styles.tableCell}>
                <div style={styles.skeletonCell} className="skeletonCell"></div>
            </td>
        ))}
    </tr>
);

function AdminManagement() {
    // State cho Phòng ban
    const [departments, setDepartments] = useState([]);
    const [loadingDepts, setLoadingDepts] = useState(true);
    const [isDeptModalOpen, setIsDeptModalOpen] = useState(false);
    const [currentDept, setCurrentDept] = useState(null);
    const [deptSearch, setDeptSearch] = useState('');

    // State cho Chức vụ
    const [positions, setPositions] = useState([]);
    const [loadingPos, setLoadingPos] = useState(true);
    const [isPosModalOpen, setIsPosModalOpen] = useState(false);
    const [currentPos, setCurrentPos] = useState(null);
    const [posSearch, setPosSearch] = useState('');

    const { user } = useAuth();
    const isAdmin = user?.role === 'Admin';
    
    // --- Các hàm FETCH ---
    const fetchDepartments = async () => {
        setLoadingDepts(true);
        try {
            const response = await api.get('/departments/');
            setDepartments(response.data);
        } catch (error) {
            toast.error('Không thể tải danh sách phòng ban.');
        }
        setLoadingDepts(false);
    };

    const fetchPositions = async () => {
        setLoadingPos(true);
        try {
            const response = await api.get('/positions/');
            setPositions(response.data);
        } catch (error) {
            toast.error('Không thể tải danh sách chức vụ.');
        }
        setLoadingPos(false);
    };

    useEffect(() => {
        fetchDepartments();
        fetchPositions();
    }, []);

    // --- Handlers cho Department Modal ---
    const handleOpenDeptModal = (dept = null) => { setCurrentDept(dept); setIsDeptModalOpen(true); };
    const handleCloseDeptModal = () => { setIsDeptModalOpen(false); setCurrentDept(null); };
    const handleDeptSuccess = () => {
        handleCloseDeptModal();
        toast.success("Lưu phòng ban thành công!");
        fetchDepartments();
    };
    const handleDeleteDept = async (deptId, deptName) => {
        if (window.confirm(`Bạn có chắc muốn xóa phòng ban "${deptName}"?\nLưu ý: Không thể xóa nếu có nhân viên thuộc phòng ban này.`)) {
            const toastId = toast.loading("Đang xóa...");
            try {
                await api.delete(`/departments/${deptId}`);
                toast.update(toastId, { render: "Xóa thành công!", type: "success", isLoading: false, autoClose: 2000 });
                fetchDepartments();
            } catch (err) {
                const errorMsg = err.response?.data?.detail || 'Xóa thất bại. Phòng ban có thể đang được gán cho nhân viên.';
                toast.update(toastId, { render: errorMsg, type: "error", isLoading: false, autoClose: 3000 });
            }
        }
    };

    // --- Handlers cho Position Modal ---
    const handleOpenPosModal = (pos = null) => { setCurrentPos(pos); setIsPosModalOpen(true); };
    const handleClosePosModal = () => { setIsPosModalOpen(false); setCurrentPos(null); };
    const handlePosSuccess = () => {
        handleClosePosModal();
        toast.success("Lưu chức vụ thành công!");
        fetchPositions();
    };
    const handleDeletePos = async (posId, posName) => {
        if (window.confirm(`Bạn có chắc muốn xóa chức vụ "${posName}"?\nLưu ý: Không thể xóa nếu có nhân viên giữ chức vụ này.`)) {
            const toastId = toast.loading("Đang xóa...");
            try {
                await api.delete(`/positions/${posId}`);
                toast.update(toastId, { render: "Xóa thành công!", type: "success", isLoading: false, autoClose: 2000 });
                fetchPositions();
            } catch (err) {
                const errorMsg = err.response?.data?.detail || 'Xóa thất bại. Chức vụ có thể đang được gán cho nhân viên.';
                toast.update(toastId, { render: errorMsg, type: "error", isLoading: false, autoClose: 3000 });
            }
        }
    };

    const filteredDepartments = departments.filter(dept =>
        dept.DepartmentName.toLowerCase().includes(deptSearch.toLowerCase())
    );
    const filteredPositions = positions.filter(pos =>
        pos.PositionName.toLowerCase().includes(posSearch.toLowerCase())
    );

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            style={{ padding: '20px', color: 'var(--text-color)' }} // XÓA PADDING, THÊM VAR
        >
            <h1 style={{ color: 'var(--text-color)' }}>Quản lý Tổ chức</h1>
            <div style={styles.container}>
                
                {/* === PHẦN PHÒNG BAN === */}
                <div style={styles.section}>
                    <div style={styles.sectionHeader}>
                        <h2 style={{ color: 'var(--text-color)' }}>Quản lý Phòng ban</h2>
                        {isAdmin && (
                            <button onClick={() => handleOpenDeptModal(null)} style={styles.addButton}>
                                Thêm Phòng ban
                            </button>
                        )}
                    </div>

                    <input
                        type="text"
                        placeholder="Tìm phòng ban..."
                        value={deptSearch}
                        onChange={(e) => setDeptSearch(e.target.value)}
                        style={styles.searchBox}
                        className="search-box-input"
                    />
                    
                    <div style={styles.tableContainer}>
                        <table style={styles.table}>
                            <thead>
                                <tr>
                                    <th style={styles.th}>ID</th>
                                    <th style={styles.th}>Tên Phòng ban</th>
                                    {isAdmin && <th style={{width: '100px', ...styles.th}}>Hành động</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {loadingDepts ? (
                                    Array.from({ length: 5 }).map((_, i) => <SkeletonRow key={i} columns={isAdmin ? 3 : 2} />)
                                ) : (
                                    filteredDepartments.map(dept => (
                                        <tr key={dept.DepartmentID}>
                                            <td style={styles.tableCell}>{dept.DepartmentID}</td>
                                            <td style={styles.tableCell}>{dept.DepartmentName}</td>
                                            {isAdmin && (
                                                <td style={styles.tableCell}>
                                                    <button onClick={() => handleOpenDeptModal(dept)} className="action-button edit-button">Sửa</button>
                                                    <button onClick={() => handleDeleteDept(dept.DepartmentID, dept.DepartmentName)} className="action-button delete-button">Xóa</button>
                                                </td>
                                            )}
                                        </tr>
                                    ))
                                )}
                                {!loadingDepts && filteredDepartments.length === 0 && (
                                    <tr><td colSpan={isAdmin ? 3 : 2} style={styles.emptyCell}>Không tìm thấy phòng ban nào.</td></tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>

                {/* === PHẦN CHỨC VỤ === */}
                <div style={styles.section}>
                    <div style={styles.sectionHeader}>
                        <h2 style={{ color: 'var(--text-color)' }}>Quản lý Chức vụ</h2>
                        {isAdmin && (
                            <button onClick={() => handleOpenPosModal(null)} style={styles.addButton}>
                                Thêm Chức vụ
                            </button>
                        )}
                    </div>

                    <input
                        type="text"
                        placeholder="Tìm chức vụ..."
                        value={posSearch}
                        onChange={(e) => setPosSearch(e.target.value)}
                        style={styles.searchBox}
                        className="search-box-input"
                    />

                    <div style={styles.tableContainer}>
                        <table style={styles.table}>
                            <thead>
                                <tr>
                                    <th style={styles.th}>ID</th>
                                    <th style={styles.th}>Tên Chức vụ</th>
                                    {isAdmin && <th style={{width: '100px', ...styles.th}}>Hành động</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {loadingPos ? (
                                    Array.from({ length: 5 }).map((_, i) => <SkeletonRow key={i} columns={isAdmin ? 3 : 2} />)
                                ) : (
                                    filteredPositions.map(pos => (
                                        <tr key={pos.PositionID}>
                                            <td style={styles.tableCell}>{pos.PositionID}</td>
                                            <td style={styles.tableCell}>{pos.PositionName}</td>
                                            {isAdmin && (
                                                <td style={styles.tableCell}>
                                                    <button onClick={() => handleOpenPosModal(pos)} className="action-button edit-button">Sửa</button>
                                                    <button onClick={() => handleDeletePos(pos.PositionID, pos.PositionName)} className="action-button delete-button">Xóa</button>
                                                </td>
                                            )}
                                        </tr>
                                    ))
                                )}
                                {!loadingPos && filteredPositions.length === 0 && (
                                    <tr><td colSpan={isAdmin ? 3 : 2} style={styles.emptyCell}>Không tìm thấy chức vụ nào.</td></tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>

                {/* === CÁC MODAL (Dùng AnimatePresence) === */}
                <AnimatePresence>
                    {isDeptModalOpen && (
                        <DepartmentModal
                            isOpen={isDeptModalOpen}
                            onClose={handleCloseDeptModal}
                            onSuccess={handleDeptSuccess}
                            departmentData={currentDept}
                        />
                    )}
                    {isPosModalOpen && (
                        <PositionModal
                            isOpen={isPosModalOpen}
                            onClose={handleClosePosModal}
                            onSuccess={handlePosSuccess}
                            positionData={currentPos}
                        />
                    )}
                </AnimatePresence>
            </div>
        </motion.div>
    );
}

// --- STYLES ĐÃ CẬP NHẬT ---
const styles = {
    container: {
        display: 'flex',
        flexWrap: 'wrap',
        gap: '20px',
    },
    section: {
        flex: 1,
        minWidth: '400px',
        backgroundColor: 'var(--card-bg)', // Dùng var
        border: '1px solid var(--border-color)', // Dùng var
        padding: '15px 20px',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
    },
    sectionHeader: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        borderBottom: '1px solid var(--border-color)', // Dùng var
        paddingBottom: '10px',
        marginBottom: '15px',
    },
    addButton: { // Giữ màu semantic
        padding: '5px 10px',
        cursor: 'pointer',
        backgroundColor: '#28a745',
        color: 'white',
        border: 'none',
        borderRadius: '4px',
        fontSize: '0.9em',
    },
    searchBox: {
        marginBottom: '15px',
        padding: '8px 10px',
        width: 'calc(100% - 22px)',
        border: '1px solid var(--input-border-color)', // Dùng var
        backgroundColor: 'var(--input-bg)', // Dùng var
        color: 'var(--text-color)', // Dùng var
        borderRadius: '4px',
    },
    tableContainer: {
        overflowX: 'auto',
    },
    table: {
        width: '100%',
        borderCollapse: 'collapse',
        fontSize: '0.9em',
    },
    th: { // Thêm style cho TH
        padding: '8px 10px',
        borderBottom: '2px solid var(--table-border-color)', // Dùng var
        backgroundColor: 'var(--table-header-bg)', // Dùng var
        color: 'var(--text-color)', // Dùng var
        textAlign: 'left'
    },
    tableCell: {
        padding: '8px 10px',
        borderBottom: '1px solid var(--table-row-border-color)', // Dùng var
        verticalAlign: 'middle',
        color: 'var(--text-color)', // Dùng var
    },
    emptyCell: {
        textAlign: 'center',
        padding: '20px',
        color: 'var(--text-color-secondary)', // Dùng var
    },
    skeletonCell: {
        height: '20px',
        backgroundColor: '#e0e0e0', // Màu cơ bản
        borderRadius: '4px',
        animation: 'pulse 1.5s infinite ease-in-out',
    }
};

// --- CSS ĐỘNG ĐÃ CẬP NHẬT ---
(function() {
    const styleId = 'admin-management-styles';
    if (document.getElementById(styleId)) {
        document.getElementById(styleId).remove();
    }
    const styleSheet = document.createElement("style");
    styleSheet.id = styleId;
    styleSheet.type = "text/css";
    styleSheet.innerText = `
        @keyframes pulse {
            0% { background-color: #e0e0e0; }
            50% { background-color: #f0f0f0; }
            100% { background-color: #e0e0e0; }
        }
        /* Dark skeleton */
        body.theme-dark .skeletonCell {
            background-color: #333;
            opacity: 0.5;
            animation-name: pulse-dark;
        }
        @keyframes pulse-dark {
            0%{background-color:#333;opacity:.5}
            50%{background-color:#444;opacity:.7}
            100%{background-color:#333;opacity:.5}
        }

        .action-button {
            padding: 3px 6px; margin-right: 4px; border-radius: 3px;
            border: 1px solid var(--border-color); /* Dùng var */
            background-color: var(--button-bg); /* Dùng var */
            color: var(--button-text); /* Dùng var */
            cursor: pointer; font-size: 0.9em;
            transition: background-color 0.2s, border-color 0.2s;
        }
        .action-button:hover {
            border-color: #aaa;
            background-color: var(--border-color) !important; /* Dùng var */
        }
        /* Giữ màu semantic */
        .edit-button:hover { background-color: #fffbe6 !important; border-color: #ffe58f !important; }
        .delete-button { color: #ff4d4f; }
        .delete-button:hover { background-color: #fff1f0 !important; border-color: #ffa39e !important; }

        /* Thêm focus cho searchbox */
        .search-box-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
            outline: none;
        }
    `;
    document.head.appendChild(styleSheet);
})();

export default AdminManagement;
///////////////
// frontend/src/pages/Dashboard.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';
import EmployeeDeptChart from '../components/charts/EmployeeDeptChart';
import AvgSalaryChart from '../components/charts/AvgSalaryChart';
import { motion } from 'framer-motion';
import { toast } from 'react-toastify';

// --- Skeleton Components (Đã đổi tên) ---
const SkeletonStatCard = () => (
    <div style={styles.skeletonCard} >
        <div style={styles.skeletonTextLarge} className="skeleton-text-large"></div>
        <div style={styles.skeletonTextSmall} className="skeleton-text-small"></div>
    </div>
);
const SkeletonChartCard = () => (
    <div style={styles.skeletonChart} className="skeleton-chart"></div>
);

function Dashboard() {
    const { user } = useAuth();
    const [stats, setStats] = useState({ totalEmployees: null, totalSalaryBudget: null, unreadAlerts: null });
    const [chartData, setChartData] = useState({ distributionByDept: {}, avgSalaryByDept: {} });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const isDarkMode = document.body.classList.contains('theme-dark');

    useEffect(() => {
        // Add custom styles
        const styleId = 'dashboard-styles';
        if (!document.getElementById(styleId)) {
            const styleSheet = document.createElement("style");
            styleSheet.id = styleId;
            styleSheet.type = "text/css";
            styleSheet.innerText = `
                .stat-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 8px 15px rgba(0,0,0,0.1) !important;
                }
                @keyframes pulse {
                    0% { background-color: #e0e0e0; opacity: 0.6; }
                    50% { background-color: #f0f0f0; opacity: 0.8; }
                    100% { background-color: #e0e0e0; opacity: 0.6; }
                }
                body.theme-dark .skeleton-text-large,
                body.theme-dark .skeleton-text-small,
                body.theme-dark .skeleton-chart {
                    background-color: #333;
                    opacity: 0.5;
                    animation-name: pulse-dark;
                }
                 @keyframes pulse-dark {
                    0% { background-color: #333; opacity: 0.5; }
                    50% { background-color: #444; opacity: 0.7; }
                    100% { background-color: #333; opacity: 0.5; }
                }
            `;
            document.head.appendChild(styleSheet);
        }

        const fetchDashboardData = async () => {
            setLoading(true);
            setError('');
            try {
                // Fetch all data concurrently
                const [hrRes, payrollRes, unreadCountRes] = await Promise.all([
                    api.get('/reports/hr_summary'),
                    api.get('/reports/payroll_summary'),
                    api.get('/notifications/unread-count') // Fetch unread notifications count
                ]);

                setStats({
                    totalEmployees: hrRes.data.total_employees,
                    totalSalaryBudget: payrollRes.data.total_salary_budget,
                    unreadAlerts: unreadCountRes.data,
                });

                setChartData({
                    distributionByDept: hrRes.data.distribution_by_dept,
                    avgSalaryByDept: payrollRes.data.avg_salary_by_dept,
                });

            } catch (err) {
                console.error("Failed to fetch dashboard data", err);
                setError('Không thể tải dữ liệu dashboard.');
                // Chỉ toast lỗi chính, bỏ qua lỗi unread-count nếu có
                if (!err.config?.url?.includes('unread-count')) {
                     toast.error('Không thể tải dữ liệu dashboard.');
                }
                // Giả lập dữ liệu 0 cho card thông báo nếu API lỗi
                setStats(prev => ({...prev, unreadAlerts: 0}));
            } finally {
                setLoading(false);
            }
        };

        fetchDashboardData();
    }, []);

    const barColor1 = isDarkMode ? '#6A7FAB' : '#8884d8';
    const barColor2 = isDarkMode ? '#77BFA3' : '#82ca9d';
    const textColor = isDarkMode ? 'var(--text-color-secondary)' : '#666';

    const formatCurrency = (value) => {
        if (typeof value !== 'number') return 'N/A'; // Xử lý null/undefined
        return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);
    };

    return (
        <div style={styles.dashboardContainer}>
            <div style={styles.welcomeMessage}>
                {/* Dùng CSS Vars */}
                <h2 style={{ color: 'var(--text-color)' }}>Chào mừng quay trở lại, {user?.email}!</h2>
                <p style={{ color: 'var(--text-color-secondary)' }}>Tổng quan hệ thống nhân sự và lương.</p>
            </div>

            {error && <p style={{ color: 'red' }}>{error}</p>}

            <div style={styles.statsGrid}>
                {loading ? (
                    <> <SkeletonStatCard /> <SkeletonStatCard /> <SkeletonStatCard /> </>
                ) : (
                    <>
                        <Link to="/employees" style={{ textDecoration: 'none' }}>
                            <motion.div style={styles.statCard} className="stat-card" whileHover={{ y: -5 }}>
                                <div style={styles.statValue}>{stats.totalEmployees ?? 'N/A'}</div>
                                <div style={styles.statLabel}>Tổng số nhân viên</div>
                            </motion.div>
                        </Link>
                        <Link to="/payroll" style={{ textDecoration: 'none' }}>
                            <motion.div style={styles.statCard} className="stat-card" whileHover={{ y: -5 }}>
                                <div style={styles.statValue}> {formatCurrency(stats.totalSalaryBudget)} </div>
                                <div style={styles.statLabel}>Tổng lương tháng</div>
                            </motion.div>
                        </Link>
                        <Link to="/" style={{ textDecoration: 'none' }}>
                             <motion.div
                                style={stats.unreadAlerts > 0 ? {...styles.statCard, ...styles.statCardAlert} : styles.statCard}
                                className="stat-card"
                                whileHover={{ y: -5 }}
                             >
                                <div style={styles.statValue}>{stats.unreadAlerts ?? 'N/A'}</div>
                                <div style={styles.statLabel}>Cảnh báo/Thông báo mới</div>
                            </motion.div>
                        </Link>
                    </>
                )}
            </div>

            <div style={styles.chartsGrid}>
                {loading ? (
                    <> <SkeletonChartCard /> <SkeletonChartCard /> </>
                ) : (
                    <>
                        <motion.div style={styles.chartContainer} whileHover={{ boxShadow: 'var(--hover-shadow)' }}>
                            <EmployeeDeptChart data={chartData.distributionByDept} barColor={barColor1} textColor={textColor} />
                        </motion.div>
                        <motion.div style={styles.chartContainer} whileHover={{ boxShadow: 'var(--hover-shadow)' }}>
                            <AvgSalaryChart data={chartData.avgSalaryByDept} barColor={barColor2} textColor={textColor} />
                        </motion.div>
                    </>
                )}
            </div>
        </div>
    );
}

// --- STYLES ĐÃ CẬP NHẬT (Sử dụng CSS Vars) ---
const styles = {
    dashboardContainer: { padding: '20px' },
    welcomeMessage: { marginBottom: '30px', paddingBottom: '15px', borderBottom: '1px solid var(--border-color)' },
    statsGrid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(220px, 1fr))', gap: '20px', marginBottom: '30px' },
    statCard: {
        backgroundColor: 'var(--card-bg)', padding: '20px', borderRadius: '8px',
        boxShadow: '0 2px 5px rgba(0,0,0,0.05)', textAlign: 'center',
        transition: 'transform 0.2s ease, box-shadow 0.2s ease', cursor: 'pointer',
        borderLeft: '5px solid var(--primary-color)', // Dùng màu primary
    },
    statCardAlert: { borderLeft: '5px solid #ff4d4f' }, // Giữ màu đỏ cho Cảnh báo
    statValue: { fontSize: '2.2rem', fontWeight: 'bold', color: 'var(--text-color)', margin: '10px 0' },
    statLabel: { fontSize: '0.9rem', color: 'var(--text-color-secondary)' },
    chartsGrid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', gap: '30px' },
    chartContainer: {
        backgroundColor: 'var(--card-bg)', padding: '20px', borderRadius: '8px',
        boxShadow: '0 2px 5px rgba(0,0,0,0.05)', transition: 'box-shadow 0.2s ease',
        border: '1px solid var(--border-color)', // Thêm border
    },
    // --- Skeleton styles ---
    skeletonCard: { backgroundColor: 'var(--card-bg)', border: '1px solid var(--border-color)', padding: '20px', borderRadius: '8px', height: '120px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' },
    skeletonTextLarge: { height: '35px', width: '60%', backgroundColor: '#e0e0e0', borderRadius: '4px', marginBottom: '15px', animation: 'pulse 1.5s infinite ease-in-out' },
    skeletonTextSmall: { height: '15px', width: '80%', backgroundColor: '#e0e0e0', borderRadius: '4px', animation: 'pulse 1.5s infinite ease-in-out' },
    skeletonChart: { backgroundColor: 'var(--card-bg)', border: '1px solid var(--border-color)', padding: '20px', borderRadius: '8px', height: '340px', animation: 'pulse 1.5s infinite ease-in-out' }
};

export default Dashboard;
////////////////
// frontend/src/pages/Departments.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';

// Component Modal dùng chung cho Thêm/Sửa
const DepartmentModal = ({ isOpen, onClose, onSuccess, departmentData }) => {
  const [name, setName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const isEditMode = !!departmentData;

  useEffect(() => {
    setName(isEditMode ? departmentData.DepartmentName : '');
    setError('');
  }, [isOpen, departmentData, isEditMode]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim()) { setError('Tên phòng ban không được để trống.'); return; }
    setLoading(true); setError('');
    try {
      if (isEditMode) {
        await api.put(`/departments/${departmentData.DepartmentID}`, { DepartmentName: name });
      } else {
        await api.post('/departments/', { DepartmentName: name });
      }
      onSuccess();
    } catch (err) {
      setError(err.response?.data?.detail || 'Lưu thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div style={styles.overlay}>
      <div style={styles.modal}>
        <h2>{isEditMode ? 'Sửa Phòng ban' : 'Thêm Phòng ban mới'}</h2>
        {error && <p style={{ color: 'red' }}>{error}</p>}
        <form onSubmit={handleSubmit}>
          <div style={styles.formGroup}>
            <label>Tên Phòng ban:</label>
            <input type="text" value={name} onChange={(e) => setName(e.target.value)} disabled={loading} style={{ width: '95%', padding: '8px' }} required />
          </div>
          <div style={styles.buttonGroup}>
            <button type="submit" disabled={loading}>{loading ? 'Đang lưu...' : (isEditMode ? 'Lưu thay đổi' : 'Thêm mới')}</button>
            <button type="button" onClick={onClose} disabled={loading} style={{ marginLeft: '10px' }}>Hủy</button>
          </div>
        </form>
      </div>
    </div>
  );
};

// Component trang chính
function Departments() {
  const [departments, setDepartments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { user } = useAuth();
  const isAdmin = user?.role === 'Admin';

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentItem, setCurrentItem] = useState(null);

  const fetchData = async () => {
    setLoading(true); setError('');
    try {
      const response = await api.get('/departments/');
      setDepartments(response.data);
    } catch (err) {
      setError('Không thể tải danh sách phòng ban.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { fetchData(); }, []);

  const handleOpenModal = (dept = null) => { setCurrentItem(dept); setIsModalOpen(true); };
  const handleCloseModal = () => { setIsModalOpen(false); setCurrentItem(null); };
  const handleSuccess = () => { handleCloseModal(); fetchData(); };

  const handleDelete = async (deptId, deptName) => {
    if (window.confirm(`Bạn có chắc muốn xóa phòng ban "${deptName}" không?`)) {
      setError('');
      try {
        await api.delete(`/departments/${deptId}`);
        fetchData();
      } catch (err) {
        setError(err.response?.data?.detail || 'Xóa thất bại. Phòng ban có thể đang được gán cho nhân viên.');
      }
    }
  };

  if (loading && departments.length === 0) return <p>Đang tải...</p>;

  return (
    <div>
      <h2>Quản lý Phòng ban</h2>
      {error && <p style={{ color: 'red', border: '1px solid red', padding: '10px' }}>{error}</p>}
      {isAdmin && <button onClick={() => handleOpenModal(null)} style={{ margin: '10px 0' }}>Thêm Phòng ban mới</button>}
      <table border="1" cellPadding="10" style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead>
          <tr>
            <th>ID</th>
            <th>Tên Phòng ban</th>
            {isAdmin && <th>Hành động</th>}
          </tr>
        </thead>
        <tbody>
          {departments.map(dept => (
            <tr key={dept.DepartmentID}>
              <td>{dept.DepartmentID}</td>
              <td>{dept.DepartmentName}</td>
              {isAdmin && (
                <td>
                  <button onClick={() => handleOpenModal(dept)} style={{ marginRight: '5px' }}>Sửa</button>
                  <button onClick={() => handleDelete(dept.DepartmentID, dept.DepartmentName)} style={{ color: 'red' }}>Xóa</button>
                </td>
              )}
            </tr>
          ))}
          {departments.length === 0 && !loading && (
             <tr><td colSpan={isAdmin ? 3 : 2} style={{textAlign: 'center'}}>Không có phòng ban nào.</td></tr>
          )}
        </tbody>
      </table>
      <DepartmentModal isOpen={isModalOpen} onClose={handleCloseModal} onSuccess={handleSuccess} departmentData={currentItem} />
    </div>
  );
}

const styles = {
  overlay: { position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 },
  modal: { backgroundColor: '#fff', padding: '25px', borderRadius: '8px', minWidth: '400px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)' },
  formGroup: { marginBottom: '15px' },
  buttonGroup: { marginTop: '20px', textAlign: 'right' }
};

export default Departments;
///////////////////
// frontend/src/pages/EmployeeDetail.js
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';
import { AnimatePresence } from 'framer-motion';
import { toast } from 'react-toastify';

// Import các modal
import EditEmployeeModal from '../components/EditEmployeeModal';
import SetRoleModal from '../components/SetRoleModal';
import ResetPasswordModal from '../components/ResetPasswordModal';

// --- Skeleton Component ---
const SkeletonProfile = () => (
    // Đã thêm padding 20px cho Skeleton để nhất quán
    <div style={styles.skeletonContainer}>
        <div style={styles.skeletonCard}>
            <div style={{ ...styles.skeletonItem, height: '60px', width: '60px', borderRadius: '50%', margin: '0 auto 15px auto' }} className="skeletonItem"></div>
            <div style={{ ...styles.skeletonItem, height: '24px', width: '70%', margin: '0 auto 10px auto' }} className="skeletonItem"></div>
            <div style={{ ...styles.skeletonItem, height: '18px', width: '50%', margin: '0 auto 20px auto' }} className="skeletonItem"></div>
            <div style={{ ...styles.skeletonItem, height: '16px', width: '90%', margin: '0 auto 5px auto' }} className="skeletonItem"></div>
            <div style={{ ...styles.skeletonItem, height: '16px', width: '90%', margin: '0 auto 20px auto' }} className="skeletonItem"></div>
            <div style={{ ...styles.skeletonItem, height: '30px', width: '100%', margin: '5px auto' }} className="skeletonItem"></div>
        </div>
        <div style={styles.skeletonDetails}>
            <div style={styles.skeletonInfoCard}>
                <div style={{ ...styles.skeletonItem, height: '20px', width: '40%', marginBottom: '20px' }} className="skeletonItem"></div>
                <div style={{ ...styles.skeletonItem, height: '16px', width: '90%', marginBottom: '10px' }} className="skeletonItem"></div>
                <div style={{ ...styles.skeletonItem, height: '16px', width: '80%', marginBottom: '10px' }} className="skeletonItem"></div>
                <div style={{ ...styles.skeletonItem, height: '16px', width: '85%', marginBottom: '10px' }} className="skeletonItem"></div>
            </div>
            <div style={styles.skeletonInfoCard}>
                <div style={{ ...styles.skeletonItem, height: '20px', width: '50%', marginBottom: '20px' }} className="skeletonItem"></div>
                <div style={{ ...styles.skeletonItem, height: '40px', width: '100%', marginBottom: '10px' }} className="skeletonItem"></div>
                <div style={{ ...styles.skeletonItem, height: '40px', width: '100%', marginBottom: '10px' }} className="skeletonItem"></div>
            </div>
        </div>
    </div>
);


function EmployeeDetail() {
    const [profile, setProfile] = useState(null);
    const [loading, setLoading] = useState(true);
    const { id } = useParams();
    const navigate = useNavigate();
    const { user: currentUser } = useAuth();
    const isAdmin = currentUser?.role === 'Admin';
    const isHrManager = currentUser?.role === 'HR Manager';

    // State quản lý Modals
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [isRoleModalOpen, setIsRoleModalOpen] = useState(false);
    const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);

    const fetchProfile = useCallback(async () => {
        setLoading(true);
        try {
            const response = await api.get(`/employees/${id}`);
            setProfile(response.data);
        } catch (error) {
            console.error('Failed to fetch employee profile', error);
            toast.error("Không thể tải hồ sơ nhân viên.");
            if (error.response?.status === 403) {
                navigate("/");
            }
        }
        setLoading(false);
    }, [id, navigate]);

    useEffect(() => {
        fetchProfile();
    }, [id, fetchProfile]);

    // --- Modal Handlers ---
    const handleOpenEditModal = () => setIsEditModalOpen(true);
    const handleCloseEditModal = () => setIsEditModalOpen(false);
    const handleUpdateSuccess = () => {
        handleCloseEditModal();
        toast.success("Cập nhật thông tin (HR) thành công!");
        fetchProfile();
    };

    const handleOpenRoleModal = () => setIsRoleModalOpen(true);
    const handleCloseRoleModal = () => setIsRoleModalOpen(false);
    const handleRoleUpdateSuccess = () => {
        handleCloseRoleModal();
        toast.success("Cập nhật vai trò thành công!");
        fetchProfile();
    };

    const handleOpenPasswordModal = () => setIsPasswordModalOpen(true);
    const handleClosePasswordModal = () => setIsPasswordModalOpen(false);
    const handlePasswordResetSuccess = () => {
        handleClosePasswordModal();
        toast.success(`Đã đặt lại mật khẩu cho ${profile?.Email}.`);
    };

    // --- Render Logic ---
    if (loading) return <SkeletonProfile />;
    if (!profile) return <p>Không tìm thấy nhân viên.</p>;

    const userDataForModal = profile.auth_user_id ? {
        id: profile.auth_user_id,
        email: profile.Email,
        role: profile.role
    } : null;

    return (
        <div style={styles.pageContainer}>
            <Link to="/employees" style={styles.backLink}>{"<"} Quay lại Danh sách</Link>

            <div style={styles.layoutGrid}>
                {/* === CỘT TRÁI: PROFILE CARD & ACTIONS === */}
                <div style={styles.profileCard}>
                    <h2 style={{ marginTop: 0, color: 'var(--text-color)' }}>{profile.FullName}</h2>
                    <p style={styles.profilePosition}>{profile.position?.PositionName || 'Chưa có chức vụ'}</p>

                    <div style={styles.profileInfoItem}>
                        <span style={styles.infoLabel}>Email (Tài khoản):</span>
                        <span>{profile.Email}</span>
                    </div>
                    <div style={styles.profileInfoItem}>
                        <span style={styles.infoLabel}>Vai trò (Auth):</span>
                        <span style={styles.roleBadge}>{profile.role || 'Chưa có TK'}</span>
                    </div>
                    <div style={styles.profileInfoItem}>
                        <span style={styles.infoLabel}>SĐT:</span>
                        <span>{profile.PhoneNumber || 'Chưa cập nhật'}</span>
                    </div>

                    <hr style={styles.divider} />

                    <h4 style={{ color: 'var(--text-color)' }}>Hành động</h4>
                    <div style={styles.actionButtonsContainer}>
                        {(isAdmin || isHrManager) && (
                            <button onClick={handleOpenEditModal} className="action-button-profile edit-button-profile">
                                Sửa thông tin (HR)
                            </button>
                        )}
                        {isAdmin && userDataForModal && currentUser?.email !== profile.Email && (
                            <>
                                <button onClick={handleOpenRoleModal} className="action-button-profile role-button-profile">
                                    Đặt vai trò (Auth)
                                </button>
                                <button onClick={handleOpenPasswordModal} className="action-button-profile password-button-profile">
                                    Đặt lại mật khẩu
                                </button>
                            </>
                        )}
                        {isAdmin && !userDataForModal && (
                            <p style={styles.annotation}>(Nhân viên chưa có tài khoản Auth)</p>
                        )}
                    </div>
                </div>

                {/* === CỘT PHẢI: DETAILS (HR & PAYROLL) === */}
                <div style={styles.detailsContainer}>
                    <div style={styles.infoCard}>
                        <h3 style={{ color: 'var(--text-color)' }}>Thông tin Hành chính (HR DB)</h3>
                        <div style={styles.infoGrid}>
                            <div><strong>Phòng ban:</strong> {profile.department?.DepartmentName}</div>
                            <div><strong>Trạng thái:</strong> {profile.Status}</div>
                            <div><strong>Ngày vào làm:</strong> {profile.HireDate}</div>
                            <div><strong>Ngày sinh:</strong> {profile.DateOfBirth}</div>
                            <div><strong>Giới tính:</strong> {profile.Gender}</div>
                            <div><strong>ID (HR):</strong> {profile.EmployeeID}</div>
                        </div>
                    </div>

                    <div style={styles.infoCard}>
                        <h3 style={{ color: 'var(--text-color)' }}>Lịch sử Lương (Payroll DB)</h3>
                        <div style={styles.tableWrapper}>
                            <table style={styles.table}>
                                <thead>
                                    <tr>
                                        <th style={styles.th}>Tháng</th>
                                        <th style={styles.th}>Lương CB</th>
                                        <th style={styles.th}>Thưởng</th>
                                        <th style={styles.th}>Khấu trừ</th>
                                        <th style={styles.th}>Thực nhận</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {profile.salaries.map(s => (
                                        <tr key={s.SalaryID}>
                                            <td style={styles.td}>{s.SalaryMonth}</td>
                                            <td style={styles.td}>{s.BaseSalary}</td>
                                            <td style={styles.td}>{s.Bonus}</td>
                                            <td style={styles.td}>{s.Deductions}</td>
                                            <td style={styles.td}><strong>{s.NetSalary}</strong></td>
                                        </tr>
                                    ))}
                                    {profile.salaries.length === 0 && (
                                        <tr><td colSpan={5} style={{ ...styles.td, textAlign: 'center' }}>Không có dữ liệu lương.</td></tr>
                                    )}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div style={styles.infoCard}>
                        <h3 style={{ color: 'var(--text-color)' }}>Lịch sử Chấm công (Payroll DB)</h3>
                        <div style={styles.tableWrapper}>
                            <table style={styles.table}>
                                <thead>
                                    <tr>
                                        <th style={styles.th}>Tháng</th>
                                        <th style={styles.th}>Ngày làm việc</th>
                                        <th style={styles.th}>Vắng mặt</th>
                                        <th style={styles.th}>Nghỉ phép</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {profile.attendances.map(a => (
                                        <tr key={a.AttendanceID}>
                                            <td style={styles.td}>{a.AttendanceMonth}</td>
                                            <td style={styles.td}>{a.WorkDays}</td>
                                            <td style={styles.td}>{a.AbsentDays}</td>
                                            <td style={styles.td}>{a.LeaveDays}</td>
                                        </tr>
                                    ))}
                                    {profile.attendances.length === 0 && (
                                        <tr><td colSpan={4} style={{ ...styles.td, textAlign: 'center' }}>Không có dữ liệu chấm công.</td></tr>
                                    )}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            {/* === MODALS === */}
            <AnimatePresence>
                {isEditModalOpen && (
                    <EditEmployeeModal
                        isOpen={isEditModalOpen}
                        onClose={handleCloseEditModal}
                        onSuccess={handleUpdateSuccess}
                        employeeData={profile}
                    />
                )}
                {isRoleModalOpen && userDataForModal && (
                    <SetRoleModal
                        isOpen={isRoleModalOpen}
                        onClose={handleCloseRoleModal}
                        onSuccess={handleRoleUpdateSuccess}
                        userData={userDataForModal}
                    />
                )}
                {isPasswordModalOpen && userDataForModal && (
                    <ResetPasswordModal
                        isOpen={isPasswordModalOpen}
                        onClose={handleClosePasswordModal}
                        onSuccess={handlePasswordResetSuccess}
                        userData={userDataForModal}
                    />
                )}
            </AnimatePresence>
        </div>
    );
}

// --- STYLES ĐÃ CẬP NHẬT ---
const styles = {
    pageContainer: {
        padding: '20px', // FIX: Thêm padding 20px giống Dashboard.js
        color: 'var(--text-color)'
    },
    backLink: {
        display: 'inline-block',
        marginBottom: '15px',
        color: 'var(--primary-color)',
        textDecoration: 'none',
        fontWeight: 'bold',
    },
    layoutGrid: {
        display: 'flex',
        flexDirection: 'row',
        gap: '20px',
        flexWrap: 'wrap',
    },
    // Cột trái
    profileCard: {
        flex: 1,
        minWidth: '300px',
        padding: '20px',
        backgroundColor: 'var(--card-bg)',
        border: '1px solid var(--border-color)',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
        alignSelf: 'flex-start',
    },
    profilePosition: {
        fontSize: '1.1em',
        color: 'var(--text-color-secondary)',
        marginTop: '-10px',
    },
    profileInfoItem: {
        display: 'flex',
        justifyContent: 'space-between',
        marginBottom: '10px',
        fontSize: '0.9em',
    },
    infoLabel: {
        fontWeight: 'bold',
        color: 'var(--text-color)',
    },
    roleBadge: {
        padding: '2px 8px',
        backgroundColor: '#e6f7ff',
        border: '1px solid #91d5ff',
        borderRadius: '10px',
        color: '#096dd9',
        fontWeight: 'bold',
    },
    divider: {
        border: 'none',
        borderTop: '1px solid var(--table-row-border-color)',
        margin: '20px 0',
    },
    actionButtonsContainer: {
        display: 'flex',
        flexDirection: 'column',
        gap: '10px',
    },
    annotation: { fontSize: '0.8em', color: 'var(--text-color-secondary)', fontStyle: 'italic' },
    // Cột phải
    detailsContainer: {
        flex: 2,
        minWidth: '400px',
        display: 'flex',
        flexDirection: 'column',
        gap: '20px',
    },
    infoCard: {
        padding: '20px',
        backgroundColor: 'var(--card-bg)',
        border: '1px solid var(--border-color)',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
    },
    infoGrid: {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
        gap: '10px',
        color: 'var(--text-color)',
    },
    tableWrapper: {
        overflowX: 'auto',
    },
    table: {
        width: '100%',
        borderCollapse: 'collapse',
        color: 'var(--text-color)',
    },
    th: {
        padding: '10px',
        textAlign: 'left',
        backgroundColor: 'var(--table-header-bg)',
        borderBottom: '2px solid var(--table-border-color)',
        color: 'var(--text-color)',
    },
    td: {
        padding: '10px',
        borderBottom: '1px solid var(--table-row-border-color)',
        color: 'var(--text-color)',
    },

    // Skeleton Styles
    skeletonContainer: {
        display: 'flex',
        gap: '20px',
        padding: '20px', // FIX: Thêm padding 20px
        flexWrap: 'wrap', // Thêm wrap cho responsive
    },
    skeletonCard: {
        flex: 1, minWidth: '300px', padding: '20px',
        backgroundColor: 'var(--card-bg)',
        border: '1px solid var(--border-color)',
        borderRadius: '8px',
        alignSelf: 'flex-start',
    },
    skeletonDetails: {
        flex: 2, minWidth: '400px', display: 'flex', flexDirection: 'column', gap: '20px',
    },
    skeletonInfoCard: {
        padding: '20px',
        backgroundColor: 'var(--card-bg)',
        border: '1px solid var(--border-color)',
        borderRadius: '8px',
    },
    skeletonItem: {
        backgroundColor: '#e0e0e0',
        borderRadius: '4px',
        animation: 'pulse 1.5s infinite ease-in-out',
    }
};

// CSS Động (Thêm dark mode cho skeleton)
(function () {
    const styleId = 'employee-detail-styles';
    if (!document.getElementById(styleId)) {
        const styleSheet = document.createElement("style");
        styleSheet.id = styleId;
        styleSheet.type = "text/css";
        styleSheet.innerText = `
            @keyframes pulse {
                0% { background-color: #e0e0e0; }
                50% { background-color: #f0f0f0; }
                100% { background-color: #e0e0e0; }
            }
             /* Dark mode skeleton adjustment */
             body.theme-dark .skeletonItem {
                 background-color: #333;
                 opacity: 0.5;
                 animation-name: pulse-dark;
             }
             @keyframes pulse-dark {
                 0% { background-color: #333; opacity: 0.5; }
                 50% { background-color: #444; opacity: 0.7; }
                 100% { background-color: #333; opacity: 0.5; }
             }

             /* Profile Card Action Buttons */
             .action-button-profile {
                 padding: 8px 12px; border: 1px solid var(--border-color);
                 border-radius: 4px; cursor: pointer; font-weight: bold;
                 transition: background-color 0.2s, border-color 0.2s;
                 background-color: var(--button-bg); color: var(--button-text);
                 text-align: center;
             }
             /* Giữ màu semantic */
             .edit-button-profile { background-color: #fffbe6; border-color: #ffe58f; color: #d46b08; }
             .role-button-profile { background-color: #f6ffed; border-color: #b7eb8f; color: #389e0d; }
             .password-button-profile { background-color: #fff0f6; border-color: #ffadd2; color: #c41d7f; }

             .edit-button-profile:hover { background-color: #ffe58f !important; }
             .role-button-profile:hover { background-color: #d9f7be !important; }
             .password-button-profile:hover { background-color: #ffadd2 !important; }
        `;
        document.head.appendChild(styleSheet);
    }
})();

export default EmployeeDetail;
/////////////////
// frontend/src/pages/EmployeeList.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AddEmployeeModal from '../components/AddEmployeeModal';
import EditEmployeeModal from '../components/EditEmployeeModal';
import { useAuth } from '../context/AuthContext';
import { toast } from 'react-toastify';
import { AnimatePresence } from 'framer-motion';

const STATUS_OPTIONS = ["Đang làm việc", "Nghỉ phép", "Thử việc", "Thực tập"];

// --- Skeleton Row Component ---
const SkeletonRow = ({ columns }) => (
    <tr>
        {Array.from({ length: columns }).map((_, index) => (
            <td key={index} style={styles.tableCell}>
                <div style={styles.skeletonCell} className="skeletonCell"></div>
            </td>
        ))}
    </tr>
);

function EmployeeList() {
    const [employees, setEmployees] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    const { user: currentUser } = useAuth();
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({ departmentId: '', positionId: '', status: '' });
    const [departments, setDepartments] = useState([]);
    const [positions, setPositions] = useState([]);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [employeeToEdit, setEmployeeToEdit] = useState(null);
    const isAdmin = currentUser?.role === 'Admin';
    const isHrManager = currentUser?.role === 'HR Manager';

    // --- fetchEmployees ---
    const fetchEmployees = useCallback(async (currentSearchTerm = searchTerm, currentFilters = filters) => {
        setLoading(true);
        try {
            const params = {
                search: currentSearchTerm,
                department_id: currentFilters.departmentId || undefined,
                position_id: currentFilters.positionId || undefined,
                status: currentFilters.status || undefined,
            };
            const response = await api.get('/employees/', { params });
            setEmployees(response.data);
        } catch (err) {
            console.error('Failed to fetch employees', err);
            toast.error('Không thể tải danh sách nhân viên.');
        } finally {
            setLoading(false);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); 

    // --- useEffect to load initial data ---
    useEffect(() => {
        const fetchFilterData = async () => {
             setLoading(true);
             setEmployees([]);
            try {
                const [deptRes, posRes] = await Promise.all([
                    api.get('/departments/'),
                    api.get('/positions/')
                ]);
                setDepartments(deptRes.data);
                setPositions(posRes.data);
                await fetchEmployees('', { departmentId: '', positionId: '', status: '' });
            } catch (err) {
                console.error("Failed to load initial data", err);
                toast.error("Không thể tải dữ liệu bộ lọc hoặc nhân viên.");
                setLoading(false);
            }
        };
        fetchFilterData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // --- useEffect để fetch khi filter thay đổi (debounce) ---
    const debounceTimeout = useRef(null);
    useEffect(() => {
        if (debounceTimeout.current) {
            clearTimeout(debounceTimeout.current);
        }
        debounceTimeout.current = setTimeout(() => {
            fetchEmployees(searchTerm, filters);
        }, 500);

        return () => {
            if (debounceTimeout.current) {
                clearTimeout(debounceTimeout.current);
            }
        };
    }, [searchTerm, filters, fetchEmployees]);


    // --- Filter Handlers ---
    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
    };
     const handleSearchChange = (e) => {
         setSearchTerm(e.target.value);
    };
    const handleClearFilters = () => {
        setSearchTerm('');
        setFilters({ departmentId: '', positionId: '', status: '' });
    };

    // --- Modal Handlers ---
    const handleViewDetails = (id) => navigate(`/employees/${id}`);
    const handleOpenAddModal = () => setIsAddModalOpen(true);
    const handleCloseAddModal = () => setIsAddModalOpen(false);
    const handleAddSuccess = () => { handleCloseAddModal(); toast.success("Thêm nhân viên thành công!"); fetchEmployees(searchTerm, filters); };
    const handleOpenEditModal = (employee) => { setEmployeeToEdit(employee); setIsEditModalOpen(true); };
    const handleCloseEditModal = () => { setEmployeeToEdit(null); setIsEditModalOpen(false); };
    const handleUpdateSuccess = () => { handleCloseEditModal(); toast.success("Cập nhật thông tin thành công!"); fetchEmployees(searchTerm, filters); };
    const handleDeleteEmployee = async (employeeId, employeeName) => {
        if (window.confirm(`Xóa "${employeeName}" (ID: ${employeeId})? Hành động này cũng xóa tài khoản liên kết (nếu có).`)) {
            const toastId = toast.loading("Đang xóa nhân viên...");
            try {
                await api.delete(`/employees/${employeeId}`);
                toast.update(toastId, { render: "Xóa nhân viên thành công!", type: "success", isLoading: false, autoClose: 2000 });
                fetchEmployees(searchTerm, filters);
            } catch (err) {
                console.error('Failed to delete employee', err);
                const errorMsg = err.response?.data?.detail || `Xóa nhân viên "${employeeName}" thất bại.`;
                toast.update(toastId, { render: errorMsg, type: "error", isLoading: false, autoClose: 3000 });
            }
        }
    };

    // --- Render Logic ---
    return (
        // FIX: Sửa padding từ '0px' thành '20px'
        <div style={{ padding: '20px', color: 'var(--text-color)' }}> 
            <h2 style={{ color: 'var(--text-color)' }}>Quản lý Nhân viên</h2>
            
            <div style={styles.filterForm}>
                 <div style={styles.filterGrid}>
                     <div style={styles.filterItem}>
                         <label style={styles.filterLabel}>Tìm kiếm chung</label>
                         <input type="text" placeholder="ID, tên..." value={searchTerm} onChange={handleSearchChange} style={styles.filterInput} className="filter-input" />
                     </div>
                     <div style={styles.filterItem}>
                         <label style={styles.filterLabel}>Phòng ban</label>
                         <select name="departmentId" value={filters.departmentId} onChange={handleFilterChange} style={styles.filterSelect} className="filter-select">
                             <option value="">Tất cả phòng ban</option>
                             {departments.map(d => <option key={d.DepartmentID} value={d.DepartmentID}>{d.DepartmentName}</option>)}
                         </select>
                     </div>
                     <div style={styles.filterItem}>
                         <label style={styles.filterLabel}>Chức vụ</label>
                         <select name="positionId" value={filters.positionId} onChange={handleFilterChange} style={styles.filterSelect} className="filter-select">
                             <option value="">Tất cả chức vụ</option>
                             {positions.map(p => <option key={p.PositionID} value={p.PositionID}>{p.PositionName}</option>)}
                         </select>
                     </div>
                     <div style={styles.filterItem}>
                         <label style={styles.filterLabel}>Trạng thái</label>
                         <select name="status" value={filters.status} onChange={handleFilterChange} style={styles.filterSelect} className="filter-select">
                             <option value="">Tất cả trạng thái</option>
                             {STATUS_OPTIONS.map(s => <option key={s} value={s}>{s}</option>)}
                         </select>
                     </div>
                     <div style={{ ...styles.filterItem, alignSelf: 'flex-end' }}>
                         <button type="button" onClick={handleClearFilters} disabled={loading} style={{ ...styles.filterButtonClear }} className="filterButtonClear">
                             Xóa bộ lọc
                         </button>
                     </div>
                 </div>
            </div>

            {(isAdmin || isHrManager) && (
                <button onClick={handleOpenAddModal} style={styles.addButton} disabled={loading}>
                    Thêm Nhân viên mới
                </button>
            )}

            <div style={styles.tableContainer}>
                <table style={styles.table}>
                    <thead>
                        <tr>
                            <th>ID (HR)</th>
                            <th>Họ tên</th>
                            <th>Email</th>
                            <th>Phòng ban</th>
                            <th>Chức vụ</th>
                            <th>Trạng thái</th>
                            <th>Vai trò (Auth)</th>
                            <th style={{minWidth: isAdmin ? '160px' : '100px'}}>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        {loading ? (
                            Array.from({ length: 8 }).map((_, index) => <SkeletonRow key={index} columns={8} />)
                        ) : employees.length > 0 ? (
                            employees.map(emp => (
                                <tr key={emp.EmployeeID}>
                                    <td style={styles.tableCell}>{emp.EmployeeID}</td>
                                    <td style={styles.tableCell}>{emp.FullName}</td>
                                    <td style={styles.tableCell}>{emp.Email}</td>
                                    <td style={styles.tableCell}>{emp.department?.DepartmentName || 'N/A'}</td>
                                    <td style={styles.tableCell}>{emp.position?.PositionName || 'N/A'}</td>
                                    <td style={styles.tableCell}>{emp.Status}</td>
                                    <td style={styles.tableCell}>{emp.role || '-'}</td>
                                    <td style={styles.tableCellActions}>
                                        <button onClick={() => handleViewDetails(emp.EmployeeID)} className="action-button view-button">Xem</button>
                                        {(isAdmin || isHrManager) && ( <button onClick={() => handleOpenEditModal(emp)} className="action-button edit-button">Sửa</button> )}
                                        {isAdmin && (
                                            <button onClick={() => handleDeleteEmployee(emp.EmployeeID, emp.FullName)} className="action-button delete-button">Xóa</button>
                                        )}
                                        {isAdmin && !emp.auth_user_id && ( <span style={{...styles.annotation, color: 'orange'}}>(Chưa có TK)</span> )}
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr><td colSpan="8" style={{ textAlign: 'center', padding: '20px', color: 'var(--text-color-secondary)' }}>Không tìm thấy nhân viên nào.</td></tr>
                        )}
                    </tbody>
                </table>
            </div>

            {/* Modals */}
            <AnimatePresence>
                {isAddModalOpen && <AddEmployeeModal isOpen={isAddModalOpen} onClose={handleCloseAddModal} onSuccess={handleAddSuccess} />}
                {isEditModalOpen && employeeToEdit && <EditEmployeeModal isOpen={isEditModalOpen} onClose={handleCloseEditModal} onSuccess={handleUpdateSuccess} employeeData={employeeToEdit} />}
            </AnimatePresence>
        </div>
    );
}

// --- STYLES ĐÃ CẬP NHẬT ---
const styles = {
    filterForm: { marginBottom: '20px', padding: '15px', border: '1px solid var(--border-color)', borderRadius: '5px', background: 'var(--card-bg)' }, // Dùng var
    filterGrid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px' },
    filterItem: { display: 'flex', flexDirection: 'column' },
    filterLabel: { marginBottom: '5px', fontSize: '0.85em', fontWeight: 'bold', color: 'var(--text-color-secondary)' }, // Dùng var
    filterInput: { padding: '8px 10px', border: '1px solid var(--input-border-color)', borderRadius: '4px', width: '100%', boxSizing: 'border-box', backgroundColor: 'var(--input-bg)', color: 'var(--text-color)' }, // Dùng var
    filterSelect: { padding: '8px 10px', border: '1px solid var(--input-border-color)', borderRadius: '4px', width: '100%', boxSizing: 'border-box', background: 'var(--input-bg)', color: 'var(--text-color)' }, // Dùng var
    filterButtonClear: {
        padding: '8px 15px', cursor: 'pointer', border: '1px solid var(--border-color)',
        backgroundColor: 'var(--button-bg)', color: 'var(--button-text)', // Dùng var
        borderRadius: '4px', transition: 'background-color 0.2s', whiteSpace: 'nowrap'
    },
    addButton: { marginBottom: '15px', padding: '8px 15px', cursor: 'pointer', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '4px' }, // Giữ màu xanh
    tableContainer: { 
        overflowX: 'auto', marginTop: '15px', 
        backgroundColor: 'var(--card-bg)', // Dùng var
        border: '1px solid var(--table-border-color)', // Dùng var
        borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
    },
    table: {
        width: '100%', borderCollapse: 'collapse', fontSize: '0.9em', minWidth: '900px',
        // Bỏ border ở đây, để tableContainer xử lý
    },
    tableCell: { padding: '8px 10px', borderBottom: '1px solid var(--table-row-border-color)', borderRight: '1px solid var(--table-row-border-color)', verticalAlign: 'middle', whiteSpace: 'nowrap', color: 'var(--text-color)'}, // Dùng var
    tableCellActions: { padding: '5px 8px', borderBottom: '1px solid var(--table-row-border-color)', borderRight: '1px solid var(--table-row-border-color)', whiteSpace: 'nowrap', textAlign: 'left', color: 'var(--text-color)' }, // Dùng var
    skeletonCell: { height: '20px', backgroundColor: '#e0e0e0', borderRadius: '4px', animation: 'pulse 1.5s infinite ease-in-out' },
    annotation: { fontSize: '0.8em', color: 'var(--text-color-secondary)', marginLeft: '5px', display: 'inline-block' } // Dùng var
};

// --- CSS ĐỘNG ĐÃ CẬP NHẬT ---
const customEmployeeListStyles = `
    @keyframes pulse {
        0% { background-color: #e0e0e0; }
        50% { background-color: #f0f0f0; }
        100% { background-color: #e0e0e0; }
    }
    /* Dark skeleton */
    body.theme-dark .skeletonCell {
        background-color: #333;
        opacity: 0.5;
        animation-name: pulse-dark;
    }
    @keyframes pulse-dark {
        0%{background-color:#333;opacity:.5}
        50%{background-color:#444;opacity:.7}
        100%{background-color:#333;opacity:.5}
    }

    /* Action buttons */
    .action-button {
        padding: 3px 6px; margin-right: 4px; margin-bottom: 3px; border-radius: 3px;
        border: 1px solid var(--border-color); background-color: var(--button-bg); color: var(--button-text); /* Dùng var */
        cursor: pointer; font-size: 0.8em; transition: background-color 0.2s, border-color 0.2s; white-space: nowrap;
    }
    .action-button:hover {
        border-color: #aaa;
        background-color: var(--border-color) !important; /* Dùng var */
    }

    /* Giữ màu semantic */
    .view-button:hover { background-color: #e6f7ff !important; border-color: #91d5ff !important; }
    .edit-button:hover { background-color: #fffbe6 !important; border-color: #ffe58f !important; }
    .delete-button { color: #ff4d4f; }
    .delete-button:hover { background-color: #fff1f0 !important; border-color: #ffa39e !important; }

    /* Focus styles */
    .filter-input:focus, .filter-select:focus {
         border-color: var(--primary-color); /* Dùng var */
         box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
         outline: none;
    }
    /* Clear button hover */
    .filterButtonClear:hover {
        background-color: var(--border-color) !important; /* Dùng var */
    }

    /* Table head */
    thead th {
        background-color: var(--table-header-bg); color: var(--text-color); /* Dùng var */
        text-align: left; padding: 10px 12px;
        border-bottom: 2px solid var(--table-border-color); border-right: 1px solid var(--table-border-color); /* Dùng var */
    }
    thead th:last-child, tbody tr td:last-child {
        border-right: none;
    }
`;

(function() {
    const styleId = 'employee-list-styles';
    if (document.getElementById(styleId)) {
        document.getElementById(styleId).remove(); // Xóa style cũ nếu có
    }
    const styleSheet = document.createElement("style");
    styleSheet.id = styleId;
    styleSheet.type = "text/css";
    styleSheet.innerText = customEmployeeListStyles;
    document.head.appendChild(styleSheet);
})();

export default EmployeeList;
/////////////////
import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate, useLocation } from 'react-router-dom';
import { motion } from 'framer-motion'; // Import motion for animations

// --- Icons (Keep these) ---
const UserIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"> <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path> <circle cx="12" cy="7" r="4"></circle> </svg>
);
const LockIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"> <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect> <path d="M7 11V7a5 5 0 0 1 10 0v4"></path> </svg>
);
// Optional: Add a decorative graphic/icon for the info panel
const InfoGraphicIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round" style={{ opacity: 0.5, marginBottom: '20px' }}>
        <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
        <circle cx="8.5" cy="7" r="4"></circle>
        <polyline points="17 11 19 13 23 9"></polyline> {/* Added checkmark element */}
        <line x1="17" y1="16" x2="17" y2="17"></line> {/* Subtle details */}
        <line x1="19" y1="16" x2="19" y2="17"></line>
    </svg>
);


function Login() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const auth = useAuth();
    const navigate = useNavigate();
    const location = useLocation();

    const from = location.state?.from?.pathname || '/';

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setLoading(true);
        try {
            await auth.login(email, password);
            navigate(from, { replace: true });
        } catch (err) {
            setError('Đăng nhập thất bại. Vui lòng kiểm tra lại thông tin.'); // Shorter error
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    // Inject CSS into <head> (Keep this mechanism for now)
    useEffect(() => {
        const styleId = 'login-page-styles';
        let styleSheet = document.getElementById(styleId);
        if (!styleSheet) {
            styleSheet = document.createElement("style");
            styleSheet.id = styleId;
            styleSheet.type = "text/css";
            document.head.appendChild(styleSheet);
        }
        // Use updated customStyles string
        styleSheet.innerText = customStyles;
    }, []);

    return (
        <div style={styles.container}>
            {/* Animated background element */}
            <div style={styles.backgroundGradient}></div>

            <motion.div // Wrap login box for entry animation
                style={styles.loginBox}
                initial={{ opacity: 0, scale: 0.95, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                transition={{ duration: 0.5, ease: "easeOut" }}
            >
                {/* --- Info Column (Left) --- */}
                <div style={styles.infoPanel} className="info-panel"> {/* Added class for media query */}
                    <InfoGraphicIcon />
                    <h1 style={styles.infoTitle}>HRM Dashboard</h1>
                    <p style={styles.infoSubtitle}>Giải pháp tích hợp quản lý nhân sự & lương bổng.</p>
                </div>

                {/* --- Form Column (Right) --- */}
                <div style={styles.formPanel}>
                    <h2 style={styles.formTitle}>Đăng nhập</h2> {/* Shorter title */}
                    <form onSubmit={handleSubmit}>
                        <div style={styles.inputGroup}>
                            <span style={styles.inputIcon}><UserIcon /></span>
                            <input
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                required
                                placeholder="Email" // Simpler placeholder
                                style={styles.input}
                                className="login-input"
                                aria-label="Email"
                            />
                        </div>
                        <div style={styles.inputGroup}>
                             <span style={styles.inputIcon}><LockIcon /></span>
                            <input
                                type="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                required
                                placeholder="Mật khẩu"
                                style={styles.input}
                                className="login-input"
                                aria-label="Password"
                            />
                        </div>

                        {/* Error Message with subtle animation possibility */}
                        {error && (
                            <motion.p
                                style={styles.errorText}
                                role="alert"
                                initial={{ opacity: 0, y: -10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ duration: 0.3 }}
                            >
                                {error}
                            </motion.p>
                        )}

                        <button
                            type="submit"
                            disabled={loading}
                            style={loading ? {...styles.button, ...styles.buttonDisabled} : styles.button}
                            className="login-button"
                        >
                            {loading ? (
                                <>
                                    <span style={styles.spinner} aria-hidden="true"></span>
                                    Đang xử lý...
                                </>
                            ) : (
                                'Đăng nhập'
                            )}
                        </button>
                    </form>
                     {/* Optional: Add "Forgot Password?" link later */}
                     {/* <p style={styles.forgotPassword}>Quên mật khẩu?</p> */}
                </div>
            </motion.div>
             <footer style={styles.footer}>
                 Phát triển bởi Lâm Chu Bảo Toàn
                 <span>&nbsp;&nbsp;|&nbsp;&nbsp;</span> {/* Separator */}
                 © 2025 HRM Dashboard
             </footer>
        </div>
    );
}

// --- CSS-in-JS Styles (Refined) ---
const styles = {
    container: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        minHeight: '100vh',
        // Background handled by pseudo-element or separate div
        fontFamily: "'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif", // Modern font stack
        position: 'relative',
        overflow: 'hidden',
        padding: '20px', // Add padding for smaller screens
    },
    // Animated background
    backgroundGradient: {
        position: 'absolute',
        top: 0, left: 0, right: 0, bottom: 0,
        background: 'linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab)',
        backgroundSize: '400% 400%',
        animation: 'gradientBG 15s ease infinite',
        zIndex: 0,
    },
    loginBox: {
        display: 'flex',
        width: '850px', // Slightly narrower
        maxWidth: '100%', // Ensure it fits mobile view when stacked
        minHeight: '500px', // Min height
        backgroundColor: 'rgba(255, 255, 255, 0.98)', // Slightly transparent white
        backdropFilter: 'blur(5px)', // Blur background behind box (subtle effect)
        borderRadius: '16px', // More rounded
        boxShadow: '0 15px 40px rgba(0, 0, 0, 0.15)', // Softer, larger shadow
        overflow: 'hidden',
        zIndex: 1,
    },
    infoPanel: {
        flex: 1.2, // Give slightly more space to info panel
        padding: '60px 40px',
        background: 'linear-gradient(145deg, #1A2980 0%, #26D0CE 100%)', // New gradient
        color: 'white',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center', // Center content vertically and horizontally
        textAlign: 'center',
    },
    infoTitle: {
        fontSize: '2.5rem',
        fontWeight: 700, // Bolder
        marginBottom: '10px',
        textShadow: '1px 1px 4px rgba(0,0,0,0.3)',
    },
    infoSubtitle: {
        fontSize: '1.1rem',
        opacity: '0.9',
        lineHeight: 1.6,
        maxWidth: '300px', // Limit width for better readability
    },
    formPanel: {
        flex: 1, // Slightly less space than info panel
        padding: '50px 50px', // Equal padding
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        backgroundColor: '#fff', // Solid white for form area
    },
    formTitle: {
        fontSize: '1.8rem',
        color: '#2d3748', // Darker grey
        fontWeight: 600, // Semi-bold
        marginBottom: '40px',
        textAlign: 'center',
    },
    inputGroup: {
        position: 'relative',
        marginBottom: '20px',
    },
    input: {
        width: '100%',
        padding: '12px 15px 12px 45px', // Adjusted padding
        border: '1px solid #e2e8f0', // Lighter border
        borderRadius: '8px', // More rounding
        fontSize: '1rem',
        color: '#2d3748',
        backgroundColor: '#f7fafc', // Very light input background
        transition: 'border-color 0.2s ease, box-shadow 0.2s ease',
        boxSizing: 'border-box',
    },
    inputIcon: {
        position: 'absolute',
        top: '50%',
        left: '15px',
        transform: 'translateY(-50%)',
        color: '#a0aec0', // Lighter icon color
        pointerEvents: 'none',
        lineHeight: 0, // Ensure icon vertical alignment
    },
    errorText: {
        color: '#e53e3e', // Red error color
        backgroundColor: '#fed7d7', // Light red background
        border: '1px solid #fbb6b6',
        padding: '10px 15px',
        borderRadius: '8px',
        textAlign: 'center',
        marginBottom: '20px',
        fontSize: '0.9rem',
    },
    button: {
        width: '100%',
        padding: '12px',
        border: 'none',
        borderRadius: '8px',
        // Use a gradient for the button
        background: 'linear-gradient(90deg, #1A2980 0%, #26D0CE 100%)',
        color: 'white',
        fontSize: '1.05rem', // Slightly adjusted size
        fontWeight: 600,
        cursor: 'pointer',
        transition: 'opacity 0.2s ease, box-shadow 0.2s ease, transform 0.1s ease',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: '15px',
        boxShadow: '0 4px 10px rgba(0, 0, 0, 0.1)',
    },
    buttonDisabled: {
        opacity: 0.6, // Use opacity for disabled state
        cursor: 'not-allowed',
        boxShadow: 'none',
    },
    footer: {
        position: 'absolute',
        bottom: '20px',
        color: '#a0aec0', // Lighter footer text
        fontSize: '0.85rem',
        textAlign: 'center',
        width: '100%',
        zIndex: 0,
    },
    spinner: {
        display: 'inline-block',
        width: '16px',
        height: '16px',
        border: '3px solid rgba(255, 255, 255, 0.3)',
        borderTopColor: '#fff',
        borderRadius: '50%',
        animation: 'spin 0.8s linear infinite',
        marginRight: '10px',
    },
    forgotPassword: { // Style for potential forgot password link
        textAlign: 'right',
        marginTop: '10px',
        fontSize: '0.9rem',
        color: '#4a5568', // Grey link color
        cursor: 'pointer',
    }
};

// --- Dynamic CSS rules (Refined) ---
const customStyles = `
    /* Background Gradient Animation */
    @keyframes gradientBG {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }

    /* Input focus effect */
    .login-input:focus {
        border-color: #26D0CE; /* Use accent color */
        background-color: #fff; // White background on focus
        box-shadow: 0 0 0 3px rgba(38, 208, 206, 0.2);
        outline: none;
    }

    /* Button hover/active effects */
    .login-button:hover:not(:disabled) {
        opacity: 0.9;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        /* transform: translateY(-1px); */ /* Optional subtle lift */
    }
    .login-button:active:not(:disabled) {
        opacity: 1;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transform: translateY(1px); /* Press down effect */
    }

    /* Spinner animation */
    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* Responsive adjustments */
    @media (max-width: 800px) {
        .login-box {
            flex-direction: column; /* Stack vertically */
            width: auto; /* Adjust width */
            max-width: 450px; /* Max width for stacked form */
            height: auto; /* Auto height */
            margin: 20px; /* Add margin */
        }
        .info-panel {
            display: none; /* Hide info panel on small screens */
        }
        .form-panel {
            padding: 40px 30px; /* Adjust padding */
        }
    }
`;

export default Login;
///////////////
// frontend/src/pages/PayrollManagement.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import api from '../services/api';
import EditSalaryModal from '../components/EditSalaryModal';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-toastify';

// --- Skeleton cho Bảng tìm kiếm ---
const SkeletonSearchRow = () => (
    <tr>
        <td style={styles.thTd}><div style={styles.skeletonCell} className="skeletonCell"></div></td>
        <td style={styles.thTd}><div style={styles.skeletonCell} className="skeletonCell"></div></td>
        <td style={styles.thTd}><div style={styles.skeletonCell} className="skeletonCell"></div></td>
        <td style={styles.thTd}><div style={styles.skeletonCell} className="skeletonCell"></div></td>
        <td style={styles.thTd}><div style={styles.skeletonCell} className="skeletonCell"></div></td>
    </tr>
);

// --- Skeleton cho Hồ sơ chi tiết ---
const SkeletonProfile = () => (
    <div style={styles.profileSection}>
        <h3><div style={{...styles.skeletonCell, height: '24px', width: '60%'}} className="skeletonCell"></div></h3>
        <h4 style={{marginTop: '20px', color: 'var(--text-color)'}}>Lịch sử Lương (PAYROLL)</h4>
        <div style={{...styles.skeletonCell, height: '100px', width: '100%'}} className="skeletonCell"></div>
        <h4 style={{ marginTop: '20px', color: 'var(--text-color)' }}>Lịch sử Chấm công (PAYROLL)</h4>
        <div style={{...styles.skeletonCell, height: '60px', width: '100%'}} className="skeletonCell"></div>
    </div>
);

function PayrollManagement() {
    const [searchTerm, setSearchTerm] = useState('');
    const [departmentId, setDepartmentId] = useState('');
    const [departments, setDepartments] = useState([]);
    const [searchResults, setSearchResults] = useState([]);
    const [loadingSearch, setLoadingSearch] = useState(false);
    
    const [selectedProfile, setSelectedProfile] = useState(null);
    const [loadingProfile, setLoadingProfile] = useState(false);
    
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [salaryToEdit, setSalaryToEdit] = useState(null);

    const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(searchTerm);

    const fetchEmployees = useCallback(async (search = '', deptId = '') => {
        setLoadingSearch(true);
        setSelectedProfile(null);
        setSearchResults([]); 
        try {
            const params = {
                search: search,
                department_id: deptId || undefined,
            };
            const response = await api.get('/employees/', { params });
            setSearchResults(response.data);
            if (response.data.length === 0 && (search || deptId)) {
                toast.info('Không tìm thấy nhân viên nào khớp với bộ lọc.');
            }
        } catch (err) {
            console.error('Fetch failed', err);
            toast.error('Tải danh sách thất bại, vui lòng thử lại.');
        }
        setLoadingSearch(false);
    }, []);

    // --- Tải dữ liệu ban đầu (Phòng ban + DS Nhân viên) ---
    useEffect(() => {
        const loadInitialData = async () => {
            setLoadingSearch(true);
            try {
                const deptRes = await api.get('/departments/');
                setDepartments(deptRes.data);
                const empRes = await api.get('/employees/');
                setSearchResults(empRes.data);
            } catch (error) {
                toast.error("Không thể tải dữ liệu khởi tạo.");
            } finally {
                setLoadingSearch(false);
            }
        };
        loadInitialData();
    }, []);

    // --- useEffect để debounce searchTerm ---
    useEffect(() => {
        const handler = setTimeout(() => {
            setDebouncedSearchTerm(searchTerm);
        }, 500); 

        return () => {
            clearTimeout(handler);
        };
    }, [searchTerm]);

    // --- useEffect để tự động fetch khi filter thay đổi ---
    const isFirstRun = useRef(true);
    useEffect(() => {
        if (isFirstRun.current) {
            isFirstRun.current = false;
            return;
        }
        
        fetchEmployees(debouncedSearchTerm, departmentId);
    }, [debouncedSearchTerm, departmentId, fetchEmployees]);

    const handleClearFilters = () => {
        setSearchTerm('');
        setDepartmentId('');
    };

    const fetchEmployeeProfile = async (employeeId) => {
        setLoadingProfile(true);
        setSelectedProfile(null); 
        
        try {
            const response = await api.get(`/employees/${employeeId}`);
            setSelectedProfile(response.data);
            setSearchResults([]); 
            setSearchTerm(''); 
            setDepartmentId('');
        } catch (err) {
            console.error('Failed to fetch profile', err);
            toast.error('Không thể tải hồ sơ chi tiết của nhân viên này.');
        }
        setLoadingProfile(false);
    };

    const handleOpenModal = (salaryRecord) => {
        setSalaryToEdit(salaryRecord);
        setIsModalOpen(true);
    };
    
    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSalaryToEdit(null);
    };

    const handleUpdateSuccess = () => {
        handleCloseModal();
        toast.success("Cập nhật lương thành công!");
        if (selectedProfile) {
            fetchEmployeeProfile(selectedProfile.EmployeeID);
        }
    };

    const handleBackToList = () => {
         setSelectedProfile(null);
         fetchEmployees(searchTerm, departmentId);
    }

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            // FIX: Sửa padding từ '0px' thành '20px'
            style={{ padding: '20px', color: 'var(--text-color)' }}
        >
            <h2 style={{ color: 'var(--text-color)' }}>Quản lý Bảng lương & Chấm công (Từ PAYROLL)</h2>

            {/* --- PHẦN 1: TÌM KIẾM VÀ LỌC --- */}
            <AnimatePresence initial={false}>
                {!selectedProfile && !loadingProfile && (
                    <motion.div
                        style={styles.searchSection}
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto', transition: { duration: 0.3 } }}
                        exit={{ opacity: 0, height: 0, transition: { duration: 0.2 } }}
                    >
                        <div style={styles.filterGrid}>
                            <div style={styles.filterItem}>
                                <label style={styles.filterLabel}>Tìm kiếm (ID, Tên...)</label>
                                <input
                                    type="text"
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    style={styles.filterInput}
                                    className="filter-input"
                                    placeholder="Nhập thông tin..."
                                />
                            </div>
                            <div style={styles.filterItem}>
                                <label style={styles.filterLabel}>Lọc theo Phòng ban</label>
                                <select
                                    value={departmentId}
                                    onChange={(e) => setDepartmentId(e.target.value)}
                                    style={styles.filterSelect}
                                    className="filter-select"
                                >
                                    <option value="">Tất cả phòng ban</option>
                                    {departments.map(dept => (
                                        <option key={dept.DepartmentID} value={dept.DepartmentID}>
                                            {dept.DepartmentName}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div style={{ ...styles.filterItem, alignSelf: 'flex-end' }}>
                                <button 
                                    type="button" 
                                    onClick={handleClearFilters} 
                                    disabled={loadingSearch} 
                                    style={{ ...styles.button, ...styles.cancelButton, marginLeft: 0 }}
                                    className="filter-clear-button" // Thêm class để CSS
                                >
                                    Xóa bộ lọc
                                </button>
                            </div>
                        </div>

                        {/* Bảng kết quả tìm kiếm */}
                        <div style={styles.tableContainer}>
                            <table style={styles.resultsTable}>
                                <thead>
                                    <tr style={styles.header}>
                                        <th style={styles.thTd}>ID</th>
                                        <th style={styles.thTd}>Họ tên</th>
                                        <th style={styles.thTd}>Email</th>
                                        <th style={styles.thTd}>Phòng ban</th>
                                        <th style={styles.thTd}>Hành động</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {loadingSearch ? (
                                        Array.from({ length: 5 }).map((_, i) => <SkeletonSearchRow key={i} />)
                                    ) : searchResults.length > 0 ? (
                                        searchResults.map(emp => (
                                            <tr key={emp.EmployeeID}>
                                                <td style={styles.thTd}>{emp.EmployeeID}</td>
                                                <td style={styles.thTd}>{emp.FullName}</td>
                                                <td style={styles.thTd}>{emp.Email}</td>
                                                <td style={styles.thTd}>{emp.department?.DepartmentName || 'N/A'}</td>
                                                <td style={styles.thTd}>
                                                    <button onClick={() => fetchEmployeeProfile(emp.EmployeeID)} disabled={loadingProfile} className="action-button view-button">
                                                        Xem Lương
                                                    </button>
                                                </td>
                                            </tr>
                                        ))
                                    ) : (
                                        <tr><td colSpan={5} style={styles.emptyCell}>Không tìm thấy nhân viên.</td></tr>
                                    )}
                                </tbody>
                            </table>
                        </div>
                    </motion.div>
                )}
            </AnimatePresence>

            {/* --- PHẦN 2: HIỂN THỊ HỒ SƠ LƯƠNG & CHẤM CÔNG --- */}
            {loadingProfile && <SkeletonProfile />}
            
            {!loadingProfile && selectedProfile && (
                <motion.div
                    style={styles.profileSection}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                >
                    <button style={styles.backLink} onClick={handleBackToList}>
                        {"<"} Quay lại danh sách
                    </button>
                    <h3 style={{ color: 'var(--text-color)' }}>Hồ sơ Lương & Chấm công của: {selectedProfile.FullName} (ID: {selectedProfile.EmployeeID})</h3>
                    
                    <h4 style={{ color: 'var(--text-color)', marginTop: '20px' }}>Lịch sử Lương (PAYROLL)</h4>
                    <div style={styles.tableContainer}>
                        <table style={styles.salaryTable}>
                            <thead>
                                <tr style={styles.header}>
                                    <th style={styles.thTd}>Tháng</th>
                                    <th style={styles.thTd}>Lương CB</th>
                                    <th style={styles.thTd}>Thưởng</th>
                                    <th style={styles.thTd}>Khấu trừ</th>
                                    <th style={styles.thTd}>Thực nhận</th>
                                    <th style={styles.thTd}>Hành động</th>
                                </tr>
                            </thead>
                            <tbody>
                                {selectedProfile.salaries.map(s => (
                                    <tr key={s.SalaryID}>
                                        <td style={styles.thTd}>{s.SalaryMonth}</td>
                                        <td style={styles.thTd}>{s.BaseSalary}</td>
                                        <td style={styles.thTd}>{s.Bonus}</td>
                                        <td style={styles.thTd}>{s.Deductions}</td>
                                        <td style={styles.thTd}><strong>{s.NetSalary}</strong></td>
                                        <td style={styles.thTd}>
                                            <button onClick={() => handleOpenModal(s)} className="action-button edit-button">Sửa</button>
                                        </td>
                                    </tr>
                                ))}
                                {selectedProfile.salaries.length === 0 && (
                                    <tr><td colSpan={6} style={styles.emptyCell}>Không có dữ liệu lương.</td></tr>
                                )}
                            </tbody>
                        </table>
                    </div>

                    <h4 style={{ color: 'var(--text-color)', marginTop: '20px' }}>Lịch sử Chấm công (PAYROLL)</h4>
                    <div style={styles.tableContainer}>
                        <table style={styles.salaryTable}>
                            <thead>
                                <tr style={styles.header}>
                                    <th style={styles.thTd}>Tháng</th>
                                    <th style={styles.thTd}>Ngày làm việc</th>
                                    <th style={styles.thTd}>Vắng mặt</th>
                                    <th style={styles.thTd}>Nghỉ phép</th>
                                </tr>
                            </thead>
                            <tbody>
                                {selectedProfile.attendances.map(a => (
                                    <tr key={a.AttendanceID}>
                                        <td style={styles.thTd}>{a.AttendanceMonth}</td>
                                        <td style={styles.thTd}>{a.WorkDays}</td>
                                        <td style={styles.thTd}>{a.AbsentDays}</td>
                                        <td style={styles.thTd}>{a.LeaveDays}</td>
                                    </tr>
                                ))}
                                {selectedProfile.attendances.length === 0 && (
                                    <tr><td colSpan={4} style={styles.emptyCell}>Không có dữ liệu chấm công.</td></tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </motion.div>
            )}

            {/* --- PHẦN 3: MODAL CHỈNH SỬA (DÙNG AnimatePresence) --- */}
            <AnimatePresence>
                {isModalOpen && (
                    <EditSalaryModal
                        isOpen={isModalOpen}
                        onClose={handleCloseModal}
                        onSuccess={handleUpdateSuccess}
                        salaryData={salaryToEdit}
                    />
                )}
            </AnimatePresence>
        </motion.div>
    );
}

// --- STYLES ĐÃ CẬP NHẬT ---
const styles = {
    searchSection: {
        marginBottom: '20px', padding: '15px',
        border: '1px solid var(--border-color)', // Dùng var
        borderRadius: '8px',
        background: 'var(--card-bg)', // Dùng var
        overflow: 'hidden',
    },
    filterGrid: {
        display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
        gap: '15px', alignItems: 'flex-end',
    },
    filterItem: { display: 'flex', flexDirection: 'column' },
    filterLabel: { marginBottom: '5px', fontSize: '0.85em', fontWeight: 'bold', color: 'var(--text-color-secondary)' }, // Dùng var
    filterInput: { padding: '8px 10px', border: '1px solid var(--input-border-color)', borderRadius: '4px', width: '100%', boxSizing: 'border-box', backgroundColor: 'var(--input-bg)', color: 'var(--text-color)' }, // Dùng var
    filterSelect: { padding: '8px 10px', border: '1px solid var(--input-border-color)', borderRadius: '4px', width: '100%', boxSizing: 'border-box', background: 'var(--input-bg)', color: 'var(--text-color)' }, // Dùng var
    button: {
        padding: '8px 12px', border: 'none', borderRadius: '4px',
        cursor: 'pointer', fontWeight: 'bold', marginLeft: '10px',
    },
    submitButton: { backgroundColor: 'var(--primary-color)', color: '#fff' }, // Dùng var
    cancelButton: { backgroundColor: 'var(--button-bg)', color: 'var(--button-text)', border: '1px solid var(--border-color)' }, // Dùng var
    
    tableContainer: { overflowX: 'auto', marginTop: '15px' },
    resultsTable: {
        width: '100%', borderCollapse: 'collapse', color: 'var(--text-color)' // Dùng var
    },
    profileSection: {
        marginTop: '20px', padding: '15px',
        border: '1px solid var(--border-color)', // Dùng var
        borderRadius: '8px',
        backgroundColor: 'var(--card-bg)', // Dùng var
        color: 'var(--text-color)' // Dùng var
    },
    salaryTable: {
        width: '100%', borderCollapse: 'collapse', marginTop: '10px', color: 'var(--text-color)' // Dùng var
    },
    thTd: {
        border: '1px solid var(--table-border-color)', // Dùng var
        padding: '8px 10px', textAlign: 'left', verticalAlign: 'middle',
    },
    header: {
        backgroundColor: 'var(--table-header-bg)', // Dùng var
        color: 'var(--text-color)', // Dùng var
    },
    emptyCell: {
        textAlign: 'center', padding: '20px', color: 'var(--text-color-secondary)' // Dùng var
    },
    backLink: {
        display: 'inline-block', marginBottom: '15px',
        color: 'var(--primary-color)', // Dùng var
        textDecoration: 'none', fontWeight: 'bold', cursor: 'pointer',
        background: 'none', border: 'none'
    },
    skeletonCell: {
        height: '20px', backgroundColor: '#e0e0e0',
        borderRadius: '4px', animation: 'pulse 1.5s infinite ease-in-out',
    },
};

// --- CSS ĐỘNG ĐÃ CẬP NHẬT ---
(function() {
    const styleId = 'payroll-management-styles';
    if (document.getElementById(styleId)) {
        document.getElementById(styleId).remove();
    }
    const styleSheet = document.createElement("style");
    styleSheet.id = styleId;
    styleSheet.type = "text/css";
    styleSheet.innerText = `
        @keyframes pulse {
            0% { background-color: #e0e0e0; }
            50% { background-color: #f0f0f0; }
            100% { background-color: #e0e0e0; }
        }
        /* Dark skeleton */
        body.theme-dark .skeletonCell {
            background-color: #333;
            opacity: 0.5;
            animation-name: pulse-dark;
        }
        @keyframes pulse-dark {
            0%{background-color:#333;opacity:.5}
            50%{background-color:#444;opacity:.7}
            100%{background-color:#333;opacity:.5}
        }

        /* Action buttons */
        .action-button {
            padding: 3px 6px; margin-right: 4px; border-radius: 3px;
            border: 1px solid var(--border-color); background-color: var(--button-bg); color: var(--button-text); /* Dùng var */
            cursor: pointer; font-size: 0.9em; transition: background-color 0.2s, border-color 0.2s;
        }
        .action-button:hover {
            border-color: #aaa;
            background-color: var(--border-color) !important; /* Dùng var */
        }
        /* Giữ màu semantic */
        .view-button:hover { background-color: #e6f7ff !important; border-color: #91d5ff !important; }
        .edit-button:hover { background-color: #fffbe6 !important; border-color: #ffe58f !important; }

        /* Focus styles */
        .filter-input:focus, .filter-select:focus {
             border-color: var(--primary-color);
             box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
             outline: none;
        }
        /* Clear button hover */
        .filter-clear-button:hover {
            background-color: var(--border-color) !important;
        }
        /* Table header text color */
        thead th {
            color: var(--text-color);
        }
    `;
    document.head.appendChild(styleSheet);
})();

export default PayrollManagement;
//////////////////
// frontend/src/pages/Positions.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { useAuth } from '../context/AuthContext';

// Component Modal dùng chung cho Thêm/Sửa
const PositionModal = ({ isOpen, onClose, onSuccess, positionData }) => {
  const [name, setName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const isEditMode = !!positionData;

  useEffect(() => {
    setName(isEditMode ? positionData.PositionName : '');
    setError('');
  }, [isOpen, positionData, isEditMode]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim()) { setError('Tên chức vụ không được để trống.'); return; }
    setLoading(true); setError('');
    try {
      if (isEditMode) {
        await api.put(`/positions/${positionData.PositionID}`, { PositionName: name });
      } else {
        await api.post('/positions/', { PositionName: name });
      }
      onSuccess();
    } catch (err) {
      setError(err.response?.data?.detail || 'Lưu thất bại.');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div style={styles.overlay}>
      <div style={styles.modal}>
        <h2>{isEditMode ? 'Sửa Chức vụ' : 'Thêm Chức vụ mới'}</h2>
        {error && <p style={{ color: 'red' }}>{error}</p>}
        <form onSubmit={handleSubmit}>
          <div style={styles.formGroup}>
            <label>Tên Chức vụ:</label>
            <input type="text" value={name} onChange={(e) => setName(e.target.value)} disabled={loading} style={{ width: '95%', padding: '8px' }} required />
          </div>
          <div style={styles.buttonGroup}>
            <button type="submit" disabled={loading}>{loading ? 'Đang lưu...' : (isEditMode ? 'Lưu thay đổi' : 'Thêm mới')}</button>
            <button type="button" onClick={onClose} disabled={loading} style={{ marginLeft: '10px' }}>Hủy</button>
          </div>
        </form>
      </div>
    </div>
  );
};

// Component trang chính
function Positions() {
  const [positions, setPositions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { user } = useAuth();
  const isAdmin = user?.role === 'Admin';

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentItem, setCurrentItem] = useState(null);

  const fetchData = async () => {
    setLoading(true); setError('');
    try {
      const response = await api.get('/positions/');
      setPositions(response.data);
    } catch (err) {
      setError('Không thể tải danh sách chức vụ.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { fetchData(); }, []);

  const handleOpenModal = (pos = null) => { setCurrentItem(pos); setIsModalOpen(true); };
  const handleCloseModal = () => { setIsModalOpen(false); setCurrentItem(null); };
  const handleSuccess = () => { handleCloseModal(); fetchData(); };

  const handleDelete = async (posId, posName) => {
    if (window.confirm(`Bạn có chắc muốn xóa chức vụ "${posName}" không?`)) {
      setError('');
      try {
        await api.delete(`/positions/${posId}`);
        fetchData();
      } catch (err) {
        setError(err.response?.data?.detail || 'Xóa thất bại. Chức vụ có thể đang được gán cho nhân viên.');
      }
    }
  };

  if (loading && positions.length === 0) return <p>Đang tải...</p>;

  return (
    <div>
      <h2>Quản lý Chức vụ</h2>
      {error && <p style={{ color: 'red', border: '1px solid red', padding: '10px' }}>{error}</p>}
      {isAdmin && <button onClick={() => handleOpenModal(null)} style={{ margin: '10px 0' }}>Thêm Chức vụ mới</button>}
      <table border="1" cellPadding="10" style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead>
          <tr>
            <th>ID</th>
            <th>Tên Chức vụ</th>
            {isAdmin && <th>Hành động</th>}
          </tr>
        </thead>
        <tbody>
          {positions.map(pos => (
            <tr key={pos.PositionID}>
              <td>{pos.PositionID}</td>
              <td>{pos.PositionName}</td>
              {isAdmin && (
                <td>
                  <button onClick={() => handleOpenModal(pos)} style={{ marginRight: '5px' }}>Sửa</button>
                  <button onClick={() => handleDelete(pos.PositionID, pos.PositionName)} style={{ color: 'red' }}>Xóa</button>
                </td>
              )}
            </tr>
          ))}
          {positions.length === 0 && !loading && (
             <tr><td colSpan={isAdmin ? 3 : 2} style={{textAlign: 'center'}}>Không có chức vụ nào.</td></tr>
          )}
        </tbody>
      </table>
      <PositionModal isOpen={isModalOpen} onClose={handleCloseModal} onSuccess={handleSuccess} positionData={currentItem} />
    </div>
  );
}

const styles = {
  overlay: { position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 },
  modal: { backgroundColor: '#fff', padding: '25px', borderRadius: '8px', minWidth: '400px', boxShadow: '0 4px 10px rgba(0,0,0,0.1)' },
  formGroup: { marginBottom: '15px' },
  buttonGroup: { marginTop: '20px', textAlign: 'right' }
};

export default Positions;
/////////////
// frontend/src/pages/Reports.js
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import EmployeeDeptChart from '../components/charts/EmployeeDeptChart';
import AvgSalaryChart from '../components/charts/AvgSalaryChart';
import { motion } from 'framer-motion';
import { toast } from 'react-toastify';

// --- Skeleton Component ---
const SkeletonCard = ({ chart = true }) => (
    <div style={styles.card}>
        <div style={{ ...styles.skeletonItem, height: '24px', width: '40%', marginBottom: '15px' }} className="skeletonItem"></div>
        <div style={{ ...styles.skeletonItem, height: '36px', width: '60%', marginBottom: '25px' }} className="skeletonItem"></div>
        {chart ? (
            <div style={{ ...styles.skeletonItem, height: '250px', width: '100%' }} className="skeletonItem"></div>
        ) : (
            <>
                <div style={{ ...styles.skeletonItem, height: '20px', width: '80%', marginBottom: '10px' }} className="skeletonItem"></div>
                <div style={{ ...styles.skeletonItem, height: '20px', width: '70%' }} className="skeletonItem"></div>
            </>
        )}
    </div>
);

// --- Hàm tiện ích định dạng tiền tệ (Giả định VNĐ) ---
const formatCurrency = (value) => {
    if (typeof value !== 'number') return value;
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);
};

function Reports() {
    const [hrReport, setHrReport] = useState(null);
    const [payrollReport, setPayrollReport] = useState(null);
    const [dividendReport, setDividendReport] = useState(null);
    const [loading, setLoading] = useState(true);

    // Lấy theme status cho màu chart
    const isDarkMode = document.body.classList.contains('theme-dark');
    const barColor1 = isDarkMode ? '#6A7FAB' : '#8884d8';
    const barColor2 = isDarkMode ? '#77BFA3' : '#82ca9d';
    const textColor = isDarkMode ? 'var(--text-color-secondary)' : '#666';

    useEffect(() => {
        const fetchReports = async () => {
            setLoading(true);
            try {
                const [hrRes, payrollRes, dividendRes] = await Promise.all([
                    api.get('/reports/hr_summary'),
                    api.get('/reports/payroll_summary'),
                    api.get('/reports/dividend_summary')
                ]);
                setHrReport(hrRes.data);
                setPayrollReport(payrollRes.data);
                setDividendReport(dividendRes.data);
            } catch (error) {
                console.error("Failed to fetch reports", error);
                toast.error("Không thể tải dữ liệu báo cáo.");
            }
            setLoading(false);
        };
        fetchReports();
    }, []);

    if (loading) {
        return (
            // FIX: Sửa padding từ '0px' thành '20px'
            <div style={{ padding: '20px', color: 'var(--text-color)' }}>
                <h2 style={{ color: 'var(--text-color)' }}>Báo cáo Tích hợp</h2>
                <div style={styles.gridContainer}>
                    <SkeletonCard chart={true} />
                    <SkeletonCard chart={true} />
                </div>
                <div style={{marginTop: '20px'}}>
                    <SkeletonCard chart={false} />
                </div>
            </div>
        );
    }

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            // FIX: Sửa padding từ '0px' thành '20px'
            style={{ padding: '20px', color: 'var(--text-color)' }}
        >
            <h2 style={{ color: 'var(--text-color)' }}>Báo cáo Tích hợp</h2>

            <div style={styles.gridContainer}>
                {/* Báo cáo HR */}
                <div style={styles.card}>
                    <h3 style={{ color: 'var(--text-color)' }}>Báo cáo Nhân sự (SQL Server)</h3>
                    {hrReport ? (
                        <>
                            <div style={styles.statItem}>
                                <span style={styles.statLabel}>Tổng số nhân viên</span>
                                <span style={styles.statValue}>{hrReport.total_employees}</span>
                            </div>
                            <EmployeeDeptChart data={hrReport.distribution_by_dept} barColor={barColor1} textColor={textColor} />
                        </>
                    ) : <p>Lỗi tải báo cáo HR.</p>}
                </div>

                {/* Báo cáo Payroll */}
                <div style={styles.card}>
                    <h3 style={{ color: 'var(--text-color)' }}>Báo cáo Lương (MySQL)</h3>
                    {payrollReport ? (
                        <>
                            <div style={styles.statItem}>
                                <span style={styles.statLabel}>Tổng quỹ lương (tháng gần nhất)</span>
                                <span style={styles.statValue}>{formatCurrency(payrollReport.total_salary_budget)}</span>
                            </div>
                            <AvgSalaryChart data={payrollReport.avg_salary_by_dept} barColor={barColor2} textColor={textColor} />
                        </>
                    ) : <p>Lỗi tải báo cáo Payroll.</p>}
                </div>
            </div>

            {/* Báo cáo Cổ tức (Full width) */}
            <div style={{...styles.card, marginTop: '20px'}}>
                <h3 style={{ color: 'var(--text-color)' }}>Báo cáo Cổ tức (SQL Server)</h3>
                {dividendReport ? (
                    <div style={styles.dividendGrid}>
                        <div style={styles.statItem}>
                            <span style={styles.statLabel}>Tổng cổ tức đã chi</span>
                            <span style={styles.statValue}>{formatCurrency(dividendReport.total_dividend_amount)}</span>
                        </div>
                        <div style={styles.statItem}>
                            <span style={styles.statLabel}>Số nhân viên là cổ đông</span>
                            <span style={styles.statValue}>{dividendReport.employee_shareholders}</span>
                        </div>
                    </div>
                ) : <p>Lỗi tải báo cáo Cổ tức.</p>}
            </div>

        </motion.div>
    );
}

// --- STYLES ĐÃ CẬP NHẬT ---
const styles = {
    gridContainer: {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))',
        gap: '20px',
    },
    card: {
        backgroundColor: 'var(--card-bg)', // Dùng var
        border: '1px solid var(--border-color)', // Dùng var
        padding: '15px 20px',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
    },
    statItem: {
        marginBottom: '20px',
    },
    statLabel: {
        fontSize: '0.9em',
        color: 'var(--text-color-secondary)', // Dùng var
        display: 'block',
    },
    statValue: {
        fontSize: '1.8em',
        fontWeight: 'bold',
        color: 'var(--text-color)', // Dùng var
    },
    dividendGrid: {
        display: 'flex',
        gap: '30px',
        color: 'var(--text-color)', // Dùng var
    },
    skeletonItem: {
        backgroundColor: '#e0e0e0', // Màu cơ bản
        borderRadius: '4px',
        animation: 'pulse 1.5s infinite ease-in-out',
    }
};

// --- CSS ĐỘNG ĐÃ CẬP NHẬT ---
(function() {
    const styleId = 'reports-styles';
    if (document.getElementById(styleId)) {
        document.getElementById(styleId).remove();
    }
    const styleSheet = document.createElement("style");
    styleSheet.id = styleId;
    styleSheet.type = "text/css";
    styleSheet.innerText = `
        @keyframes pulse {
            0% { background-color: #e0e0e0; }
            50% { background-color: #f0f0f0; }
            100% { background-color: #e0e0e0; }
        }
        /* Dark skeleton */
        body.theme-dark .skeletonItem {
            background-color: #333;
            opacity: 0.5;
            animation-name: pulse-dark;
        }
        @keyframes pulse-dark {
            0%{background-color:#333;opacity:.5}
            50%{background-color:#444;opacity:.7}
            100%{background-color:#333;opacity:.5}
        }
        /* Đảm bảo text của Recharts dùng biến CSS */
        .recharts-text {
            fill: var(--text-color-secondary) !important;
        }
    `;
    document.head.appendChild(styleSheet);
})();

export default Reports;
/////////////////
// frontend/src/pages/UserManagement.js
import React, { useState, useEffect, useCallback, useRef } from 'react'; // Thêm useRef
import api from '../services/api';
import { useAuth } from '../context/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-toastify';
import SetRoleModal from '../components/SetRoleModal';
import ResetPasswordModal from '../components/ResetPasswordModal';

// --- Thêm danh sách vai trò để lọc ---
const ROLES_OPTIONS = ["Admin", "HR Manager", "Payroll Manager", "Employee"];

// --- Skeleton Row Component ---
const SkeletonRow = ({ columns }) => (
    <tr>
        {Array.from({ length: columns }).map((_, index) => (
            <td key={index} style={styles.tableCell}>
                <div style={styles.skeletonCell} className="skeletonCell"></div>
            </td>
        ))}
    </tr>
);

function UserManagement() {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const { user: currentUser } = useAuth();

    // --- Thêm state cho tìm kiếm và lọc ---
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedRoleFilter, setSelectedRoleFilter] = useState(''); // State cho dropdown lọc
    const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(searchTerm); // State cho debounce

    const [isRoleModalOpen, setIsRoleModalOpen] = useState(false);
    const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);
    const [selectedUser, setSelectedUser] = useState(null);

    // --- Sửa fetchUsers để nhận tham số ---
    const fetchUsers = useCallback(async (search = '', role = '') => {
        setLoading(true);
        try {
            const params = {
                search: search || undefined, // Gửi undefined nếu rỗng
                role: role || undefined,     // Gửi undefined nếu rỗng
                limit: 200 // Lấy nhiều hơn để demo, có thể thêm phân trang sau
            };
            const response = await api.get('/users/', { params });
            setUsers(response.data);
             if (response.data.length === 0 && (search || role)) {
                toast.info("Không tìm thấy tài khoản nào khớp.");
            }
        } catch (error) {
            console.error("Failed to fetch users", error);
            toast.error("Không thể tải danh sách tài khoản.");
        }
        setLoading(false);
    }, []);

    // --- useEffect để debounce searchTerm ---
    useEffect(() => {
        const handler = setTimeout(() => {
            setDebouncedSearchTerm(searchTerm);
        }, 500); // Đợi 500ms

        return () => { clearTimeout(handler); };
    }, [searchTerm]);

     // --- useEffect để fetch khi filter thay đổi ---
    const isFirstRun = useRef(true);
    useEffect(() => {
        // Bỏ qua lần chạy đầu tiên (vì fetchUsers() ban đầu đã chạy)
        if (isFirstRun.current) {
            isFirstRun.current = false;
            fetchUsers(); // Fetch lần đầu không cần filter
            return;
        }
        // Chỉ fetch khi debouncedSearchTerm hoặc selectedRoleFilter thay đổi
        fetchUsers(debouncedSearchTerm, selectedRoleFilter);
    }, [debouncedSearchTerm, selectedRoleFilter, fetchUsers]);


    // --- Handlers cho filter ---
    const handleSearchChange = (e) => setSearchTerm(e.target.value);
    const handleRoleFilterChange = (e) => setSelectedRoleFilter(e.target.value);
    const handleClearFilters = () => {
        setSearchTerm('');
        setSelectedRoleFilter('');
        // Không cần gọi fetchUsers() ở đây, vì useEffect sẽ tự động chạy khi state thay đổi
    };

    // --- Modal Handlers (Giữ nguyên) ---
    const handleOpenRoleModal = (user) => {
        setSelectedUser(user);
        setIsRoleModalOpen(true);
    };
    const handleCloseRoleModal = () => {
        setSelectedUser(null);
        setIsRoleModalOpen(false);
    };
    const handleRoleUpdateSuccess = () => {
        handleCloseRoleModal();
        toast.success("Cập nhật vai trò thành công!");
        // Fetch lại với filter hiện tại
        fetchUsers(debouncedSearchTerm, selectedRoleFilter); 
    };
    const handleOpenPasswordModal = (user) => {
        setSelectedUser(user);
        setIsPasswordModalOpen(true);
    };
    const handleClosePasswordModal = () => {
        setSelectedUser(null);
        setIsPasswordModalOpen(false);
    };
    const handlePasswordResetSuccess = () => {
        handleClosePasswordModal();
        toast.success(`Đã đặt lại mật khẩu cho ${selectedUser?.email}.`);
    };

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            style={{ padding: '20px', color: 'var(--text-color)' }} // Sửa padding
        >
            <h2 style={{ color: 'var(--text-color)' }}>Quản lý Tài khoản (Auth DB)</h2>
            <p style={{ color: 'var(--text-color-secondary)' }}>Quản lý vai trò và mật khẩu truy cập hệ thống.</p>

            {/* --- Thêm Filter UI --- */}
            <div style={styles.filterContainer}>
                <div style={styles.filterItem}>
                    <label style={styles.filterLabel}>Tìm kiếm (ID, Tên, Email)</label>
                    <input
                        type="text"
                        placeholder="Nhập từ khóa..."
                        value={searchTerm}
                        onChange={handleSearchChange}
                        style={styles.filterInput}
                        className="filter-input"
                    />
                </div>
                <div style={styles.filterItem}>
                    <label style={styles.filterLabel}>Lọc theo Vai trò</label>
                    <select
                        value={selectedRoleFilter}
                        onChange={handleRoleFilterChange}
                        style={styles.filterSelect}
                        className="filter-select"
                    >
                        <option value="">Tất cả vai trò</option>
                        {ROLES_OPTIONS.map(role => (
                            <option key={role} value={role}>{role}</option>
                        ))}
                    </select>
                </div>
                 <div style={{ ...styles.filterItem, alignSelf: 'flex-end' }}>
                    <button
                        type="button"
                        onClick={handleClearFilters}
                        disabled={loading}
                        style={{ ...styles.filterButtonClear }}
                        className="filterButtonClear"
                    >
                        Xóa bộ lọc
                    </button>
                </div>
            </div>
            {/* --- Kết thúc Filter UI --- */}


            <div style={styles.tableContainer}>
                <table style={styles.table}>
                    <thead>
                        <tr>
                            <th style={styles.th}>ID (Auth)</th>
                            <th style={styles.th}>Họ tên</th>
                            <th style={styles.th}>Email (Tên đăng nhập)</th>
                            <th style={styles.th}>Vai trò</th>
                            <th style={styles.th}>Employee ID (Link)</th>
                            <th style={styles.th}>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        {loading ? (
                            Array.from({ length: 8 }).map((_, i) => <SkeletonRow key={i} columns={6} />)
                        ) : users.length > 0 ? (
                            users.map(user => {
                                const isCurrentUser = user.email === currentUser.email;

                                return (
                                    <tr key={user.id}>
                                        <td style={styles.tableCell}>{user.id}</td>
                                        <td style={styles.tableCell}>{user.full_name}</td>
                                        <td style={styles.tableCell}>{user.email}</td>
                                        <td style={styles.tableCell}>
                                            <span style={styles.roleBadge}>{user.role}</span>
                                        </td>
                                        <td style={styles.tableCell}>{user.employee_id_link || 'N/A'}</td>
                                        <td style={styles.tableCell}>
                                            {isCurrentUser ? (
                                                <span style={styles.annotation}>(Tài khoản của bạn)</span>
                                            ) : (
                                                <>
                                                    <button
                                                        onClick={() => handleOpenRoleModal(user)}
                                                        className="action-button role-button"
                                                        disabled={isCurrentUser}
                                                    >
                                                        Đặt vai trò
                                                    </button>
                                                    <button
                                                        onClick={() => handleOpenPasswordModal(user)}
                                                        className="action-button password-button"
                                                    >
                                                        Đặt lại MK
                                                    </button>
                                                </>
                                            )}
                                        </td>
                                    </tr>
                                );
                            })
                        ) : (
                            <tr><td colSpan={6} style={styles.emptyCell}>Không tìm thấy tài khoản nào.</td></tr>
                        )}
                    </tbody>
                </table>
            </div>

            {/* Modals */}
            <AnimatePresence>
                {isRoleModalOpen && selectedUser && (
                    <SetRoleModal
                        isOpen={isRoleModalOpen}
                        onClose={handleCloseRoleModal}
                        onSuccess={handleRoleUpdateSuccess}
                        userData={selectedUser}
                    />
                )}
                {isPasswordModalOpen && selectedUser && (
                    <ResetPasswordModal
                        isOpen={isPasswordModalOpen}
                        onClose={handleClosePasswordModal}
                        onSuccess={handlePasswordResetSuccess}
                        userData={selectedUser}
                    />
                )}
            </AnimatePresence>
        </motion.div>
    );
}

// --- STYLES (Thêm style cho Filter) ---
const styles = {
    // --- Thêm Filter Styles ---
    filterContainer: {
        marginBottom: '20px', padding: '15px',
        border: '1px solid var(--border-color)', borderRadius: '8px',
        background: 'var(--card-bg)', display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', // Responsive grid
        gap: '15px', alignItems: 'flex-end',
    },
    filterItem: { display: 'flex', flexDirection: 'column' },
    filterLabel: { marginBottom: '5px', fontSize: '0.85em', fontWeight: 'bold', color: 'var(--text-color-secondary)' },
    filterInput: { padding: '8px 10px', border: '1px solid var(--input-border-color)', borderRadius: '4px', width: '100%', boxSizing: 'border-box', backgroundColor: 'var(--input-bg)', color: 'var(--text-color)' },
    filterSelect: { padding: '8px 10px', border: '1px solid var(--input-border-color)', borderRadius: '4px', width: '100%', boxSizing: 'border-box', background: 'var(--input-bg)', color: 'var(--text-color)' },
    filterButtonClear: {
        padding: '8px 15px', cursor: 'pointer', border: '1px solid var(--border-color)',
        backgroundColor: 'var(--button-bg)', color: 'var(--button-text)',
        borderRadius: '4px', transition: 'background-color 0.2s', whiteSpace: 'nowrap',
        height: '34px' // Căn chỉnh chiều cao với input/select
    },
    
    // --- Styles cũ ---
    tableContainer: {
        overflowX: 'auto',
        marginTop: '15px',
        backgroundColor: 'var(--card-bg)', 
        border: '1px solid var(--table-border-color)', 
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
    },
    table: {
        width: '100%',
        borderCollapse: 'collapse',
        fontSize: '0.9em',
    },
    th: {
        padding: '10px 12px',
        textAlign: 'left',
        backgroundColor: 'var(--table-header-bg)', 
        borderBottom: '2px solid var(--table-border-color)', 
        whiteSpace: 'nowrap',
        color: 'var(--text-color)', 
    },
    tableCell: {
        padding: '10px 12px',
        borderBottom: '1px solid var(--table-row-border-color)', 
        verticalAlign: 'middle',
        whiteSpace: 'nowrap',
        color: 'var(--text-color)', 
    },
    emptyCell: {
        textAlign: 'center',
        padding: '20px',
        color: 'var(--text-color-secondary)' 
    },
    skeletonCell: {
        height: '20px',
        backgroundColor: '#e0e0e0', // Màu cơ bản
        borderRadius: '4px',
        animation: 'pulse 1.5s infinite ease-in-out'
    },
    annotation: {
        fontSize: '0.9em',
        color: 'var(--text-color-secondary)', 
        fontStyle: 'italic',
    },
    roleBadge: { 
        padding: '2px 8px',
        borderRadius: '10px',
        fontWeight: 'bold',
        fontSize: '0.9em',
        backgroundColor: '#e6f7ff',
        border: '1px solid #91d5ff',
        color: '#096dd9',
    }
};

// --- CSS ĐỘNG (Thêm focus style cho filter) ---
(function() {
    const styleId = 'user-management-styles';
    if (document.getElementById(styleId)) {
        // Cập nhật thay vì xóa và thêm lại để tránh nhấp nháy
        // (Trong ví dụ này, chúng ta xóa và thêm lại cho đơn giản)
        document.getElementById(styleId).remove();
    }
    const styleSheet = document.createElement("style");
    styleSheet.id = styleId;
    styleSheet.type = "text/css";
    styleSheet.innerText = `
        @keyframes pulse {
            0% { background-color: #e0e0e0; }
            50% { background-color: #f0f0f0; }
            100% { background-color: #e0e0e0; }
        }
        body.theme-dark .skeletonCell {
            background-color: #333;
            opacity: 0.5;
            animation-name: pulse-dark;
        }
        @keyframes pulse-dark {
            0%{background-color:#333;opacity:.5}
            50%{background-color:#444;opacity:.7}
            100%{background-color:#333;opacity:.5}
        }
        
        .action-button {
            padding: 3px 6px; margin-right: 4px; border-radius: 3px;
            border: 1px solid var(--border-color); 
            background-color: var(--button-bg); 
            color: var(--button-text); 
            cursor: pointer; font-size: 0.9em;
            transition: background-color 0.2s, border-color 0.2s;
            white-space: nowrap;
        }
        .action-button:hover:not(:disabled) {
            border-color: #aaa;
            background-color: var(--border-color) !important; 
        }
        .action-button:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }
        .role-button:hover { background-color: #f6ffed !important; border-color: #b7eb8f !important; }
        .password-button:hover { background-color: #fffbe6 !important; border-color: #ffe58f !important; }

        /* Thêm focus styles cho filter inputs/selects */
        .filter-input:focus, .filter-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
            outline: none;
        }
        /* Hover cho nút clear */
        .filterButtonClear:hover {
            background-color: var(--border-color) !important;
        }
        /* Table border fix */
        thead th:last-child, tbody tr td:last-child {
            border-right: none;
        }
    `;
    document.head.appendChild(styleSheet);
})();

export default UserManagement;
//////////////////
import axios from 'axios';
console.log('API Base URL:', process.env.REACT_APP_API_BASE_URL);
const api = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL,
});

// Interceptor: Tự động đính kèm JWT token vào mỗi request
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access_token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor: Xử lý lỗi 401 (Unauthorized)
// Nếu token hết hạn, tự động logout và đá về trang login
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response && error.response.status === 401) {
      localStorage.removeItem('access_token');
      // Chuyển hướng về trang login
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;
/////////////
// frontend/src/services/authService.js
import api from './api';
import { jwtDecode } from 'jwt-decode';

export const login = async (email, password) => {
  const params = new URLSearchParams();
  params.append('username', email);
  params.append('password', password);

  try {
    const response = await api.post('/login', params, {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    });
    const { access_token } = response.data;
    
    localStorage.setItem('access_token', access_token);
    
    // Sửa: Giải mã token để lấy thông tin user
    const decoded = jwtDecode(access_token);
    const user = { 
      email: decoded.sub, 
      role: decoded.role,
      emp_id: decoded.emp_id // <-- LƯU EMP_ID
    };
    return user;

  } catch (error) {
    console.error('Login failed:', error);
    throw error;
  }
};

export const logout = () => {
  localStorage.removeItem('access_token');
};

export const getCurrentUser = () => {
  const token = localStorage.getItem('access_token');
  if (!token) return null;

  try {
    const decoded = jwtDecode(token);
    if (decoded.exp * 1000 < Date.now()) {
      logout();
      return null;
    }
    // Sửa: Trả về đầy đủ thông tin user
    return { 
      email: decoded.sub, 
      role: decoded.role,
      emp_id: decoded.emp_id // <-- TRẢ VỀ EMP_ID
    };
  } catch (error) {
    console.error('Invalid token:', error);
    logout();
    return null;
  }
};
////////////////
// --- frontend/src/App.js ---

import React from 'react';
import { Routes, Route, useLocation } from 'react-router-dom';
import { AnimatePresence } from 'framer-motion';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Import các components
import ProtectedRoute from './components/ProtectedRoute';
import Layout from './components/Layout';

// Import các trang (Pages)
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import EmployeeList from './pages/EmployeeList';
import EmployeeDetail from './pages/EmployeeDetail';
import AdminManagement from './pages/AdminManagement'; // For Quản lý Tổ chức
import PayrollManagement from './pages/PayrollManagement'; // For Quản lý Bảng lương
import Reports from './pages/Reports'; // For Báo cáo
import UserManagement from './pages/UserManagement'; // For Quản lý Tài khoản

// Các vai trò
const ROLES = {
    ADMIN: 'Admin',
    HR: 'HR Manager',
    PAYROLL: 'Payroll Manager',
    EMPLOYEE: 'Employee'
};

function App() {
    const location = useLocation();

    return (
        <>
            {/* Configure Toast Notifications */}
            <ToastContainer
                position="top-right"
                autoClose={3000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="colored"
            />

            {/* AnimatePresence and Routes */}
            <AnimatePresence mode="wait">
                <Routes location={location} key={location.pathname}>
                    <Route path="/login" element={<Login />} />
                    <Route
                        path="/"
                        element={<ProtectedRoute><Layout /></ProtectedRoute>}
                    >
                        {/* 1. Dashboard */}
                        <Route index element={<Dashboard />} />

                        {/* 2. Quản lý Tài khoản (Moved Up) */}
                        <Route
                            path="user-management"
                            element={<ProtectedRoute allowedRoles={[ROLES.ADMIN]}><UserManagement /></ProtectedRoute>}
                        />

                        {/* 3. Quản lý Nhân viên */}
                        <Route
                            path="employees"
                            element={<ProtectedRoute allowedRoles={[ROLES.ADMIN, ROLES.HR]}><EmployeeList /></ProtectedRoute>}
                        />
                        {/* Keep Employee Detail route close to the list */}
                        <Route
                            path="employees/:id"
                            element={<ProtectedRoute allowedRoles={[ROLES.ADMIN, ROLES.HR, ROLES.EMPLOYEE]}><EmployeeDetail /></ProtectedRoute>}
                        />

                        {/* 4. Quản lý Tổ chức */}
                        <Route
                            path="management" // Assuming this is for AdminManagement (Departments/Positions)
                            element={<ProtectedRoute allowedRoles={[ROLES.ADMIN, ROLES.HR]}><AdminManagement /></ProtectedRoute>}
                        />

                        {/* 5. Quản lý Bảng lương */}
                        <Route
                            path="payroll"
                            element={<ProtectedRoute allowedRoles={[ROLES.ADMIN, ROLES.PAYROLL]}><PayrollManagement /></ProtectedRoute>}
                        />

                        {/* 6. Báo cáo */}
                        <Route
                            path="reports"
                            element={<ProtectedRoute allowedRoles={[ROLES.ADMIN, ROLES.HR, ROLES.PAYROLL]}><Reports /></ProtectedRoute>}
                        />

                    </Route>
                    {/* Fallback 404 Route */}
                    <Route path="*" element={<h2>404 Not Found</h2>} />
                </Routes>
            </AnimatePresence>
        </>
    );
}

export default App;
//////////////
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.2",
    "framer-motion": "^12.23.24",
    "jwt-decode": "^4.0.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.24.1",
    "react-scripts": "5.0.1",
    "react-toastify": "^11.0.5",
    "recharts": "^2.12.7",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
//////////////////